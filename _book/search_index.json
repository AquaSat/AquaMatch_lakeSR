[["introduction.html", "lakeSR: Compiled Satellite Surface Reflectance and Surface Temperature for Lakes in the United States and US Territories 1 Introduction 1.1 Code Architecture", " lakeSR: Compiled Satellite Surface Reflectance and Surface Temperature for Lakes in the United States and US Territories ROSSyndicate 2023-10-23 1 Introduction This bookdown document (Xie 2016) explains the methodology we use in the acquisition and compilation of satellite surface reflectance and surface temperature data for all lakes in the United States and US Territories. This product, “lakeSR”, is a component of the AquaSat (v2) suite, an effort to create a database of lake and river water quality observations alongside remote sensing data. Currently, lakeSR is comprised of the historical Landsat record from 1984 until mid-2023, comprised of data from the following missions: Landsat 4 Thematic Mapper (TM) Landsat 5 TM Landsat 7 Enhanced Thematic Mapper Plus (ETM+) Landsat 8 Operational Land Imager/Thermal Infrared Sensor (OLI/TIRS) Landsat 9 OLI/TIRS Together the Landsat archive of lakeSR is referred to as “lakeSR-LS_C2_SRST” (Landsat Collection 2 Surface Reflectance and Surface Temperature). There will be additional satellite data incorporated into the lakeSR product in the future. lakeSR acquires tabular data summaries of satellite-derived surface reflectance and surface temperature data at central locations within a lake and at locations identified with monitoring records from the Water Quality Portal from the AquaMatch component of AquaSat. 1.1 Code Architecture lakeSR is built on the {targets} workflow management system for R (Landau 2021). The {targets} architecture is based on lists of functions performed in a specific order, each function called a target. The primary benefit of {targets} workflows is that code is only run if a target, a target’s code, or a target’s dependencies have changed (or become “outdated” in {targets} speak). lakeSR is broken down into functional groups of targets, listed below with a brief summary about what task(s) each group completes. a_Calculate_Centers: This {targets} list calculates “Pole of Inaccessibility” (POI) for all lakes, ponds, reservoirs, and playas greater than 1 hectare in surface area using the NHDPlusHR polygons using the {nhdplusTools} package and the poi() function in the {polylabelr} package. For all waterbodies in Alaska, POI were calculated based on the NHD Best Resolution file for the entire state because the NHDPlusHR is not complete for AK. Note: this group of targets will take up to 4h to complete. See Section 2 for additional background and detailed methodology. b_pull_Landsat_SRST_poi: This {targets} group uses the config file config_files/config_poi.yml and the Chebyshev Center points created in the a_Calculate_Centers group to pull Landsat Collection 2 Surface Reflectance and Surface Temperature using the GEE API. In this group, we use the most strict LS4-7 pixel filters which include the sr_cloud_mask filter. This filter is a conservative filter, removing artefacts from upstream products that are used to create the SR product. This group of targets ends with a branched target that maps over each of the WRS2 path rows that intersect with the points. Note: this group of targets takes a very, very long time, averaging about 1 hour per path-row branch. There are just under 800 path rows executed in this branch. knitr::opts_chunk$set(echo = F, message = F, warning = F, error = FALSE) Citations "],["locations-of-data-acquisition.html", "2 Locations of Data Acquisition 2.1 Pole of Inaccessibility 2.2 Lakes included in lakeSR 2.3 Implementation", " 2 Locations of Data Acquisition As noted in the Introduction (Section 1), for the purposes of AquaSat, surface reflectance and surface temperature data are acquired at specific, centrally-located points within waterbodies (typically in pelagic locations of lakes) and at locations where there are in situ data. The data acquired at locations where there are in situ data are acquired to create location-specific algorithms using the AquaMatch database, which can then be applied to the data collected over the centrally-located point across all waterbodies in the lakeSR database. lakeSR does not acquire nor summarize data over the entire waterbody’s surface, as it is computationally impractical for most large lakes that cross multiple satellite path-rows or tiles. We are planning to investigate the variability differences in acquiring data over varying buffer distances to support this decision (GitHub Issue #14). At this time, the buffer used is a 120m radius of any given data acquisition location. 2.1 Pole of Inaccessibility The concept of “pole of inaccessibility” (POI) (Stefansson 1920) is used to define the geographic center of a circle with the largest circumference within any complex polygon. The foundational principle is used widely to describe the arctic pole of inaccessiblity, that is the point in the northern arctic circle that is the furthest from land, but has also been used to describe the geographic center of landmasses (Garcia-Castellanos and Lombardo 2007). For lakeSR, we use POI to determine the point in a lake that is furthest from the shoreline using the polylabelr::poi() function (Larsson 2020), which calculates a point in space and the radius of the circle used to define the POI. 2.2 Lakes included in lakeSR For lakeSR, we use the NHDPlusHR dataset for lakes within the conterminous US and US Territories using the nhdplusTools::download_nhdplushr() function (Blodgett and Johnson 2023). All HUC4s were downloaded and processed on 2023-10-05 using the most updated version available at the time of download. Because the NHDPlusHR dataset is incomplete for Alaska (Figure 2.1), we used the NHD Best Resolution File for the state of AK (US Geological Survey, n.d.). Figure 2.1: NHDPlusHR dataset availability, courtesy of the USGS. For every HUC4 included in the NHDPlusHR dataset and the state of Alaska NHD Best Resolution dataset, all waterbodies are limited to those with FCodes belonging to the following groups: 390 (lake/pond), 436 (reservoir), and 361 (playa) and are at least 0.01 km2 (1 hectare) in area according to the area value provided in the NHD file. This filtering resulted in 1,135,312 waterbodies included in our dataset, including 415,008 from Alaska. For each waterbody, the POI and distance-to-shore radius was calculated using the polylabelr::poi() function. In order to accurately calculate distance-to-shore, each waterbody was converted to the proper Universal Transverse Mercator (UTM) projection calculated from the mean longitudinal value of the polygon vertices prior to applying the poi() function. By using the point-local UTM projection, we decrease distortion expected from any single CRS used to represent all of the locations from which we have lakes. The latitude and longitude values of the POI were transformed to decimal degrees in World Geodetic System 1984 (WGS84) (EPSG:4326) from UTM easting and northing coordinates for use later in the workflow. It is important to note that the poi() function does not perform particularily well on larger polygons, however the points calculated should be an acceptable proxy for pelagic lake conditions. [[Will add additional detail from analysis of buffer sizes.]] 2.3 Implementation The code for gathering NHD waterbodies and calculating their respective POIs is found in {targets} group a_Calculate_Centers which is located in the script a_Calculate_Centers.R. The network graph (Figure 2.2) for this group depicts the dependencies between each of the targets in this group. ## - \\ | / - \\ | / - \\ | / Figure 2.2: Network graph of the targets in the a_Calculate_Centers {targets} group. On a high level, the processing begins by acquiring the polygons of all US states and territories using the {tigris} package (Walker 2023) (US_state_territories). These polygons are used to acquire a list HUC4s that intersect with each municipal boundary using the nhdplusTools::get_huc() function (HUC4_dataframe), which are then reduced to distinct HUC4’s and transformed into a vector of HUC4s (HUC4_list). As an error-handling measure, empty_hucs_file is created (not pictured in Figure 2.2) to collect a list of HUC4s that do not have high resolution files available for download (Figure 2.1). The target all_poi_points is created by calculating POIs for all waterbodies &gt; 1 hectare and having an FCode of 390, 436, or 361 from each HUC4 in the HUC4_list. For this target, we use the dynamic branching feature to iterate over each item in the HUC4_list. See the script calculate_centers_HUC4.R for details on the function applied in this target. The output of the all_poi_points target include multiple .csv files - these files are collated in the target all_poi_points, which outputs a .feather file (tracked as NHDHR_poi_points) containing all the POIs resulting from the NHDPlusHR polygon files. The NHDPlusHR contains a small number of sub-HUC4 waterbodies (specifically a few HUC8’s and HUC10’s) in the state of AK, but to make processing more straightforward, POIs from polygons from the NHDPlusHR that were from these files were removed (NHD_poi_points_noAK). The target make_AK_poi_points downloads the NHD Best Resolution geopackage and calculates POIs for each waterbody polygon of the same size and type as stated previously. (See the script calculate_AK_poi.R) The resulting file (tracked as AK_poi_points), is combined with the NHD_poi_points_noAK target to create a harmonized and collated file in the target combined_poi_file (see collate_NHDHR_AK.R, the output file istracked as combined_poi_points). Citations "],["citations.html", "3 Citations", " 3 Citations "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
