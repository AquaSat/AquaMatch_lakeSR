[["index.html", "AquaSat v2: lakeSR and siteSR Compiled Satellite Surface Reflectance and Surface Temperature for Waterbodies in the United States and US Territories 1 Introduction 1.1 Repository Links for the AquaMatch Suite 1.2 Note 1.3 Disclaimer", " AquaSat v2: lakeSR and siteSR Compiled Satellite Surface Reflectance and Surface Temperature for Waterbodies in the United States and US Territories ROSSyndicate 2025-06-27 1 Introduction This {bookdown} (Xie 2016) document explains the methodology we use in the acquisition and compilation of satellite surface reflectance and surface temperature data for the AquaMatch data suite. Specifically, this document describes data for all lakes greater than 1 hectare from the National Hydrography Dataset (“NHD”) in the United States and US Territories. These data comprilse “lakeSR”. Sites associated with Water Quality Portal (“WQP”) monitoring locations, and National Water Information System (“NWIS”) sensor locations comprise “siteSR”. Generally speaking, siteSR refers to remote sensing data acquired at locations with in situ data (from the WQP and NWIS) and lakeSR refers to remote sensing data acquired at centrally-located points of waterbodies (defined by the NHD). AquaSat v2 represents modular code and data infrastructure for: harmonizing in situ data from the Water Quality Portal and providing an interoperability tiering structure to allow for easier downstream filtering (“AquaMatch_harmonize_WQP”) acquiring remote sensing data of inland waterbodies and rivers (lakeSR, siteSR, and riverSR) pairing in situ data and remote sensing data for parameter-specific algorithm development (e.g., AquaMatch_WQP_LandsatC2) The goal of these data products is to facilitate assessment and monitoring of waterbodies within the United States and Territories using both in situ and remote sensing data. AquaMatch builds upon AquaSat (Ross et al. 2019) (referred to here as “AquaSat v1”) and LimnoSat-US (Topp et al. 2020). AquaSat v1 focused on pairing remote sensing data with in situ observations and measurements while LimnoSat-US acquired remote sensing for all waterbodies greater than 10 hectares across the Continental United States (CONUS) regardless of whether in situ measurements were available for that waterbody. In AquaSat v2, we bring these products together. For instance, lakeSR can define Landsat intermission handoffs to enable use of Landsat as a timeseries product, siteSR products can be used to create parameter-specific algorithms, and those algorithms can be applied to lakeSR to create a timeseries of water quality for waterbodies in the US and territories. AquaMatch code is built on the {targets} workflow management system for R (Landau 2021b). The {targets} architecture is based on lists of functions performed in a specific order, each function called a target. These targets are grouped together into processing groups. The primary benefit of {targets} workflows is that code is only run if a target, a target’s code, or a target’s dependencies have changed (or become “outdated” in {targets} speak). Full documentation of the WQP download and QA process from the upstream AquaMatch download and harmonize pipelines is located here. 1.1 Repository Links for the AquaMatch Suite AquaMatch_download_WQP: This repository contains code that downloads parameters from the WQP using the {dataRetrieval} package. AquaMatch_harmonize_WQP: This repository contains code that applies quality control to the heterogenous dataset resulting from the WQP download. The pipleline applies tiering, flagging, and quality control across WQP parameter groups. AquaMatch_siteSR: This repository contains code that collates locations for acquisition of remote sensing data, and obtains, collates, and applies quality control filters on the resulting data. AquaMatch_lakeSR: This repository contains code that calculates a centrally-located point within NHD waterbody features for remote sensing data acquisition, obtains, collates, and applies quality control filters on the resulting data. The code in this repository also calculates intermission handoff coefficients for Landsat Surface Reflectance data to allow for timeseries analysis across multiple sensors and atmospheric correction differences. 1.2 Note Landsat remote sensing images used in analyses courtesy of the United States Geological Survey. Any use of trade, firm, or product names is for descriptive purposes only and does not imply endorsement by the U.S. Government. 1.3 Disclaimer These data are preliminary or provisional and are subject to revision. They are being provided to meet the need for timely best science. The data have not received final approval by the U.S. Geological Survey (USGS) and are provided on the condition that neither the USGS nor the U.S. Government shall be held liable for any damages resulting from the authorized or unauthorized use of the data. "],["background.html", "2 Background 2.1 lakeSR Code Architecture 2.2 siteSR Code Architecture", " 2 Background Currently, AquaMatch remote sensing products contain data from the historical Landsat Collection 2 record from 1984 until late 2024, including the following missions: Landsat 4 Thematic Mapper (TM) Landsat 5 TM Landsat 7 Enhanced Thematic Mapper Plus (ETM+) Landsat 8 Operational Land Imager/Thermal Infrared Sensor (OLI/TIRS) Landsat 9 OLI/TIRS WARNING: the Landsat Surface Reflectance and Surface Temperature products should not be used without applying a handoff coefficient to harmonize data between missions. See Section 8 for details on this process. There will be additional satellite data incorporated into AquaMatch in the future. 2.1 lakeSR Code Architecture lakeSR code is broken down into groups of targets that perform specific tasks, listed below with a brief summary about what task(s) each group completes. This particular workflow incorporates both R and Python programming languages to complete these tasks. The lakeSR folder structure is as follows: |-- AquaMatch_lakeSR |-- README.md |-- run_targets.Rmd |-- config.yml |-- _targets.R |-- a_Calculate_Centers.R |-- a_Calculate_Centers |-- src |-- calculate_bestres_centers.R |-- calculate_centers_HUC4.R |-- b_pull_Landsat_SRST_poi.R |-- b_pull_Landsat_SRST_poi |-- config_files |-- config_poi.yml |-- in |-- WRS2_descending.shp |-- py |-- check_for_failed_tasks.py |-- poi_wait_for_completion.py |-- run_GEE_per_pathrow.py |-- src |-- check_if_fully_within_pr.R |-- format_yml.R |-- getWRS_pathrow_poi.R |-- reformat_locations.R |-- run_GEE_per_pathrow.R |-- c_collate_Landsat_data.R |-- c_collate_Landsat_data |-- src |-- collate_csvs_from_drive.R |-- download_csvs_from_drive.R |-- d_qa_filter_sort.R |-- d_qa_filter_sort |-- src |-- prep_LS_metadata_for_export.R |-- qa_and_document_LS.R |-- sort_qa_Landast_data.R |-- e_calculate_handoffs.R |-- e_calculate_handoffs |-- src |-- calc_quantiles.R |-- calculate_gardner_handoff.R |-- calculate_roy_handoff.R |-- get_matches.R |-- get_quantile_values.R |-- y_siteSR_targets.R |-- z_render_bookdown.R |-- python |-- pySetup.R |-- src |-- export_single_file.R |-- export_single_target.R |-- retrieve_data.R |-- retrieve_target.R |-- bookdown |-- index.Rmd |-- 01-Background.Rmd |-- 02-Data_Acquisition_Locations.Rmd |-- 03-Acquisition_Software_Settings.Rmd |-- 04-Landsat_C2_SRST.Rmd |-- 05-lakeSR_LS_C2_SRST.Rmd |-- 06-post_hoc_qa.Rmd |-- 07-intermission_handoffs.Rmd |-- 08-AquaMatch_RemoteSensing_Limitations.Rmd |-- z-Refs.Rmd |-- refs.bib |-- _bookdown.yml |-- _output.yml 2.1.1 lakeSR Output Files This workflow creates a number of files (where xDATEx is a placeholder for the version date identifier): locations file (a_poi_with_flags_xDATEx.csv) containing all sites within the lakeSR dataset, defined by the National Hydrography Dataset. This file also contains column that link the location (Latitude/Longitude) to NHD waterbody features, and flags meant to aid in data interpretation. See Section 3.1 for more information about this file. remote sensing data file(s) for sites (e.g. lakeSR_Landast8_DSWE1_xDATEx.feather, lakeSR_HUC2_18_collated_sites_Landsat7_DSWE1_xDATEx.csv) which contain the lakeSR identifier (can be matched with the locations file), numerical summaries of remote sensing data for each site and satellite image, as well as columns containing summarized information about pixels that have been masked in the Google Earth Engine QAQC and filtering process. See sections 5, 6, and 7 for additional details. remote sensing scene-level metadata file(s) (e.g. lakeSR_collated_metadata_LS89_xDATEx_export.csv, lakeSR_collated_metadata_LS457_xDATEx_export.csv) which contain a subset of columns of the scene-level metadata for each Landsat image within the lakeSR remote sensing data file. This can be joined to the remote sensing data using the sat_id column. While we reduce the number of columns from the upstream data during the remote sensing data file collation, we do not process the metadata information further nor have suggested uses but rather encourage users to use this metadata file for further data interpretation. intermission handoff file(s) (e.g. collated_handoffs_xDATEx.csv) which contains coefficients for aligning data across multiple Landsat missions for timeseries analysis. See Section 8 for details. 2.1.2 Configuration Files config.yml: lakeSR relies on this general configuration file to run specific profiles that determine what operations are being run. The file contains two configuration profiles: “default” and “admin_update”. “default” uses publicly-posted stable versions of datasets from AquaMatch_harmonize_WQP and is intended for those who wish to modify choices made after Landsat stacks are acquired (e.g. baseline quality assurance filters {targets} group -d- and calculation of handoff coefficients group -e-). By default, the bookdown is not rendered in this option, as changes to the pipeline may require non-automated changes to the text of the bookdown. “admin_update” is intended for use by ROSSyndicate members when updating lakeSR datasets and by by default creates publicly-stable versions of the lakeSR dataset in Google Drive, and the Drive file ids are stored in the AquaMatch_lakeSR repository for external users. This configuration could also be used by others to re-run the pipeline and wish to make changes to the site location calculations ({targets} group -a-) or GEE implementation ({targets} group -b-) and collation ({targets} group -c-). By default, the bookdown is rendered in this option, but keep in mind not all changes implemented are not automatically reflected in the bookdown. Advanced users are welcome to adapt the pipeline to incorporate other masks or filters or to incorporate other quality assurance filters or handoff methods. b_pull_Landsat_SRST_poi/config_poi.yml: This configuration file defines parameters of the GEE pull. This configuration can be customized. To create a different configuration of the GEE pull, fill out the yaml file at the file path b_pull_Landast_SRST_poi/config_poi.yml. If you change the name of this file, you will need to update the file name at line 32 of the _targets.R file. 2.1.3 {targets} groups a_Calculate_Centers: For all lakes, we aggregate remotely-sensed data via a central location with a buffer instead of the entire lake area to reduce processing time and the downstream impacts of lakes whose surface crosses WRS2 path-row boundaries. This {targets} list calculates “Pole of Inaccessibility” (POI) (e.g. Stefansson 1920) for all non-intermittent lakes, ponds, and reservoirs greater than 1 hectare in surface area and intermittent lakes, ponds, and reservoirs greater than 4 hectares using the NHDPlusV2 polygons using the {nhdplusTools} package (Blodgett and Johnson 2023), NHD Best Resolution files for non-CONUS waterbodies, and the poi() function in the {polylabelr} package (Larsson 2024). See Section 3 for additional background and detailed methodology. This group is either run completely or pulled from existing files based on lakeSR general configuration file using the boolean calculate_centers setting. If set to FALSE a version date must be provided in the centers_version setting. Additional guidance is provided in the README and general configuration file of the lakeSR repository. b_pull_Landsat_SRST_poi: This {targets} group uses the configuration file b_pull_Landsat_SRST_poi/config_files/config_poi.yml and the “Pole of Inaccessibility” points created in the a_Calculate_Centers group to pull Landsat Collection 2 Surface Reflectance and Surface Temperature using the Google Earth Engine (GEE) API. In this group, we use the most conservative LS4-7 pixel filters, as we are applying these settings across such a large continuum of time and space. This group ends with a branched target that sends tasks to Google Earth engine by mapping over WRS2 path rows that intersect with the points created in the a_Calculate_Centers group. Note: this group of targets takes a very long time, running 2 minutes - 1 hour per path-row branch in b_eeRun_poi. There are just under 800 path rows executed in this target. Anecdotally speaking, processing time is often defined by the number of queued tasks globally, so weekends and nights are often periods of quicker processing than weekday during business hours. As written for data publication, run time is 7-10 days. See Section 4 for details on software used in this workflow, Section 5 for additional background on Landsat data, and Section 6 for detailed methodology of the Landsat pull. This group is either run completely or pulled from existing files based on lakeSR general configuration file using the boolean run_GEE setting. If set to FALSE a version date must be provided in the collated_version setting. Additional guidance is provided in the README and general configuration file of the lakeSR repository. c_collate_Landsat_data: This {targets} list collates the data from the Google Earth Engine run orchestrated in the {targets} group b_pull_Landsat_SRST_poi and creates publicly-available files for downstream use, storing a dataframe of Drive ids in a .csv in the c_collate_Landsat_data/out/ folder. This group is either run completely or pulled from existing files based on lakeSR general configuration file using the boolean run_GEE setting. If set to FALSE a version date must be provided in the collated_version setting. Additional guidance is provided in the README and general configuration file of the lakeSR repository. d_qa_filter_sort: This {targets} list applies some rudimentary QA to the Landsat stacks and saves them as sorted files locally. LS 4/9 are complete .csv files, LS 578 are broken up by HUC2 for memory and space considerations. If update_and_share is set to TRUE, the workflow will send dated, publicly available files to Google Drive and save Drive file information in the d_qa_filter_sort/out/ folder. If set to FALSE, no files will be sent to Drive. See Section 7 for detailed methodology of this portion of the workflow. e_caclculate_handoffs: This {targets} group creates “matched” data for two different “intermission handoff” methods that standardize the SR values relative to LS7 and to LS8. Handoffs are visualized and are saved as tables for use downstream in this group. Corrections are calculated for all neighboring missions, even if not explicitly used downstream (e.g. LS 4/5 and LS 8/9). See Section 8 for detailed methodology of this portion of the workflow. y_siteSR_targets: This {targets} group pulls information from the siteSR workflow to use in the bookdown. If the configuration setting update_bookown is set to FALSE, this list will be empty. z_render_bookdown: This {targets} group tracks chapters of the bookdown for changes and renders the bookdown. If the configuration setting update_bookown is set to FALSE, this list will be empty. 2.2 siteSR Code Architecture siteSR code retrieves WQP sites using dataRetrieval::whatWQPsites(), NWIS sites using dataRetrieval::whatNWISsites(), and any remaining WQP sites at which there are historical in situ data from the AquaMatch harmonization pipeline. lakeSR provides calculated Landsat intermission handoff coefficients for interoperability between sensors (see Section 8). The siteSR folder structure is as follows: |-- AquaMatch_siteSR |-- README.md |-- run_targets.Rmd |-- _targets.R |-- config.yml |-- gee_config.yml |-- a_compile_sites.R |-- a_compile_sites |-- src |-- add_HUC8_to_sites.R |-- add_NHD_flowline_to_sites.R |-- add_NHD_waterbody_to_sites.R |-- harmonize_crs.R |-- b_determine_RS_visibility.R |-- b_determine_RS_visibility |-- py |-- run_pekel_per_pathrow.py |-- wait_for_completion.py |-- in |-- WRS2_descending.shp |-- src |-- check_for_containment.R |-- download_csvs_from_drive.R |-- format_yml.R |-- get_WRS_pathrows.R |-- grab_locs.R |-- run_pekel_per_pathrow.R |-- c_siteSR_stack.R |-- c_siteSR_stack |-- py |-- check_for_failed_tasks.py |-- run_siteSR_per_pathrow.py |-- siteSR_wait_for_completion.py |-- src |-- check_if_fully_within_pr.R |-- collate_csvs_from_drive.R |-- download_csvs_from_drive.R |-- run_stieSR_per_pathrow.R |-- d_qa_stack.R |-- d_qa_stack |-- src |-- prep_Landsat_for_export.R |-- qa_and_document_LS.R |-- src |-- export_single_file.R |-- export_single_target.R |-- get_file_ids.R |-- retrieve_data.R |-- retrieve_target.R |-- python |-- pySetup.R 2.2.1 siteSR Output Files This workflow creates a number of files (where xDATEx is a placeholder for the version date identifier): locations file (collated_WQP_NWIS_sites_with_NHD_info_xDATEx.csv) containing all sites from the WQP and NWIS at the time of running the pipeline, as well as any additional sites from the AquaMatch pipeline (for Secchi disc depth, chlorophyll a, dissolved organic carbon, and total suspended solids) that were not present in the WQP site pull. This file also contains column attributing a HUC8, NHD features (waterbodies and/or flowlines), and flags meant to aid in data interpretation. See Section 3.2 for more information about this file. remote sensing data file(s) for sites (e.g. siteSR_collated_sites_DSWE1_xDATEx.feather, siteSR_collated_sites_LT04_DSWE1_xDATEx_export.csv) which contain the siteSR identifier (can be matched with the locations file), numerical summaries of remote sensing data for each site and satellite image, as well as columns containing summarized information about pixels that have been masked in the Google Earth Engine QAQC and filtering process. See sections 5, 6, and 7 for additional details. remote sensing scene-level metadata file(s) (e.g. siteSR_collated_metadata_LS89_xDATEx_export.csv, siteSR_collated_metadata_LS457_xDATEx_export.csv) which contain a subset of columns of the scene-level metadata for each Landsat image within the siteSR remote sensing data file. This can be joined to the remote sensing data using the sat_id column. While we reduce the number of columns from the upstream data during the remote sensing data file collation, we do not process the metadata information further nor have suggested uses but rather encourage users to use this metadata file for further data interpretation. 2.2.2 Configuration Files config.yml: siteSR_WQP relies on this configuration file to run specific profiles that determine what operations are being run. The file provides two configuration profiles: “default” and “admin_update”. “default” runs the pipeline using archived versions of datasets made with specific {targets} groups within this workflow. In this setting, {targets} groups -a- (collating locations from WQP, NWIS, and AquaMatch harmonization pipeline), -b- (determining remote sensing visibility), and -c- (pulling the Landsat record from GEE) are not run, but rather archived files are pulled in to reduce run time. “admin_update” is intended for use by ROSSyndicate members when updating siteSR datasets and by default creates publicly-stable versions of the siteSR dataset in Google Drive, and the Drive file ids are stored in the AquaMatch_siteSR repository for external users. This configuration could also be used by others to re-run the pipeline and wish to make changes to the site location collation ({targets} group -a-), remote sensing visibility thresholds ({targets} group -b-) or GEE implementation ({targets} group -c-). Proper configuration of harmonize_repo_directory is imperative as the siteSR workflow references files inside AquaMatch_harmonize_WQP file structure. If this is incorrectly set up, users will receive a message to communicate this. All repositories stored on the AquaMatch GitHub will contain files that link to versions of the data that the AquaMatch team has harmonized so that a local run is not necessitated. gee_config.yml: This configuration file defines parameters of the GEE pull. This configuration can be customized. To create a different configuration of the GEE pull, fill out the yaml file at the file path gee_config.yml. If you change the name of this file, you will need to update the file name at line 9 of the b_determine_RS_visibility.R script. 2.2.3 {targets} Groups _targets.R: This initial group of targets checks the configuration settings in config.yml, checks for the harmonization pipeline and for proper Google Drive folder architecture. This group also acquires target objects from the harmonization pipeline. a_compile_sites: This {targets} group collates the sites from the WQP, NWIS, and the AquaMatch harmonization pipeline, creating a list of locations to acquire remote sensing data. All locations are associated with a HUC8 if one is not listed in the metadata for the site from the WQP, then the unique HUC4s are used to associate points with waterbodies and flowlines of the NHDPlusV2 (CONUS) or NHD Best Resolution (non-CONUS HUCs) files where HUC8. b_determine_RS_visibility: The resulting list of in situ locations are used to assess remote-sensing visibility in this {targets} group. Sites are assessed for visibility using the JRC Global Surface Water (Pekel et al. 2016) which is based on the historical Landsat record. This {targets} group takes a number of hours to run, if the configuration of run_pekel is set to TRUE. If the configuration is set to FALSE, run time will be dependent on your internet connection (to access the previously-created files) and the number of cores available to run the workflow. c_siteSR_stack: This group of {targets} acquires Landsat Collection 2 SRST stacks for sites determined to be visible in the previous {targets} group. Data are collated in this step. This {targets} group takes about three days to run, if the configuration run_GEE is set to TRUE. If the configuration is set to FALSE, run time will be dependent on your internet connection (to access the previously-created files) and the number of cores available to run the workflow. d_siteSR_qa: Collated Landsat data are filtered for quality based on broadly applicable thresholds and exported from the pipeline for data archiving. The resulting data are archived in Google Drive and the Drive file ids area stored in this repository for external access. "],["locs-data-acq.html", "3 Locations of Data Acquisition 3.1 Waterbodies Included in lakeSR 3.2 siteSR Acquisition Locations", " 3 Locations of Data Acquisition As noted in the Introduction (Section 1), for the purposes of AquaMatch, surface reflectance and surface temperature data are acquired at specific, centrally-located points within waterbodies (typically in deep locations of lakes, lakeSR) and at locations where there are in situ data (siteSR). For the purposes of lakeSR, we consider “deep” locations to be relative to a waterbody and defined by the NHD waterbody feature, where a deep location is far from the shoreline indicated by the NHD (see Section 3.1). The data acquired at locations where there are in situ data are meant to create location-specific algorithms using the AquaMatch database, which can then be applied to the data collected over the centrally-located point across all waterbodies in the lakeSR database. lakeSR does not acquire nor summarize data over the entire waterbody’s surface, as it is computationally impractical for most large lakes, especially those that cross multiple satellite path-rows or tiles. For the lakeSR product, we summarize the Landsat data within a 120 meter radius of a defined location. For siteSR, we use a 200 meter buffer. AquaMatch products summarize data within a buffered area of unique locations primarily to reduce computation time versus aggregating the entire lake area and to reduce issues with lakes that lie within more than one WRS2 path-row which would require additional data handling steps at both the remote sensing and post-hoc filter steps to provide consistent data summaries. This may mean that each waterbody has differing proportions of the area represented in the data summaries. Users may wish to consider total surface area of waterbodies (provided in the output file a_poi_with_flags_xDATEx.csv via the column areasqkm) when analyzing the remote sensing data. 3.1 Waterbodies Included in lakeSR For lakeSR, we use the NHDPlusV2 dataset for lakes within the conterminous US and US Territories using the {nhdplusTools} R package (Blodgett and Johnson 2023) and the NHD Best Resolution (e.g. US Geological Survey 2023b) data through The National Map. Two versions are used because NHDPlusV2 waterbodies are not available outside of CONUS. The NHD Best Resolution data are of slightly higher resolution relative to NHDPlusV2 and are complete and available for all states and territories outside CONUS. All waterbody polygons were downloaded and processed on 2025-02-12 by HUC4 using the most updated version available at the time of download. Figure 3.1: NHD HUC4 map for the United States and Territories, courtesy of the USGS. For every HUC4 in the United States and Territories (Figure 3.1), all waterbodies are limited to those with NHD Waterbody Subtypes belonging to the following groups: 390 (lake/pond) and 436 (reservoir) and are at least 0.01 km2 (1 hectare) in area according to the area value provided in the NHD file. If the feature type (FType) of the waterbody belonged to an intermittent category (39001, 39005, 39006, 43614) the threshold for inclusion was increased to 0.04 km2 (4 hectares) to reduce processing time when extracting data from Google Earth Engine assuming that intermittent waterbodies smaller than 4 hectares would not normally be “visible” in remote sensing (see Section 3.2.1). This filtering resulted in 729,941 waterbodies included in our dataset, including 313,248 non-CONUS waterbodies. This is a 1,185 percent increase over the 56,792 lakes included in the original AquaSat product. For each waterbody, the Pole of Inaccessibility (see Section 3.1.2) and distance-to-shore radius was calculated using the polylabelr::poi() function. 3.1.1 Updates in AquaMatch Some changes in lake polygon and center point have been made in modernizing and scaling from LimnoSat-US. The lake center aspect called “deepest point” of LimnoSat-US was built upon HydroLakes (Messager et al. 2016), a global database of lakes greater than 10 hectares accounting for 1.4 million waterbodies and a total surface area of 2.67 million km² worldwide. While this dataset of lakes represents ~55% of the worldwide surface area of lakes greater than 1 hectare, it is only a sliver of the estimated 27 million waterbodies in the world (Verpoorter et al. 2014). AquaMatch uses the USGS’s National Hydrography products which map the surface waters of the United States, and allows for reduction in minimum size of waterbody and an increase in coverage of freshwater systems across the United States and permanently inhabited territories. 3.1.2 Pole of Inaccessibility The USGS National Hydrography products contain smaller and higher resolution polygons than the HydroLakes shapes, which makes it computationally impossible to use the Chebyshev Center (“deepest point,” Yang 2020) calculation used in LimnoSat-US due to the number of vertices in each polygon. To replace this important step in the update, we employ the concept of “pole of inaccessibility” (POI, Stefansson 1920). The concept of POI is used to define the geographic center of a circle with the largest circumference within any complex polygon. The foundational principle is used widely to describe the arctic pole of inaccessibility, that is the point in the northern arctic circle that is the furthest from land, but has also been used to describe the geographic center of landmasses (Garcia-Castellanos and Lombardo 2007). For lakeSR, we use POI to determine the point in a waterbody that is furthest from the shoreline using the polylabelr::poi() function (Larsson 2024), which calculates a point in space and the radius of the circle used to define the POI. The poi() function can sometimes attribute a POI to a location other than the point furthest away from a shoreline. This appears to occur in polygons with a very large number of indices (due to sheer area or geomorphological complexity); however the points calculated should be an acceptable proxy for deep lake conditions. No action was taken to correct these or enumerate them within our dataset given the assumption that the point is still far from shore (though not always the “farthest”) and there is no obvious programmatic way to identify these points. 3.1.3 Technical Implementation of lakeSR The code for gathering NHD waterbodies and calculating their respective POIs is found in {targets} group a_Calculate_Centers which is located in the script a_Calculate_Centers.R at the root directory of the repository. The processing begins by acquiring the polygons of all US states and territories using the {tigris} package (Walker 2025). These polygons are used to acquire a list HUC4s that intersect with each municipal boundary using the nhdplusTools::get_huc() function, which are then reduced to distinct HUC4’s and transformed into a vector of HUC4s. HUC4s are then split into CONUS (HUC4 &lt; 1900) and non-CONUS (HUC4 ≥ 1900) groups. To efficiently calculate the POI across hundreds of HUC4s, we use the {targets} dynamic branching feature to iterate over each HUC4. For each HUC4, the NHDPlusV2 (CONUS) or NHD Best Resolution (non CONUS) waterbodies are acquired and filtered for lake/ponds and reservoirs of at least 1 hectare in area or 4 hectares for intermittent lake/ponds or reservoirs. In order to accurately calculate distance-to-shore when using the polylabelr::poi() function as described in Section 3.1, each waterbody was converted to the proper Universal Transverse Mercator (UTM) projection calculated from the mean longitudinal value of the polygon vertices prior to applying the poi() function. By using the point-local UTM projection, we decrease distortion expected from any single CRS used to represent all of the locations from which we have lakes. The latitude and longitude values of the POI were transformed to decimal degrees in World Geodetic System 1984 (WGS84, EPSG:4326) from UTM easting and northing coordinates for use later in the workflow. AquaMatch assumes static water elevation and inundation area based on the associated NHD features. Given this, users should consider whether elevational changes in surface water height (and therefore inundation area) may impact their analyses. To increase computational efficiency, we allow for multicore processing and the use of targets::crew_controller_local() function within this workflow. This reduces processing time substantially as processing thousands of polygons is quite time consuming. If you are running this workflow on your own computer, the length of time that it takes to calculate POIs will be dependent on the number of cores you allow for processing (we used 11 cores during the development of this workflow and it takes on the order of tens of minutes). 3.1.4 Flagging shoreline proximity Within the context of lakeSR, we do not identify whether there are multiple waterbodies/visible water sources within the site buffer used for lakeSR or siteSR extraction. We do offer two flags to help users assess possibilities of shoreline contamination through a simple calculation. This calculation is based on the distance to shore calculated in the POI step, which does not account for differing shoreline locations due to water surface level change. A flagged pixel for shoreline proximity also does not imply that the data are contaminated, rather is intended as a diagnostic tool to identify sites that may be more likely to have some sort of shoreline contamination. To determine the possibility of shoreline contamination, we add the site buffer used for GEE extraction (defined in the lakeSR GEE configuration file) to the pixel size of the sensor used for reflectance detection (see Section 5.2.2 for details). For optical bands (Red, Green, Blue, Nir, Swir) we use the site buffer plus 30 meters. For thermal bands, we create 3 flag columns for each sensor’s (Landsat 4/5: TM, Landsat 7: ETM, Landsat 8/9: TIRS) native thermal resolution (120, 60, 100 meters). These flags are binary: 0: unlikely shoreline contamination (distance to shore is greater than the sum of the site buffer and pixel size) 1: possible shoreline contamination (distance to shore is less than or equal to sum of the site buffer and pixel size) 3.1.5 Case Study: Wisconsin Waterbodies The state of Wisconsin contains more than 15,000 freshwater lakes. LimnoSat-US contained just 2,694 waterbodies within Wisconsin, whereas AquaMatch via the lakeSR product includes 10,574 (Figure 3.2) - accounting for a majority of the state’s freshwater water bodies. Figure 3.2: Deepest point of Wisconsin lakes included in LimnoSat-US defined by the Hydrolakes data product (left) and those included in AquaMatch via lakeSR defined by the NHDPlusV2 data product (right). Deepest point for each lake is indicated with a black dot, spatial histogram of density by longitude and latitude presented below the maps. 3.2 siteSR Acquisition Locations The acquisition locations within siteSR are defined using the {dataRetrieval} package functions whatWQPsites() and whatNWISsites(). All sites were filtered for those that represent surface water. These sites were supplemented by those for which we have harmonized parameter data from the AquaMatch parameter harmonization pipeline but that did not appear in the whatWQPsites() query, due to the dynamic nature of the WQP. The siteSR pipeline collates these sites, then reduces that collation to only distinct sites defined by organization identifier, monitoring location identifier, WGS84 latitude and WGS84 longitude. Across the WQP, NWIS, and the harmonization pipeline, there are currently 1,208,711 distinct sites in the United States and Territories for which we create “stacks” of remote sensing data. A “stack” refers to all the remote sensing data available during a time period of interest at a single site. Every site in the WQP has a MonitoringLocationTypeName associated with it. For the purposes of siteSR, we do not subset the sites by these types, but they are helpful for understanding the type of data included in siteSR. Figure 3.3: Water Quality Portal data location types present in siteSR. Unique WQP monitoring location count above bar, divided by MonitoringLocationTypeName. Similarly, every site in the NWIS database has a type_cd associated with it. For siteSR, we will acquire Landsat stacks for all sites deemed “visible” by remote sensing (see Section 3.2.1 for further information). Note that this is different from lakeSR, where we only acquire data for lakes, reservoirs and pond according to the NHD. This was a functional choice, as most canal sites will not be RS-visible and estuary extents are limited in the NHD (and when present the technique to determine the POI may not be appropriate). 3.2.1 Assessing for remote sensing visibility We use the JRC Global Surface Water Mapping Layers v1.4 (Pekel et al. 2016) to determine whether or not sites are visible by remote sensing (“RS-visible”) and should therefore be sent through the GEE data acquisition process detailed in Section 6. This dataset is a compilation of 38 years of the Landsat record and enumerates the proportion of time a single 30x30 meter pixel has the presence of water. As long as a WQP monitoring location has at least one pixel with water at least 80% of the time during that 38 year period within a 200 meter radius, we include it in the list of sites we acquire Landsat stacks for. Like with assessing possible shoreline contamination, we do not analyze whether the presence of water within the AquaMatch buffer is associated with a singular waterbody or flowline feature from the NHD. See Section 3.2.2 for details on attribution of a site to NHD feature and the associated assumptions. After this assessment, 395,307 sites were deemed to be visible by remote sensing (67.3% loss of sites). Figure 3.4: Water Quality Portal data location types present in siteSR after filtering for those that are deemed visible by remote sensing. Count of sites provided above bar, arranged by MonitoringLocationTypeName. 3.2.2 Assignment of NHD flowline and waterbodies For each WQP monitoring location, we attempt to assign HUC8’s wherever they are missing from the HUCEightDigitCode column output from the WQP (n = 228723). To do this we use the get_huc() function from {nhdplusTools} (Blodgett and Johnson 2023) package in R. After HUC8 assignment is finished only 25628 sites remained without a HUC8 assignment. All of these sites were coastal sites outside of the extent of NHD boundaries. These sites remain in siteSR, but will have no NHD attribution information. In siteSR, the flag_HUC8 column indicates whether this HUC8 was assigned within the WQP (value of 0), assigned in this process (value of 1), or was unable to be assigned (value of 2). Using the HUC8 information to iterate, we then can use {nhdplusTools} to assign waterbodies and flowlines to sites within the CONUS and data from The National Map best resolution files (e.g. US Geological Survey 2023b) for sites outside of CONUS by HUC4. For all sites with a MonitoringLocationTypeName that contains the words “lake” or “reservoir”, we assign NHD ids to each point for the waterbody it is contained by or the waterbody it is closest to. NHD waterbody file has been filtered to only contain Lake, Ponds, Reservoirs, and Estuaries (NHD feature types 390, 436, 493) when performing this task. We flag (flag_wb) the results of this assignment as follows: 0: point inside NHD waterbody polygon 1: point within GEE buffer distance (default 200 meters for siteSR) of the NHD waterbody 2: point between GEE buffer distance and 500 meters of the NHD waterbody polygon 3: point unable to be assigned to waterbody (it is &gt; 500 meters away from the NHD waterbody polygon) 4: point does not have HUC8 assignment or MonitoringLocationTypeName does not contain “lake”, “reservoir”, or “estuary”. No waterbody is assigned. For all points with a flag value of 0 or 1 we provide the NHD identifier for the polygon the monitoring location is associated with (comid for NHDPlusV2 and permanent identifier for NHD Best Resolution), for all points with a flag value of 1 or 2, we provide the distance (in meters) to the nearest NHD waterbody of feature type 390, 436, or 493. For waterbodies with a flag of 0, we provide distance to shore. We follow lakeSR’s implementation of flags for shoreline proximity for these sites as well, but with the siteSR default site buffer of 200 meters instead of lakeSR’s buffer of 120 meters. Flowlines are assigned to sites with a MonitoringLocationTypeName that contains “lake”, “reservoir”, “stream”, or “river”. NHD flowlines are filtered to contain streams/rivers and artificial paths (that is flowlines in waterbodies) (NHD feature types 460 and 558). We flag (flag_fl) the results of this assignment as follows: 0: point &lt;= 100 meters from nearest flowline 1: point between 100 meters and GEE buffer distance (default 200 meters for siteSR) to nearest flowline 2: point between GEE buffer distance and 500 meters from nearest flowline 3: point unable to be assigned to flowline for a stream site because distance to nearest stream &gt; 500 meters 4: point is a lake or reservoir site and is &gt; 500 meters away from nearest flowline 5: point does not have HUC8 assignment or MonitoringLocationTypeName does not contain “stream”, “river”, “lake”, or “reservoir”. No flowline assigned. For all points with a flag 0/1/2 we provide the NHD identifier for the flowline the monitoring location is associated with (comid for NHDPlusV2 and permanent identifier for NHD Best Resolution), for all points with a flag value of 1-3, we provide the distance (in meters) to the nearest NHD flowline of feature type 460 or 558. For all sites, we calculate how many waterbodies or flowlines are within the buffer distance set in the siteSR GEE configuration file. Any site that has more than one waterbody and/or flow line within the buffer distance may be including reflectance data from another surface water source. Within the context of siteSR, we do not investigate what, if any, impacts multiple waterbodies, flowlines, or combinations thereof have on the validity of the reflectance data or thermal data summary. Site information, NHD attribution, and associated flags described here are stored in the file collated_WQP_NWIS_sites_with_NHD_info.csv. We provide these identifiers and additional metadata about the sites to help users make informed decisions about remote sensing data quality (specifically, related to edge/shoreline contamination) and NHD comid/permanent id attribution to individual sites and any available flags to assess uncertainty to those assignments or the buffered area relative to the site. 3.2.3 siteSR updates in AquaMatch In our updated workflow, we acquire and provide the historical Landsat stacks for all sites collated from the harmonization pipeline, regardless of whether they are associated with a specific in situ observation. In the previous iteration, we only provided a matchup dataset for in situ data. Assigning flowlines and waterbodies to all siteSR sites is also a feature introduced in AquaMatch. "],["software-settings.html", "4 Satellite Data Acquisition Software and Settings 4.1 R Environment and Package Information 4.2 {reticulate} Conda Environment 4.3 Google Earth Engine Setup", " 4 Satellite Data Acquisition Software and Settings Currently, all satellite data in AquaMatch are obtained using the Python API for Google Earth Engine Gorelick (2023). While the orchestration of data acquisition is performed by the {targets} workflow, all code directly related to GEE data acquisition is written in Python. If you are running the ‘default’ configuration for lakeSR or siteSR the following directions are not applicable. 4.1 R Environment and Package Information We recommend using the most recent release of R, R Studio, {targets} and all R packages used within the workflow. The most recent run of lakeSR and siteSR was completed using R version 4.5.0 (R Core Team 2025) in R Studio 2025.05.0 (Posit team 2023) . The table below lists the packages used across the lakeSR and siteSR workflow, versions used, and the associated citation. R Package version citation arrow 20.0.0.2 Richardson et al. (2025) bookdown 0.43 Xie (2016); Xie (2025) config 0.3.2 Allaire (2023) cowplot 1.1.3 Wilke (2024) crew 1.1.2 Landau (2025) data.table 1.17.4 Barrett et al. (2025) deming 1.4-1 Therneau (2024) ggrepel 0.9.6 Slowikowski (2024) ggthemes 5.1.0 Arnold (2024) googledrive 2.1.1 McGowan and Bryan (2023) kableExtra 1.4.0 Zhu (2024) nhdplusTools 0.6.2 Blodgett and Johnson (2023) polylabelr 0.3.0 Larsson (2024) reticulate 1.42.0 Ushey, Allaire, and Tang (2025) rmapshaper 0.5.0 Teucher and Russell (2023) sf 1.0-21 Pebesma (2018); Pebesma and Bivand (2023) tarchetypes 0.13.1 Landau (2021a) targets 1.11.3 Landau (2021b) tidyverse 2.0.0 Wickham et al. (2019) tigris 2.2.1 Walker (2025) USA.state.boundaries 1.0.1 Embry (2022) viridis 0.6.5 Garnier et al. (2024) xml2 1.3.8 Wickham, Hester, and Ooms (2025) yaml 2.3.10 Garbett et al. (2024) 4.2 {reticulate} Conda Environment RStudio (Posit team 2023) is an IDE that, alongside the {reticulate} package (Ushey, Allaire, and Tang 2025), facilitates integration of R and Python code within the same environment. In AquaMatch, we use a single R script to set up a {reticulate} Conda environment that is invoked at the beginning of a {targets} run to be sure that our Python code runs consistently. Python and python module Software/Python Module version citation Python 3.10.13 Python Software Foundation, www.python.org earthengine-api 1.4.0 Gorelick (2023) pandas 2.0.3 The pandas development team (2023) pyreadr 0.5.2 Fajardo (2023) PyYAML 6.0.2 The PyYAML Project, https://github.com/yaml/pyyaml numpy 1.24.4 Harris et al. (2020) The script run_targets.Rmd includes the steps to create this environment and authenticate your GEE user. These steps should be run prior to running the pipeline to assure a smooth run of the workflow. 4.3 Google Earth Engine Setup If running the ‘admin_update’ configuration for either lakeSR or siteSR, you will need to have a GEE account, the gcloud CLI installed and configured, create an Earth Engine Project, have successful authenticated your account, and you will need to alter the configuration file. All of these tasks are described in the section below. 4.3.1 Create a GEE account Creation of a GEE account is free. Click ‘Get Started’ at the far right side of the earthengine.google.com webpage to create an account: 4.3.2 gcloud CLI This workflow requires the installation and initiation of gcloud CLI, a command-line tool set for accessing Google Cloud Resources. All settings for AquaSat v2 are default gcloud configurations using a single GEE project. The link above documents how to set up gcloud. 4.3.3 GEE project setting AquaMatch is run in a specific GEE project associated with our authenticated Google account. If you wish to re-run this code as written, you will not have proper access because the code refers to our specific GEE project. You will need to update the config yaml (in lakeSR: b_pull_Landsat_SRST_poi/config_files/config_poi.yml, in siteSR: gee_config.yml) with your Google credentials and GEE project in order to run the pipeline locally. If you are new to GEE, go to code.earthengine.google.com and enter the project name listed in the top right hand corner of your screen: Header of code.earthengine.google.com with current Earth Engine project highlighted in the red box to the right. Alternatively, you can create a GEE project for this task in the dropdown menu accessed by clicking on the icon to the right of the highlighted box in the figure above. This workflow will not run without specifying an Earth Engine Project that is managed by the Google Account you authenticate this run with. 4.3.4 GEE Authentication Once gcloud is installed and initialized, the configuration file is properly set up, and the Conda environment is set up, you can authenticate your GEE instance. For this workflow, this is completed in the run_targets.Rmd script at the root directory. This script provides explicit directions to complete this task before running the pipeline. "],["LS-C2-SRST.html", "5 Landsat Collection 2 SRST 5.1 Initialisms and Landsat Jargon 5.2 Background Information 5.3 Surface Reflectance Product 5.4 Surface Temperature", " 5 Landsat Collection 2 SRST 5.1 Initialisms and Landsat Jargon SR: surface reflectance product ST: surface temperature product Collection 2 (C2): The second version of the Landsat record - the transition to C2 began in 2020. There were extensive changes to the data storage and metadata when moving from Collection 1 to C2. An overview of the differences is available as a PDF download here from the USGS. AquaSat v1 and LimnoSat-US were based on Collection 1 data, which are no longer available from the USGS and have been superseded by Collection 2 data. Data Tier: a data tier for Landsat refers to data quality and processing. lakeSR uses Tier 1 data exclusively which conform to the highest level of data quality as defined by the geometric and radiometric quality, which indicates how much uncertainty is present in the pixel/scene location. To learn more about Landsat tiers, see this video from the USGS. Data Processing Level (Level): a data processing level for Landsat refers to how much the data have been processed. Level 1 (top of atmosphere) is less processed than Level 2 (surface reflectance). lakeSR uses Level 2 data exclusively, as it has gone through standard atmospheric correction processes (see Section 5.3.1) that attempts to standardize data handling throughout the Landsat record - it is derived from Level 1 data. NASA has compiled a list of general data processing levels and descriptions here. Landsat stack: this is the collated Landsat historical dataset at a specific location. Matchup: a pair of observations, one from an in situ source, one from a remote sensing source. Matchups are often defined by a time window relative to the time of the in situ measurement, both before and after, as well as a spatial extent. In situ spatial extent is considered discrete, and the remote sensing extent is an aggregated value from a buffered area around that discrete in situ location. 5.2 Background Information The information presented in this section originates from the NASA Landsat Science website and has been summarized here for the purpose of providing background information about the Landsat archive relevant to the creation and use of lakeSR. The Landsat archive of multispectral and thermal data in lakeSR is composed of Landsat missions 4 through 9 and spans more than 40 years. Mission and Sensor Launch Date End of Science Mission Decommission Date Date Range Included in AquaMatch Landsat 4 TM (Observation and Center 2020) 1982-07-16 1993-12-14 2001-06-15 Launch Date through End of Science Mission Landsat 5 TM (Observation and Center 2020) 1984-03-01 2011-11-18 2013-06-05 Launch Date through End of Science Mission Landsat 7 ETM+ (Earth Resources Observation and Science (EROS) Center 1999) 1999-04-15 2022-04-06 2025-06-04 1999-05-28 through 2019-12-31 Landsat 8 OLI/TIRS (Earth Resources Observation and Science (EROS) Center 2013) 2013-02-11 N/A N/A Launch Date through 2024-12-31 Landsat 9 OLI-2/TIRS-2 (Earth Resources Observation and Science (EROS) Center 2013) 2021-09-27 N/A N/A Launch Date through 2024-12-31 The image record for Landsat 4 is not consistent nor robust due to a data transmitter failure early in service, however our pipeline acquires data as available. Landsat 6 did not achieve orbit. For the purposes of AquaMatch, we truncate the data record for Landsat 4 and 5 at the end of the Science Mission of the satellite. No corrections were made for the Landsat 7 scanline error that began on May 31, 2003, data were collected as available despite the scanline error since the data are still of acceptable quality per the USGS. Additionally, Landsat 7 began to experience orbital drift beginning in 2017, resulting in top-of-atmosphere (and therefore also surface reflectance) values that had growing uncertainties over time as the drift increased (Qiu et al. 2021). Qui (2021) suggests that data are not robust enough for trend analysis after the start of the growing season in 2020, but because their analysis was of NDVI, we conservatively truncate the data at the end of 2019. 5.2.1 Band Value Ranges While the nominal bands for each of the missions within the archive are relatively consistent (with the addition of an Aerosol band beginning Landsat 8 OLI/TIRS), the precise band range captured by the Landsat instruments for each nominal band shifted beginning with Landsat 8 OLI/TIRS. The image below visualizes how band ranges have shifted throughout the Landsat archive. Image credit: L. Rocchio and J. Barsi; NASA. (https://landsat.gsfc.nasa.gov/article/the-intervening-atmosphere-tracing-the-provenance-of-a-favorite-landsat-infographic/). Satellite missions here are signified by their sensor name: TM = Landsat 4/5, ETM+ = Landsat 7, OLI/TIRS = Landsat 8, and OLI-2/TIRS-2 = Landsat 9. As depicted in the above figure, band designations have changed over time. The AquaMatch workflow automatically renames the band designation from a number (e.g. B1, B2, B3) to an assigned name (e.g. Blue, Green, Red, Landsat 4-7, but Aerosol, Blue, Green for Landsat 8/9) within the Google Earth Engine script and prior to exporting data for inclusion in this workflow. The table below denotes how these designations have been applied in AquaMatch. Band number and band designation across the Landsat archive. The panchromatic band is not part of the Level 2 Surface Reflectance Product, and is therefore not included in AquaMatch. Additionally, the cirrus band in Landsat 8/9 is not processed to the Surface Reflectance product, but rather used to define QA band (also not included in AquaMatch). Band Label/Value Landsat 4-7 Name Landsat 8/9 Name B1 Blue Aerosol B2 Green Blue B3 Red Green B4 Near Infrared “NIR” Red B5 Shortwave Infrared 1 “SWIR1” Near Infrared “NIR” B6 Thermal Band Shortwave Infrared 1 “SWIR1” B7 Shortwave Infrared 2 “SWIR2” Shortwave Infrared 2 “SWIR2” B8 Panchromatic band (not available for Landsat 4, not included in AquaMatch) Panchromatic (not included in AquaMatch) B9 N/A Cirrus (not included in AquaMatch B10 N/A Thermal Band 1 B11 N/A Thermal Band 2 (not included in AquaMatch) 5.2.2 Sensor Resolution The spatial resolution of the Level 1 data that the SR and ST products are derived from has not changed for optical bands over time (Aerosol, RGB, NIR, SWIR) but has varied over the historic record for thermal data: Sensors Optical Bands Thermal Bands TM 30 120 ETM+ 30 60 OLI/TIRS OLI-2/TIRS-2 30 100 All Collection 2 Level 2 Surface Reflectance and Surface Temperature data have been resampled to 30m. Alongside the pixel resolution of the sensors is the radiometric resolution at which the data are stored. TM and ETM+ data are stored as 8-bit data products US Geological Survey (2020a), OLI data are quantized to 12 bits (US Geological Survey 2019) and Landsat 9 to 14 bits (US Geological Survey 2022). This equates to 256 shades per band for Landsat 4-7 (28), 4,096 shades for Landsat 8 (212) and 16,384 shades for Landsat 9 (214), where higher numbers allow for greater precision of measurement in a given band. All Collection 2 Level 2 Surface Reflectance and Surface Temperature data have been rescaled and stored as unsigned 16 bit values (range for SR and ST bands are are 65536 shades, or 216). Since Collection 2 rescaling to a higher number of bits creates false precision across all satellites, we truncate the surface reflectance values to three significant digits for Landsat 4 - 7, four digits for Landsat 8, and five digits for Landsat 9. 5.3 Surface Reflectance Product The information presented in this section originates from the USGS Landsat Collection 2 Surface Reflectance product page and has been summarized here for the purpose of providing background information about the Landsat archive relevant to the creation and use of lakeSR and siteSR products. The Landsat C2 SR product is a Level 2 data product that has been atmospherically corrected from the Level 1 Top of Atmosphere product using a myriad of inputs to create a reasonably consistent data product across space and time. The USGS EROS describes the SR product as follows: Surface reflectance improves comparison between multiple images over the same region by accounting for atmospheric effects such as aerosol scattering and thin clouds, which can help in the detection and characterization of Earth surface change. Surface reflectance is generated from Level-1 inputs that meet the &lt;76 degrees Solar Zenith Angle constraint and include the required auxiliary data inputs to generate a scientifically viable product. 5.3.1 SR Atmospheric Processing The SR product for Landsat 4-7 is calculated using the Land Ecosystem Disturbance Adaptive Processing System (LEDAPS) (Schmidt et al. 2013) and Landsat 8 and 9 SR data are calculated using the Land Surface Reflectance Code (LaSRC) algorithm (Vermote et al. 2016). The two algorithms are functionally different, but the outcome is the same: a consistently-processed surface reflectance product that is available worldwide. See the table under section heading ‘Differences in Surface Reflectance Processing Algorithms’ on the USGS Landsat C2 website for details. 5.4 Surface Temperature The information presented in this section originates from the USGS Landsat Collection 2 Surface Temperature product page and has been summarized here for the purpose of providing background information about the Landsat archive relevant to the creation and use of lakeSR and siteSR products. The Landsat Collection 2 Surface Temperature (ST) product is calculated using a single-channel algorithm (Cook et al. 2014) to convert the thermal band data to temperature estimates in degrees Kelvin. While these data are considered interoperable over space and time with few differences in the ST algorithm product within Collection 2, there do appear to be slight differences in the ST product between sensors. Like with the surface reflectance product, we calculate between-mission handoffs for the TM/ETM/TIRS products in Section 8. It is important to note that the thermal band spatial resolution is coarser than the optical bands in all Landsat missions (see Section 5.2.2). At this time we do not account for mixed thermal pixel boundaries due to the difference in pixel resolution between optical and thermal sensors in lakeSR or siteSR outside of the flags described in Section 3.1.4 and Section 3.2.2. Additional data handling may be necessary to use these data as precise estimates of water surface temperature given these constraints. We do provide surface temperature summary statistics in the siteSR product as well, and users should approach the data with caution when a WQP monitoring site is near to a shoreline. While we do not have explicit guidance for the use of the surface temperature estimates for siteSR, we do provide some characteristics of sites and their relationships to NHD flowlines and waterbodies (see Section 3.2.2 additional descriptors). Users could use a combination of MonitoringLocationTypeName, the flags assigned from our NHD assignment process, and the distance columns from that process to assess whether or not the temperature data is appropriate for a given site. Additional assessments may be necessary to assess whether it is appropriate to use the temperature data for discrete analysis of temperature trends/patterns. King et al. (2024) noted that handoff coefficients should be used for the surface temperature product as well, see Section 8 for details. "],["LS-SRST-pull.html", "6 Landsat Collection 2 SRST Data Product 6.1 Changes from AquaSat v1 and LimnoSat-US 6.2 Overview of Acquisition Steps 6.3 Technical Implementation of GEE Acquisition Script 6.4 Additional diagnostic data columns 6.5 Payload handling", " 6 Landsat Collection 2 SRST Data Product The lakeSR data product is a set of tabular datasets, representing the Landsat surface reflectance (SR) and surface temperarture (ST) data summarized for the point of inaccessibility (POI) location which is meant to represent conditions at a given waterbody at a location far from shore (identified by its NHD unique identifier, see Section 3). This data product contains “full stacks” of the Landsat Collection 2 record - that is, all summarized Landsat data available within Google Earth Engine (ending 2024-12-31) from all Landsat missions that met our within-image QA criteria. The siteSR data product is similar, but is acquired at unique sampling locations as described in 3.2. 6.1 Changes from AquaSat v1 and LimnoSat-US While much of the general architecture from the previous data products remained unchanged, in AquaMatch we have added a number of features to the remote sensing acquisition workflow, have increased efficiency of the data pull, and have made the acquired data more robust through additional masking. The bullets below summarize the changes implemented in this update. Code below is pulled from the Python scripts that acquire the Landsat data from Google Earth Engine. Software settings are listed in Section 4. using yaml file for configuration of the workflow. This allows for greater flexibility in data acquisition including the use of custom configurations for the pull. assuring location and buffer area are completely contained in a path-row prior to pulling the data. This reduces erroneous counts of pixels for locations and buffers that are at the edge of a path-row, assuring that the buffer distance and included area is consistent per location if it is in the area of path-row overlap. Simplified example: Locations (and their buffers) are the blue circles and the extent of the path-row is indicated by the large dark blue or orange boxes. In this example, location 1 would be extracted for both path-row 1 and 2, location 2 only extracted for path-row 2, and location 3 only extracted for path-row 1. inclusion of Landsat 4 and Landsat 9. At the time of AquaSat v1 and LimnoSat-US, Landsat 4 was not easily integrated with other Landsat missions due to data storage differences. Collection 2 updates allowed for easier interoperability of the TM sensor (Landsat 4) image series and have therefore been included in the update. Additionally, Landsat 9 came online in 2021, and has been added to the data product. Landsat Collection 2 offers a Surface Temperature product derived from the thermal band. In AquaMatch, we include data from this band. See Section 5.4 for additional considerations in use of these data. sending tasks to GEE explicitly per path-row and limiting the Landsat stack to the explicit path-row to eliminate duplicate acquisitions. In the previous products, duplicate location/path-row data were acquired because the extracted Landsat stack was not limited to the explicit WRS path-row that the point and buffer were in. This meant that locations that were in a path-row overlap would be extracted twice in two different WRS path-row extents. The code below is an example of this type of filtering that occurs per mission as we run a path-row extraction, where we once clipped the stack to the AOI of the path-row instead of filtering for the path-row itself. Example below is from code at line 1850 in the file b_pull_Landsat_SRST_poi/py/run_GEE_per_pathrow.py within the lakeSR repository. # separate the path-row into path and row values wrs_pathrow = &quot;013031&quot; w_p = int(str(wrs_pathrow)[:3]) w_r = int(str(wrs_pathrow)[-3:]) # filter the Landsat 7 Collection 2 Tier 1 Level 2 product for the path, row, and valid dates l7 = (ee.ImageCollection(&quot;LANDSAT/LE07/C02/T1_L2&quot;) .filter(ee.Filter.eq(&quot;WRS_PATH&quot;, w_p)) .filter(ee.Filter.eq(&quot;WRS_ROW&quot;, w_r)) .filterDate(&#39;1999-05-28&#39;, &#39;2019-12-31&#39;)) filtering for valid mission dates at Landsat stack step. As seen in the code chunk above, we also filter for the valid mission dates as detailed in Section 5.2 - in the previous version this was completed after the Landsat stack was acquired. implementation of Collection 2 updates, specifically scaling changes and updated QA band conventions. The updated scaling factor function is as follows as directed by the US Geological Survey (2021) and US Geological Survey (2024) documents. Code below from the file b_pull_Landsat_SRST_poi/py/run_GEE_per_pathrow.py in the lakeSR repository. def apply_scale_factors(image): &quot;&quot;&quot; Applies scaling factors for Landsat Collection 2 surface reflectance and surface temperature products Args: image: one ee.Image of an ee.ImageCollection Returns: ee.Image with band values overwritten by scaling factors &quot;&quot;&quot; opticalBands = image.select(&#39;SR_B.&#39;).multiply(0.0000275).add(-0.2) thermalBands = image.select(&#39;ST_B.*&#39;).multiply(0.00341802).add(149.0) return (image .addBands(opticalBands, None, True) .addBands(thermalBands, None, True)) masking changes. Many updates were made to assure high quality data through the use of updated masking procedures. The masks are detailed below in Section 6.3.1. The cloud mask was also updated to include all sources of contamination (including cloud shadow and dilated clouds) in addition to clouds, snow, and ice. The proportion of pixels within the location buffer that were masked out due to clouds is now tracked as prop_clouds as an additional method of QA handling downstream of the GEE extraction. DSWE-like implementation for water detection. We have moved from using the JRC Global Surface Water Mapping Layers Pekel et al. (2016) to using a modified Dynamic Surface Water Extent (DSWE) algorithm based on the USGS implementation of DSWE described in LSDS-2042 version 3 (US Geological Survey 2023a). See Section 6.3.2 for details. removing no-data acquisitions before GEE export. In AquaMatch, we remove any rows from the summarized GEE product containing no data before export. This adds efficiency to the pull by removing those rows before export, which is a source of added time in the GEE bottleneck. checking for failed tasks in GEE. For AquaMatch, a failed task would indicate that a path-row acquisition had an error and was not completed within GEE. If a task fails (e.g. has an error when running), the task will be documented within the workflow in the file b_pull_Landsat_SRST_poi/out/GEE_failed_tasks_vRUN_DATE.txt, where “RUN_DATE” is the date noted in the GEE_config.yml file. While this rarely occurs, without checking the task history in GEE a user would not know if there were path-row acquisitions that failed. 6.2 Overview of Acquisition Steps The workflow for data acquisition from GEE for lakeSR and siteSR is as follows: read in and format the yaml configuration file (b_pull_Landsat_SRST_poi/config_files/config_poi.yml for lakeSR or gee_config.yml for siteSR) for the GEE run reformat the locations file declared within the configuration file for the GEE run determine the WRS-2 path-rows that intersect with the locations contained within the locations file filter the locations (with their buffer that is declared in the configuration file applied) for those that are completely contained by WRS-2 path-rows iteratively run the GEE script (run_GEE_per_pathrow.py) per WRS-2 path-row to extract remote sensing data from Google Earth Engine for the locations contained in that pathrow check to see that all tasks are complete in GEE before moving to next step check to see if any tasks failed in GEE extraction which is not visible from the RStudio IDE 6.2.1 Creating a Custom Configuration File lakeSR and siteSR can be modified to be run by a user by setting up a new config file and altering the {targets} workflow to point to that config file. To configure a new run of this workflow, fill out the yaml file at the file path b_pull_Landsat_SRST_poi/config_files/config.yml for lakeSR and gee_config.yml for siteSR. To run the pipeline with this custom configuration, follow the steps in run_targets.Rmd, which will assure proper set up and run the pipeline. If you wish to make changes to any processes that are not indicated in the config file (using a different set of lakes/source files, remote sensing masking procedures, summary statistics, QAQC filtering, mission handoff corrections, etc.) we encourage you to do so. Just remember, this pipeline takes days to run due to the bottleneck when submitting tasks to Google Earth Engine. If you wish to extract remote sensing data for specific locations in a lake, we encourage you to look to our siteSR data product which is more suited to extracting data of that nature. Please note, calculating hand-off coefficients from small numbers of lakes may not provide robust enough summary statistics for intermission comparison and timeseries analysis. See Section 8 for additional guidance. 6.3 Technical Implementation of GEE Acquisition Script In order to cue Python scripts and map along WRS-2 path-rows within the {targets} architecture, we use a function run_GEE_per_pathrow() which writes the current WRS-2 path-row to a text file, then sources a python script that uses that text file to run the acquisition for the path-row. Additional details are provided below to describe the steps in the python script (run_GEE_per_pathrow.py). 6.3.1 Custom Earth Engine Masking Functions The first section of run_GEE_per_pathrow.py saves custom functions used in the Landsat stack acquisition. These include data manipulation to create Earth Engine (EE) objects, custom QA masks, DSWE algorithm, and the functions that perform the masking and extraction of data from the Landsat image. Below is an overview of some of the custom masking procedures and their justification, if applicable. We use the most aggressive masking procedures in the lakeSR and siteSR products in order to attempt to have consistent and robust data across such a large area of data acquisition. An interactive masking viewer is available for select scenes for Landsat 4/5/7 and Landsat 8/9 to see some of the masks in action. In the descriptions below, “optical band” is used to describe any non-thermal band. apply_rad_mask: Masks out all pixels that are radiometrically saturated in any optical band using the QA_RADSAT QA band. The Landsat User Guides (US Geological Survey 2021, 2024) note that radiometrically saturated data are “unusable”. Saturated bands happen infrequently in Landsat 8 and 9, but we still apply this mask to all Landsat mission data for continuity. add_cf_mask: Adds a mask band for any pixels obstructed by clouds and snow/ice using the CLOUD_QA band. This is a general QA band that describes clouds/snow/ice detected by algorithms defined by the atmospheric processing procedure. We have elected to only include pixels that do not contain clouds, cloud shadows, dispersed clouds, or snow/ice as defined by this band. In particular, we follow the suggestions in the product User Guide (US Geological Survey 2021, 2024) Users are advised to engage the QA “Dilated Cloud” (bit 1) AND “Cloud” (bit 3) OFF condition to correctly identify clear pixels over water. add_sr_aero_mask: Adds a mask band for any pixels in Landsat 8 and 9 that have ‘medium’ or ‘high’ aerosol QA flags from the SR_QA_AEROSOL band. Because water is particularly difficult to assess from space, we are more aggressive in this mask than suggested by the Landsat 8 and 9 User Guide (US Geological Survey 2024) which states: “Note that pixels classified as high aerosol content are not recommended for use.” add_opac_mask: Adds a mask band to remove pixels where atmospheric opacity is greater than 0.3 in Landsat 4, 5, and 7 using the SR_ATMOS_OPACITY band. For similar reasons as a more aggressive aerosol mask in Landsat 8 &amp; 9, we use this mask in addition to the cloud mask (apply_cf_mask). The Landsat 4-7 User Guide (US Geological Survey 2021) states the following about the atmospheric opacity values: A general interpretation of atmospheric opacity is that values less than 0.1 are clear, 0.1-0.3 are average, and values greater than 0.3 indicate haze or other cloud situations. SR values from pixels with high atmospheric opacity will be less reliable, especially under high solar zenith angle conditions. apply_fill_mask_457 and apply_fill_mask_89: Adds a mask band where any band value is 0 before applying scaling factors to bands. Filled values are infrequent; however, when acquiring data across such a large area and time they are bound to happen. add_realistic_mask_457 and add_realistic_mask_89: Adds a mask band where any band is less than -0.01 after scaling, indicating overcorrection of SR product. While the stated minimum value of the ‘valid range’ for the SR product is 7273 prior to application of scaling factors (0.0000075 after scaling), we know that the Level-2 Surface Reflectance product has been fine-tuned on terrestrial data and small over-corrections of surface reflectance, especially over dark surfaces, are likely to happen. We explicitly allow for very small negative reflectance values to be sure we do not remove very deep, oligotrophic and/or high DOC water systems from our data set while implementing this QA filter. add_glint_mask: Adds a mask band where any optical band is &gt; 0.2, indicating likely sun glint artifacts. add_ir_glint_flag: Adds a band where any near infrared or shortwave infrared value is greater than 0.1, but does not mask the pixel. This flag is meant to be a diagnostic for downstream users to make additional qualitative assessment of sun glint affected data and is tallied with all masks implemented. We track pixel-level instances of the use of the aerosol mask in Landsat 8/9, the opacity mask in Landsat 4/5/7, the realistic mask (holistically and per band), and the sun glint mask (holistically and per band) in our GEE workflow. These tallies represent the number of pixels masked for each QA procedure prior to summarizing the data within the buffered area. 6.3.2 Defining water area We use an adapted version of the Dynamic Surface Water Extent (DSWE) algorithm to define what pixels are water within the buffer of our specific locations. DSWE was defined in Jones (2019) for Landsat Collection 1 and re-implemented for Collection 2 as a Level-3 data product in US Geological Survey (2023a). Differences between the Level-3 implementation and the on-the-fly calculation made within our workflow are as follows: we use the Level 2 SR product instead of the Level 2 Analysis Ready Data Product to calculate DSWE threshold values we mask any DSWE values that are not fully illuminated (a value of 0 in the function below) as defined by the ee.Terrain.hillShadow function in Google Earth Engine using the MERIT DEM version 1.0.3 (Yamazaki et al. 2017) at an extent of 3000 meters surrounding a given point for analysis. Screenshot of code used for implementation of hill shadow to determine masking procedures of the DSWE value. This is different from the implementation described in the Level 3 data product which uses a set of hillshade and landcover thresholds to determine whether or not the resulting DSWE value should be masked. Based on extensive visual inspection, our adaptation seems to label pixels as expected. Our implementation of the DSWE algorithm results in the following values per pixel based on the thresholds described in US Geological Survey (2023a) table 2.2 and 2.3 a value of 0 indicates no water/fill 1 is confident water 2 is low confidence water 3 is high confidence partial water (or vegetated water) 4 is low confidence partial water Within the scope of lakeSR and siteSR, we tabulate pixels that are a DSWE value of 1 (DSWE1) for high confidence open water, or what we call DSWE1a - high confidence open water OR the pixel meets a threshold that may indicate there is surface-level algae. Like the QA masks, the DSWE implementation occurs in the Python script run_GEE_per_pathrow.py. The algae mask is defined as when a pixel has a DSWE value greater than 1 and the green band scaled value is greater than 0.05 and the red band scaled value is less than 0.04. These values are based on optical properties intended to mimic the spectral response of chlorophyll a as described by Burket, Olmanson, and Brezonik (2023). This is an experimental mask, so we export both DSWE1 and DSWE1a summaries within lakeSR. We have found some omission error within DSWE1 for visible floating scum within river systems and this additional mask captures many of those pixels without adding unnecessary uncertainty. Users of the lakeSR and siteSR data products can choose to use the DSWE1a product if applicable to their research, however, this threshold was defined in the Illinois and Ohio Rivers and may not be applicable in all environments. 6.4 Additional diagnostic data columns During the masking and flagging step of the workflow, we tally pixels that met certain criteria for use as diagnostic tools, which are stored in the same file as the summary remote sensing data. This includes tallying of varying DSWE types (greater than 0 – water of some kind with any confidence, 1 high confidence water, 1a high confidence water with positive algal mask, 3 high confidence vegetated water) within the buffered area. These tallies are of any pixel that meets the DSWE category and met the hillshade, cloud, opacity/aerosol, realistic, and glint thresholds. The number of pixels that were high opacity/high aerosol, overly negative values, and likely sun glint were also tallied within the buffer. These tallies are of the entire buffer area and no additional masks are incorporated into the tallies (e.g. the sun glint mask and infrared mask may also indicate high reflectance from shoreline vegetation within the buffered area). Counts of pixels were tallied per band to indicate the number of pixels that were below zero, below the threshold for realistic values, or above the glint threshold. These tallies were completed in conjunction with the hillshade, cloud, opacity/aerosol and DSWE masks, representing the number of pixels that were masked after the baseline pixel QA process. The number of pixels that had infrared reflectance values (NIR, SWIR1, and SWIR2) greater than 0.1 were also tallied, but these pixels were not masked out. Columns for the proportion of pixels masked by clouds and shaded by terrain are also provided, no additive mask is used when tallying these pixels. These tallies are meant to be used as diagnostic tools for further quality control and modeling purposes, though we do not have recommended uses at this time. 6.5 Payload handling Because GEE is a free service to those at academic or governmental institutions, there are limits to the total number of tasks being run co-currently on GEE’s platform. For this reason, tasks are sent to GEE as path-row groups as soon as there are fewer than 10 tasks in the GEE tasks queue. Additionally, any path-row containing more than 5,000 POI locations are sent as separate tasks in 5000 location chunks. This is an additional step that is taken in addition to processing per path-row to avoid failed tasks. This management is orchestrated within the run_GEE_per_pathrow.py script and through integration with {targets} which runs this script per WRS-2 pathrow. We have also implemented a status check for tasks sent to GEE to determine if any have failed (Python script check_for_failed_tasks.py), as once the tasks are sent from the RStudio IDE, you can not tell whether or not they have completed or failed without (a) manually looking at the tasks list or (b) programatically checking the task list. This stores a text file at the filepath b_pull_Landsat_SRST_poi/out/GEE_task_errors_vRUN_DATE.csv containing the names of the tasks that have failed. If no tasks have failed, no file will be present. Generally speaking, failed tasks would indicate an error within the GEE acquisition script, usually due to changes in the b_pull_Landsat_SRST_poi/py/run_GEE_per_pathrow.py script. We recommend checking the task status of the GEE run at https://code.earthengine.google.com/tasks after any changes to they GEE functions file, which will indicate if tasks are failing due to code error without waiting for the total completion of the GEE target. "],["post-hoc-qa.html", "7 Post-Hoc Quality Assurance 7.1 Raw lakeSR stack collation 7.2 Post-hoc filters", " 7 Post-Hoc Quality Assurance Up until this point in the workflow, no data filtering has occurred other than the masking procedures that eliminate obviously contaminated pixel-level data due to sensor malfunction, clouds, haze, and glint as described in Section 6.3.1. We also implement further QA filters for the remote sensing stacks to assure high-quality data. These post-hoc filters are described in 7.2. 7.1 Raw lakeSR stack collation The data exported from the GEE tasks described in Section 6 were collated into large compressed .feather files per DSWE type (DSWE1 and DSWE1a), per Landsat mission, and per path prefix. The path prefix subset is designed to reduce data corruption due to file size in the upload/download process to Google Drive, where the collated files are stored for posterity and to add functionality to this workflow. The Google Drive ids can be found at the folder path c_collate_Landsat_data/out/ and can be accessed without special permissions by downstream users. Many of these files are quite large (on the order of many GBs) and are very difficult to handle outside of a programming or database environment. We provide these files for advanced users who wish to make changes to the QAQC or intermission handoff procedures. At the time of running the pipeline, we assigned a max vector size (‘R_MAX_VSIZE’) of 40 GB using the .Renviron document in this repository and it was run on a machine with 64 GB of memory. If your system has less than 40 GB of memory, this portion of the workflow may not successfully run. 7.2 Post-hoc filters We acknowledge that even with the best masking procedures, our workflow may still result in erroneous or misleading SR values. To address this we implement post-hoc filters that are applied to the stack to reduce uncertainty in the remote sensing data as much as possible. image quality (from scene-level metadata files) must be &gt;= 8. In Landsat 4, 5, and 7 this value is stored in the metadata column IMAGE_QUALITY, in Landsat 8 and 9, this value originates from the column IMAGE_QUALITY_OLI. These columns indicate the overall quality of the image on a scale of 0 (worst) to 9 (best). total count of pixels (pCount_dswe1 or pCount_dswe1a) contributing to summary values must be ≥ 8. This is a slight change from AquaSat v1 which required 10 pixels. Due to the more rigorous masking procedures (than AquaSat v1) we believe allows for a slightly more conservative QA filter via the reduction of required pixels for inclusion in the lakeSR and siteSR datasets. either NIR surface reflectance or SWIR1 and SWIR2 surface reflectance must be &lt; 0.1, this is to remove any extracted samples where sun glint has likely affected the data that was not masked in the RGB bands. In aquatic environments, NIR, SWIR1, and SWIR2 surface reflectance values should be very low and these bands can be used for detecting sun glint affected areas (e.g. Mondejar and Tongco 2019; Vanhellemont 2019). Since NIR bands can be elevated in high-sediment waters (e.g., Doxaran, Froidefond, and Castaing 2002) and SWIR can be elevated in high chlorophyll environments (e.g, Hu 2009), and we did not wish to bias our dataset and remove data of this nature, we embraced this conditional approach. While there are numerous other diagnostic tests we could apply to filter the RS data, these are the QA filters that we deem to be the most universal for reliable RS data across the US and Territories. Figures in the sections below show how many rows of data were dropped through this QA process. For the purposes of this documentation, we show summaries for DSWE1 data only, but running the pipeline locally results in graphical summaries for both DSWE1 and DSWE1a data. We also added use flags in the remote sensing summary file indicating when the thermal data were outside of specific minimum and maximum thresholds: if the median temperature is below freezing (med_SurfaceTemp &lt; 273.15 ° K), the row is flagged flag_temp_min as 1 (otherwise 0). This is our best attempt at identifying data during any freezing period and also is an attempt at detecting clouds, which can impact the thermal estimates. In particular, cirrus clouds can go unnoticed in the cloud detection algorithms that inform our masking procedures. if the median temperature is greater than or equal to 40°C (313.15 °K) the row is flagged flag_temp_max as 1 (otherwise 0). This maximum was defined based on the maximum value included Willard et al. (2021) composed of in situ measurements and remote sensing estimates. When thermal data are outside of these ranges (and the flag column is 1) we suggest removing the thermal data from your analysis. While the thermal data and optical data are processed separately, when either flag_temp_min or flag_temp_max is 1, users should consider whether the optical data is appropriate to use in your analysis or whether there may be contamination of some kind that could impact the validity optical data. For instance, if your site is far from shore and the flag_temp_min is 1, it is possible there is either unidentified ice or unidentified cloud contamination. 7.2.1 Data Truncation Data coming out of Google Earth Engine carry nearly unending significant digits due to the data aggregation that occurs in that step. Prior to exporting any files, we also truncate optical data to 3 significant digits and thermal data to 2 significant digits. 7.2.2 Landsat 4 QA Summary Summary of rows retained during lakeSR Landsat 4’s quality filtering for DSWE1 (confident water) remote sensing summaries. Summary of rows retained during siteSR Landsat 4’s quality filtering for DSWE1 (confident water) remote sensing summaries. 7.2.3 Landsat 5 QA Summary Summary of rows retained during lakeSR Landsat 5’s quality filtering for DSWE1 (confident water) remote sensing summaries. Summary of rows retained during siteSR Landsat 5’s quality filtering for DSWE1 (confident water) remote sensing summaries. 7.2.4 Landsat 7 QA Summary Summary of rows retained during lakeSR Landsat 7’s quality filtering for DSWE1 (confident water) remote sensing summaries. Summary of rows retained during siteSR Landsat 7’s quality filtering for DSWE1 (confident water) remote sensing summaries. 7.2.5 Landsat 8 QA Summary Summary of rows retained during lakeSR quality filtering for Landsat 8 DSWE1 (confident water) remote sensing summaries. Summary of rows retained during siteSR quality filtering for Landsat 8 DSWE1 (confident water) remote sensing summaries. 7.2.6 Landsat 9 QA Summary Summary of rows retained during lakeSR quality filtering for Landsat 9 DSWE1 (confident water) remote sensing summaries. Summary of rows retained during siteSR quality filtering for Landsat 9 DSWE1 (confident water) remote sensing summaries. "],["define-handoff.html", "8 Calculating intermission handoffs 8.1 Additional filtering applied 8.2 Roy method 8.3 Gardner method 8.4 Implementing Roy Handoffs 8.5 Implementing Gardner Handoffs", " 8 Calculating intermission handoffs It is necessary to standardize band values between Landsat missions in order to create a robust timeseries. Maciel et al. (2023) notes the issues in using the Landsat Surface Reflectance product for aquatic systems as a timeseries without careful handling of data between missions. King et al. (2024) notes that this type of standardization is necessary for the thermal band, as well. This standardization process attempts to address changes in sensor spectral response and atmospheric correction procedures. For the purposes of AquaMatch, we call this standardization process “intermission handoffs”. We implement two versions of intermission handoffs: the method described in Roy et al. (2016) (“Roy method”) and an adapted version of that described in Gardner et al. (2021) (“Gardner method”). In AquaMatch, we provide coefficients to standardize remote sensing values relative to Landsat 7 and Landsat 8. The Landsat 7 intermission handoffs create a continuous record of remote sensing from Landsat 4 through 9 relative to Landsat 7. This is because Landsat 4 and 5 and Landsat 8 and 9 can be treated as interchangeable due to the similarity in sensor payload and radiometric resolution. Data corrected to Landsat 8 relative values can only be applied to Landsat 7 due to lack of mission overlap between Landsat 8 and Landsat 5, so the resulting standardized data timeseries is shorter for any application of correction relative to Landsat 8. For the purposes of this document, we only present the handoff coefficients for DSWE1 (confident water) and do not investigate differences between the DSWE1 or DSWE1a coefficients, though we provide both. Users should use these handoff coefficients if using data from more than one sensor group (TM, ETM+, OLI). 8.1 Additional filtering applied For the purposes of creating these handoff coefficients, we use flags created when the locations were defined (see Section 3.1.4 and some of the flags created in the GEE workflow (see Section 6.4) to reduce impacts of errant data. There are endless filters that can be applied prior to calculating the handoff coefficients, but for the purposes of this document and data product, we are somewhat conservative in filtering the data. For optical bands, we removed data from sites where the flag_optical_shoreline was 1 for this analysis (indicating that there is a possiblity that the buffer area includes mixed pixels). While we do use the DSWE-like algorithms to only include confident water pixels, this is an effort to reduce impacts of near-shore contamination in this process. Similarly, we removed the thermal band data when the flag_thermal_... was 1 (where the ... represents the column appropriate for the given mission, see Section (ref?)(lakeSR-shoreline)). For thermal data, we also removed data from this process when there was any detected cloud in the buffered area of the point (prop_clouds column). The thermal sensor values can be dramatically impacted by clouds and we wanted to take a step to reduce that carrying through this analysis. 8.2 Roy method The Roy method for calculating intermission handoffs uses paired images at specific sites, where the reflectance data are obtained from two missions (e.g. Landsat 7 and Landsat 8) separated by one day at a specific location within the overlapping paths in the WRS2 path-row framework: An example of two overlapping WRS2 paths (grey area) separated by one day. Any location with data for both images (in the grey area) would be considered a paired data point to define the Roy method intermission handoffs. While Roy et al. (2016) implemented this method on a pixel-by-pixel basis, we implement using the median band value per site where we have collected data in lakeSR, available in the lakeSR remote sensing data summary files. This is used in place of the explicit filters described in the Roy method (saturated pixels, cloudy/snowy pixels, and pixels with value changes greater than the changes in atmospheric correction), as we have implemented masks and QA filters to reduce these sources of error. Handoff coefficients are defined by the ordinary least squares (OLS) regression line or the Deming regression (MLE, assuming equal and constant error in both x and y variables). Because Deming regression is computationally intensive, the regression line is defined by a random sample of 10,000 matches. For the purposes of this documentation, we only include figures and tables for the Deming regression (minimum likelihood estimation method) and DSWE1. Intercepts and slopes for all handoffs are available at the file path e_calculate_handoffs/out/collated_handoffs_xDATEx.csv and figures for all handoffs are created when the pipeline is run. 8.3 Gardner method Gardner method intermission handoffs are defined by the data obtained in the overlapping period of time between two adjacent-in-time missions. These data are filtered to sites that have at least one data point per year for at least 75% of the years of overlap. The filtered data are then summarized to each mission’s 1st-99th percentile value per band, and the handoff coefficients between missions are defined by the second-order polynomial (quadratic) relationship between them. Because this method uses a second-order polynomial to define the handoff relationship, all input (x) values outside of the 1st and 99th percentile values used to define the intermission handoff should be used with extreme caution. One additional consideration when using the Gardner method is, even when the number of observations is high, if there is a difference between total observations contributing to the quantile summaries, there may be systematic differences built into the coefficients. An example of possible systematic differences could be fewer observations from non-CONUS locations in Landsat 5 due to data transmission errors. We did not investigate the differences in number of images listed in Table 8.4 to determine what, if any, systematic differences are present between the two missions. We provide the Gardner method handoffs for continuity with the riverSR product for users who would like that interoperability. As with the Roy, et al. method, intercepts and slopes for all handoffs are available at the file path e_calculate_handoffs/out/collated_handoffs_xDATEx.csv and figures for all handoffs are created when the pipeline is run. 8.4 Implementing Roy Handoffs Table 8.1 describes the number of matches contributing to the intermission handoffs using the Roy method. We also include figures of the OLS/MLE relationships and the residuals for the MLE corrections in addition to a table of the coefficients for each DSWE1 MLE handoff. Table 8.1: Summary of Landsat mission data used to create the Roy method intermission handoff for DSWE1. Early mission Late mission n matches Landsat 5 Landsat 7 4,950,640 Landsat 7 Landsat 8 1,528,745 Table 8.2: Handoff coefficients for Landsat 5 and 8 to harmonize to Landsat 7 using the Roy method and Deming (MLE) regression Coefficients Input Value Range Band DSWE type Satelliteto Correct Satelliteto Harmonize to Intercept Slope Minimum Valuein Handoff Maximum Valuein Handoff med_Blue DSWE1 LS5 LS7 0.002 0.983 -0.010 0.199 med_Green 0.005 1.011 -0.005 0.200 med_Red 0.006 0.963 -0.009 0.200 med_Nir 0.003 0.986 -0.010 0.200 med_SurfaceTemp -7.866 1.029 273.151 313.147 med_Blue LS8 -0.012 0.790 -0.008 0.200 med_Green -0.010 0.975 -0.006 0.200 med_Red -0.010 0.965 -0.008 0.200 med_Nir -0.013 0.917 -0.010 0.200 med_SurfaceTemp -21.745 1.080 273.151 313.034 med_Blue DSWE1a LS5 0.002 0.976 -0.010 0.199 med_Green 0.005 1.007 -0.005 0.200 med_Red 0.005 0.968 -0.009 0.200 med_Nir 0.002 1.016 -0.010 0.200 med_SurfaceTemp -9.473 1.035 273.151 313.147 med_Blue LS8 -0.012 0.801 -0.008 0.200 med_Green -0.010 0.969 -0.006 0.200 med_Red -0.010 0.957 -0.008 0.200 med_Nir -0.014 0.947 -0.010 0.200 med_SurfaceTemp -21.418 1.079 273.151 313.034 Table 8.3: Handoff coefficients for Landsat 5 and 8 to harmonize to Landsat 7 using the Roy method and Deming (MLE) regression Coefficients Input Value Range Band DSWE type Satelliteto Correct Satelliteto Harmonize to Intercept Slope Minimum Valuein Handoff Maximum Valuein Handoff med_Blue DSWE1 LS7 LS8 0.015 1.266 -0.009 0.195 med_Green 0.011 1.026 -0.001 0.200 med_Red 0.011 1.036 -0.010 0.200 med_Nir 0.014 1.091 -0.010 0.199 med_SurfaceTemp 20.132 0.926 273.151 313.041 med_Blue DSWE1a 0.015 1.249 -0.010 0.195 med_Green 0.010 1.032 -0.001 0.200 med_Red 0.010 1.045 -0.010 0.200 med_Nir 0.014 1.056 -0.010 0.199 med_SurfaceTemp 19.847 0.927 273.151 313.091 Application of Roy-style handoffs is straightforward and is completed as simple application of a linear equation: \\[ y = mx + b \\] Where \\(b\\) is the intercept, \\(m\\) is the slope, \\(x\\) is the band reflectance value from the mission Satellite to Correct in Table 8.2 or 8.3 and \\(y\\) is the harmonized reflectance value relative to the mission Satellite to Harmonize to in the previously-mentioned tables. To reduce output data product size, we do not apply these handoffs within the output data product, but rather provide users the tools to apply the handoffs to the filtered lakeSR and siteSR data. Roy Deming Handoff and Residual Figures 8.4.1 Roy Deming Correction Landsat 5 to Landsat 7 For each of the handoff figures below, the blue line is the Deming (MLE) regression, the red dotted line is the OLS regression line, and the grey dashed line is the 1:1 line. Coefficients for the Deming regression are provided in Table 8.2. Color of dots represents the density of points in at a given x, y location. In the residual plots, the grey dashed line is a 0 intercept, 0 slope line visual aide. 8.4.2 Roy Deming Correction Landsat 8 to Landsat 7 For each of the handoff figures below, the blue solid line is the Deming (MLE) regression, the red line is the OLS regression line, and the grey dashed line is the 1:1 line. Coefficients for the Deming regression are provided in Table 8.2. Color of dots represents the density of points in at a given x, y location. In the residual plots, the grey dashed line is a 0 intercept, 0 slope line visual aide. 8.4.3 Roy Deming Correction Landsat 7 to Landsat 8 For each of the handoff figures below, the blue solid line is the Deming (MLE) regression, the red dotted line is the OLS regression line, and the grey dashed line is the 1:1 line. Coefficients for the Deming regression are provided in Table 8.3. Color of dots represents the density of points in at a given x, y location. In the residual plots, the grey dashed line is a 0 intercept, 0 slope line visual aide. 8.5 Implementing Gardner Handoffs Table 8.4: Summary of Landsat mission data for optical handoffs calculated by the Gardner method for DSWE1. Early mission Late mission Correction to Overlap Start Overlap End n Observations from Early Mission n Observations from Late Mission Landsat 5 Landsat 7 Landsat 7 1999-04-15 2013-02-11 2,227,103 12,046,282 Landsat 7 Landsat 8 Landsat 7, Landsat8 2013-02-11 2022-04-16 5,447,717 3,397,037 Table 8.5: Handoff coefficients for Landsat 5 and 8 to harmonize to Landsat 7 using the Deming (MLE) regression Coefficients Input Value Range Band DSWE type Satelliteto Correct Satelliteto Harmonize to Intercept B1 B2 Minimum Valuein Handoff Maximum Valuein Handoff med_Blue DSWE1 LS5 LS7 0.005 0.631 5.116 0.011 0.114 med_Green 0.006 0.509 3.095 0.013 0.151 med_Red 0.001 0.789 1.135 0.007 0.151 med_Nir -0.002 0.922 -0.405 0.011 0.122 med_SurfaceTemp -161.491 2.443 -0.003 270.000 310.000 med_Blue LS8 0.012 1.102 -1.089 -0.001 0.121 med_Green 0.009 0.756 0.657 0.005 0.158 med_Red 0.009 0.806 0.585 -0.002 0.144 med_Nir 0.014 0.769 1.641 -0.004 0.094 med_SurfaceTemp -539.824 4.930 -0.007 270.000 300.000 med_Blue DSWE1a LS5 0.005 0.638 5.060 0.011 0.114 med_Green 0.006 0.511 3.101 0.013 0.151 med_Red 0.001 0.793 1.112 0.007 0.151 med_Nir -0.002 0.935 -0.595 0.011 0.125 med_SurfaceTemp -133.420 2.236 -0.003 270.000 310.000 med_Blue LS8 0.012 1.111 -1.130 -0.001 0.121 med_Green 0.009 0.741 0.797 0.005 0.158 med_Red 0.009 0.816 0.542 -0.002 0.143 med_Nir 0.014 0.826 -0.293 -0.004 0.113 med_SurfaceTemp -539.824 4.930 -0.007 270.000 300.000 Table 8.6: Handoff coefficients for Landsat 5 and 8 to harmonize to Landsat 7 using the Deming (MLE) regression Coefficients Input Value Range Band DSWE type Satelliteto Correct Satelliteto Harmonize to Intercept B1 B2 Minimum Valuein Handoff Maximum Valuein Handoff med_Blue DSWE1 LS7 LS8 -0.011 0.875 1.024 0.010 0.136 med_Green -0.012 1.327 -1.101 0.011 0.150 med_Red -0.011 1.250 -0.897 0.006 0.141 med_Nir -0.018 1.333 -2.238 0.008 0.098 med_SurfaceTemp -229.698 2.724 -0.003 270.000 300.000 med_Blue DSWE1a -0.011 0.868 1.043 0.010 0.136 med_Green -0.012 1.347 -1.285 0.011 0.150 med_Red -0.011 1.235 -0.819 0.006 0.140 med_Nir -0.017 1.209 0.383 0.008 0.099 med_SurfaceTemp -229.698 2.724 -0.003 270.000 300.000 Application of Gardner-style handoffs is completed as simple application of a second order polynomial equation: \\[ y = b0 + b1*x + b2*x^2 \\] Where \\(b0\\) is the intercept, \\(b1\\) is the coefficient of the \\(x\\) value, \\(b2\\) is the coefficient of the quadratic term \\(x^2\\), \\(x\\) is the band reflectance value from the mission Satellite to Correct in Table 8.5 or 8.6 and \\(y\\) is the harmonized reflectance value relative to the mission Satellite to Harmonize to in the previously-mentioned tables. To reduce output data product size, we do not apply these handoffs within the output data product, but rather provide users the tools to apply the handoffs to the filtered lakeSR and siteSR data. Gardner Handoff and Residual Figures relative to Landsat 7 8.5.1 Gardner Correction Landsat 5 to Landsat 7 For each of the handoff figures below, the red line is the second order polynomial regression and the grey dashed line is the 1:1 line. Coefficients for the second order polynomial regression are provided in Table 8.5. Color of dots represents the density of points in at a given x, y location. In the residual plots, the grey dashed line is a 0 intercept, 0 slope line visual aide. 8.5.2 Gardner Correction Landsat 8 to Landsat 7 For each of the handoff figures below, the red line is the second order polynomial regression and the grey dashed line is the 1:1 line. Coefficients for the second order polynomial regression are provided in Table 8.5. Color of dots represents the density of points in at a given x, y location. In the residual plots, the grey dashed line is a 0 intercept, 0 slope line visual aide. 8.5.3 Gardner Correction Landsat 7 to Landsat 8 For each of the handoff figures below, the red line is the second order polynomial regression and the grey dashed line is the 1:1 line. Coefficients for the second order polynomial regression are provided in Table 8.6. Color of dots represents the density of points in at a given x, y location. In the residual plots, the grey dashed line is a 0 intercept, 0 slope line visual aide. "],["references.html", "9 References", " 9 References Allaire, J. J. 2023. Config: Manage Environment Specific Configuration Values. https://doi.org/10.32614/CRAN.package.config. Arnold, Jeffrey B. 2024. Ggthemes: Extra Themes, Scales and Geoms for ’Ggplot2’. https://doi.org/10.32614/CRAN.package.ggthemes. Barrett, Tyson, Matt Dowle, Arun Srinivasan, Jan Gorecki, Michael Chirico, Toby Hocking, Benjamin Schwendinger, and Ivan Krylov. 2025. Data.table: Extension of ‘Data.frame‘. https://doi.org/10.32614/CRAN.package.data.table. Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Burket, Martha Otte, Leif G. Olmanson, and Patrick L. Brezonik. 2023. “Comparison of Two Water Color Algorithms: Implications for the Remote Sensing of Water Bodies with Moderate to High CDOM or Chlorophyll Levels.” Sensors 23 (3): 1071. https://doi.org/10.3390/s23031071. Cook, Monica, John R. Schott, John Mandel, and Nina Raqueno. 2014. “Development of an Operational Calibration Methodology for the Landsat Thermal Data Archive and Initial Testing of the Atmospheric Compensation Component of a Land Surface Temperature (LST) Product from the Archive.” Remote Sensing 6 (11): 1124411266. https://doi.org/10.3390/rs61111244. Doxaran, D., J.-M. Froidefond, and P. Castaing. 2002. “A Reflectance Band Ratio Used to Estimate Suspended Matter Concentrations in Sediment-Dominated Coastal Waters.” International Journal of Remote Sensing 23 (23): 5079–85. https://doi.org/10.1080/0143116021000009912. Earth Resources Observation and Science (EROS) Center. 1999. “Landsat 7 Enhanced Thematic Mapper Plus Level-2, Collection 2.” U.S. Geological Survey. https://doi.org/10.5066/P9C7I13B. ———. 2013. “Landsat 8-9 Operational Land Imager / Thermal Infrared Sensor Level-2, Collection 2.” U.S. Geological Survey. https://doi.org/10.5066/P9OGBGM6. Embry, Irucka. 2022. “USA.state.boundaries: WGS84 Datum Map of the USA, Including Puerto Rico and the u.s. Virgin Islands.” Fajardo, Otto. 2023. Pyreadr: Reads/Writes r RData and Rds Files into/from Pandas Data Frames. https://github.com/ofajardo/pyreadr. Garbett, Shawn P., Jeremy Stephens, Kirill Simonov, Yihui Xie, Zhuoer Dong, Hadley Wickham, Jeffrey Horner, et al. 2024. Yaml: Methods to Convert r Data to YAML and Back. https://doi.org/10.32614/CRAN.package.yaml. Garcia-Castellanos, Daniel, and Umberto and Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Gardner, John R., Xiao Yang, Simon N. Topp, Matthew R. V. Ross, Elizabeth H. Altenau, and Tamlin M. Pavelsky. 2021. “The Color of Rivers.” Geophysical Research Letters 48 (1): e2020GL088946. https://doi.org/10.1029/2020GL088946. Garnier, Simon, Noam Ross, Robert Rudis, Antonio P Camargo, Marco Sciani, and Cedric Scherer. 2024. Viridis(lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423. Gorelick, N. 2023. Earthengine-Api: Earth Engine Python API. Google. https://github.com/google/earthengine-api. Gorelick, N, M Hancher, M Dixon, S Ilyushchenko, D Thau, and R Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031. Harris, Charles R., K. Jarrod Millman, Stéfan J. van der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, et al. 2020. “Array Programming with NumPy.” Nature 585 (7825): 357–62. https://doi.org/10.1038/s41586-020-2649-2. Hu, Chuanmin. 2009. “A Novel Ocean Color Index to Detect Floating Algae in the Global Oceans.” Remote Sensing of Environment 113 (10): 2118–29. https://doi.org/10.1016/j.rse.2009.05.012. Jones, John W. 2019. “Improved Automated Detection of Subpixel-Scale InundationRevised Dynamic Surface Water Extent (DSWE) Partial Surface Water Tests.” Remote Sensing 11 (4): 374. https://doi.org/10.3390/rs11040374. King, Tyler V., M. A. Mast, Robert A. Bean, and Evan J. Gohring. 2024. “Remote Sensing and in-Situ Data to Support Chlorophyll-a Mapping in Blue Mesa Reservoir from Sentinel-2 Imagery.” https://doi.org/10.5066/P9XULQAS. Landau, William Michael. 2021a. Tarchetypes: Archetypes for Targets. https://docs.ropensci.org/tarchetypes/, https://github.com/ropensci/tarchetypes. ———. 2021b. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959. ———. 2025. Crew: A Distributed Worker Launcher Framework. https://doi.org/10.32614/CRAN.package.crew. Larsson, Johan. 2024. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Maciel, Daniel Andrade, Nima Pahlevan, Claudio Clemente Faria Barbosa, Evlyn Márcia Leão de Moraes de Novo, Rejane Souza Paulino, Vitor Souza Martins, Eric Vermote, and Christopher J. Crawford. 2023. “Validity of the Landsat Surface Reflectance Archive for Aquatic Science: Implications for Cloud-Based Analysis.” Limnology and Oceanography Letters 8 (n/a). https://doi.org/10.1002/lol2.10344. McGowan, Lucy D’Agostino, and Jennifer Bryan. 2023. Googledrive: An Interface to Google Drive. https://doi.org/10.32614/CRAN.package.googledrive. Messager, Mathis Loïc, Bernhard Lehner, Günther Grill, Irena Nedeva, and Oliver Schmitt. 2016. “Estimating the Volume and Age of Water Stored in Global Lakes Using a Geo-Statistical Approach.” Nature Communications 7 (1): 13603. https://doi.org/10.1038/ncomms13603. Mondejar, Jeremy P., and Alejandro F. Tongco. 2019. “Near Infrared Band of Landsat 8 as Water Index: A Case Study Around Cordova and Lapu-Lapu City, Cebu, Philippines.” Sustainable Environment Research 29 (1): 16. https://doi.org/10.1186/s42834-019-0016-5. Observation, Earth Resources, and Science (EROS) Center. 2020. “USGS EROS Archive - Landsat Archives - Landsat 4-5 TM Collection 2 Level-2 Science Products.” U.S. Geological Survey. https://doi.org/doi.org/10.5066/P9IAXOVV. Pebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439. https://doi.org/10.32614/RJ-2018-009. Pebesma, Edzer, and Roger Bivand. 2023. Spatial Data Science: With Applications in R. 1st ed. New York: Chapman; Hall/CRC. https://doi.org/10.1201/9780429459016. Pekel, Jean-François, Andrew Cottam, Noel Gorelick, and Alan S. Belward. 2016. “High-resolution mapping of global surface water and its long-term changes.” Nature 540 (7633): 418–22. https://doi.org/10.1038/nature20584. Posit team. 2023. RStudio: Integrated Development Environment for r. Boston, MA: Posit Software, PBC. http://www.posit.co/. Qiu, Shi, Zhe Zhu, Rong Shang, and Christopher J. Crawford. 2021. “Can Landsat 7 Preserve Its Science Capability with a Drifting Orbit?” Science of Remote Sensing 4 (December): 100026. https://doi.org/10.1016/j.srs.2021.100026. R Core Team. 2025. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/. Richardson, Neal, Ian Cook, Nic Crane, Dewey Dunnington, Romain François, Jonathan Keane, Dragoș Moldovan-Grünfeld, Jeroen Ooms, Jacob Wujciak-Jens, and Apache Arrow. 2025. Arrow: Integration to ’Apache’ ’Arrow’. https://doi.org/10.32614/CRAN.package.arrow. Ross, Matthew R. V., Simon N. Topp, Alison P. Appling, Xiao Yang, Catherine Kuhn, David Butman, Marc Simard, and Tamlin M. Pavelsky. 2019. “AquaSat: A Data Set to Enable Remote Sensing of Water Quality for Inland Waters.” Water Resources Research 55 (11): 10012–25. https://doi.org/10.1029/2019WR024883. Roy, D. P., V. Kovalskyy, H. K. Zhang, E. F. Vermote, L. Yan, S. S. Kumar, and A. Egorov. 2016. “Characterization of Landsat-7 to Landsat-8 Reflective Wavelength and Normalized Difference Vegetation Index Continuity.” Remote Sensing of Environment, Landsat 8 science results, 185 (November): 57–70. https://doi.org/10.1016/j.rse.2015.12.024. Schmidt, Gail, Calli B. Jenkerson, Jeffrey Masek, Eric Vermote, and Feng Gao. 2013. “Landsat Ecosystem Disturbance Adaptive Processing System (LEDAPS) Algorithm Description.” Reston, VA. https://doi.org/10.3133/ofr20131057. Slowikowski, Kamil. 2024. Ggrepel: Automatically Position Non-Overlapping Text Labels with ’Ggplot2’. https://doi.org/10.32614/CRAN.package.ggrepel. Stefansson, Vilhjalmur. 1920. “The Region of Maximum Inaccessibility in the Arctic.” Geographical Review 10 (3): 167–72. https://doi.org/10.2307/207749. Teucher, Andy, and Kenton Russell. 2023. Rmapshaper: Client for ’Mapshaper’ for ’Geospatial’ Operations. https://doi.org/10.32614/CRAN.package.rmapshaper. The pandas development team. 2023. Pandas-Dev/Pandas: Pandas. Zenodo. https://doi.org/10.5281/zenodo.8092754. Therneau, Terry. 2024. Deming: Deming, Theil-Sen, Passing-Bablock and Total Least Squares Regression. https://doi.org/10.32614/CRAN.package.deming. Topp, Simon, Tamlin Pavelsky, Xiao Yang, John Gardner, and Matthew R. V. Ross. 2020. “LimnoSat-US: A Remote Sensing Dataset for u.s. Lakes from 1984-2020.” https://doi.org/10.5281/zenodo.4139695. US Geological Survey. 2019. “Landsat 8 (L8) Data Users Handbook.” Sioux Falls, SD. https://d9-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/atoms/files/LSDS-1574_L8_Data_Users_Handbook-v5.0.pdf. ———. 2020a. “Landsat 7 (L7) Enhanced Thematic Mapper Plus (ETM+) Collection 2 (C2) Level 1 (L1) Data Format Control Book (DFCB).” Sioux Falls, SD. https://d9-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/atoms/files/LSDS-1414_Landsat7ETM-C2-L1-DFCB-v3.pdf. ———. 2020b. “Landsat Thematic Mapper (TM) Collection 2 (C2) Level 1 (L1) Data Format Control Book (DFCB).” Sioux Falls, SD. https://d9-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/atoms/files/LSDS-1415_Landsat4-5-TM-C2-L1-DFCB-v3.pdf. ———. 2021. “Landsat 4-7 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” https://www.usgs.gov/media/files/landsat-4-7-collection-2-level-2-science-product-guide. ———. 2022. “Landsat 9 Data Users Handbook.” Sioux Falls, SD. https://d9-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/media/files/LSDS-2082_L9-Data-Users-Handbook_v1.pdf. ———. 2023a. “Landsat Collection 2 (C2) Level 3 (L3) Dynamic Surface Water Extent (DSWE) Data Format Control Book (DFCB).” Sioux Falls, SD. https://www.usgs.gov/media/files/landsat-collection-2-level-3-dynamic-surface-water-extent-data-format-control-book. ———. 2023b. “USGS National Hydrography Dataset Best Resolution (NHD) - Alaska (Published 20230506) GeoPackage.” ———. 2024. “Landsat 8-9 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” Ushey, Kevin, J. J. Allaire, and Yuan Tang. 2025. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. Vanhellemont, Quinten. 2019. “Adaptation of the Dark Spectrum Fitting Atmospheric Correction for Aquatic Applications of the Landsat and Sentinel-2 Archives.” Remote Sensing of Environment 225 (May): 175–92. https://doi.org/10.1016/j.rse.2019.03.010. Vermote, Eric, Chris Justice, Martin Claverie, and Belen Franch. 2016. “Preliminary Analysis of the Performance of the Landsat 8/OLI Land Surface Reflectance Product.” Remote Sensing of Environment 185: 46–56. https://doi.org/https://doi.org/10.1016/j.rse.2016.04.008. Verpoorter, Charles, Tiit Kutser, David A. Seekell, and Lars J. Tranvik. 2014. “A Global Inventory of Lakes Based on High-Resolution Satellite Imagery.” Geophysical Research Letters 41 (18): 6396–6402. https://doi.org/10.1002/2014GL060641. Walker, Kyle. 2025. Tigris: Load Census TIGER/Line Shapefiles. 10.32614/CRAN.package.tigris. Wickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the Tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686. Wickham, Hadley, Jim Hester, and Jeroen Ooms. 2025. Xml2: Parse XML. https://doi.org/10.32614/CRAN.package.xml2. Wilke, Claus O. 2024. Cowplot: Streamlined Plot Theme and Plot Annotations for ’Ggplot2’. https://doi.org/10.32614/CRAN.package.cowplot. Willard, Jared D., Jordan S. Read, Alison P. Appling, Samantha K. Oliver, Xiaowei Jia, and Vipin Kumar. 2021. “Predicting Water Temperature Dynamics of Unmonitored Lakes with Meta-Transfer Learning.” Water Resources Research 57 (7): e2021WR029579. https://doi.org/https://doi.org/10.1029/2021WR029579. Xie, Yihui. 2016. “Bookdown: Authoring Books and Technical Documents with r Markdown.” Boca Raton, Florida. https://bookdown.org/yihui/bookdown. ———. 2025. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. Yamazaki, Dai, Daiki Ikeshima, Ryunosuke Tawatari, Tomohiro Yamaguchi, Fiachra O’Loughlin, Jeffery C. Neal, Christopher C. Sampson, Shinjiro Kanae, and Paul D. Bates. 2017. “A High-Accuracy Map of Global Terrain Elevations.” Geophysical Research Letters 44 (11): 5844–53. https://doi.org/10.1002/2017GL072874. Yang, Xiao. 2020. Deepest Point Calculation for Any Given Polygon Using Google Earth Engine JavaScript API. Zenodo. https://doi.org/10.5281/zenodo.6341960. Zhu, Hao. 2024. kableExtra: Construct Complex Table with ’Kable’ and Pipe Syntax. https://doi.org/10.32614/CRAN.package.kableExtra. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
