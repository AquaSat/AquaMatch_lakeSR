[["introduction.html", "lakeSR: Compiled Satellite Surface Reflectance and Surface Temperature for Lakes in the United States and US Territories 1 Introduction 1.1 Code Architecture 1.2 Running the code within this repository", " lakeSR: Compiled Satellite Surface Reflectance and Surface Temperature for Lakes in the United States and US Territories ROSSyndicate 2024-11-20 1 Introduction This bookdown document (Xie 2016) explains the methodology we use in the acquisition and compilation of satellite surface reflectance and surface temperature data for all lakes greater than 1 hectacre in the United States and US Territories. This product, “lakeSR”, is a component of the AquaSat (v2) suite, an effort to create a database of lake and river water quality observations alongside remote sensing data. Currently, lakeSR is comprised of the historical Landsat record from 1984 until mid-2024, comprised of data from the following missions: Landsat 4 Thematic Mapper (TM) Landsat 5 TM Landsat 7 Enhanced Thematic Mapper Plus (ETM+) Landsat 8 Operational Land Imager/Thermal Infrared Sensor (OLI/TIRS) Landsat 9 OLI/TIRS Together the Landsat archive of lakeSR is referred to as “lakeSR-LS_C2_SRST” (Landsat Collection 2 Surface Reflectance and Surface Temperature). There will be additional satellite data incorporated into the lakeSR product in the future. lakeSR acquires tabular data summaries of satellite-derived surface reflectance and surface temperature data at central locations within a lake and at locations identified with monitoring records from the Water Quality Portal from the AquaMatch component of AquaSat. 1.1 Code Architecture lakeSR is built on the {targets} workflow management system for R (Landau 2021). The {targets} architecture is based on lists of functions performed in a specific order, each function called a target. The primary benefit of {targets} workflows is that code is only run if a target, a target’s code, or a target’s dependencies have changed (or become “outdated” in {targets} speak). lakeSR is broken down into functional groups of targets, listed below with a brief summary about what task(s) each group completes. a_Calculate_Centers: This {targets} list calculates “Pole of Inaccessibility” (POI) for all lakes, ponds, reservoirs, and playas greater than 1 hectare in surface area using the NHDPlusHR polygons using the {nhdplusTools} package and the poi() function in the {polylabelr} package. For all waterbodies in Alaska, POI were calculated based on the NHD Best Resolution file for the entire state because the NHDPlusHR is not complete for AK. Note: this group of targets will take up to 4h to complete. See Section 2 for additional background and detailed methodology. b_pull_Landsat_SRST_poi: This {targets} group uses the config file config_files/config_poi.yml and the “Pole of Inaccessibility” points created in the a_Calculate_Centers group to pull Landsat Collection 2 Surface Reflectance and Surface Temperature using the GEE API. In this group, we use the most strict LS4-7 pixel filters which include the sr_cloud_mask filter. This filter is a conservative filter, removing artefacts from upstream products that are used to create the SR product. This group of targets ends with a branched target that maps over each of the WRS2 path rows that intersect with the points. Note: this group of targets takes a very, very long time, averaging about 1 hour per path-row branch. There are just under 800 path rows executed in this branch. See Section ?? for additional background and detailed methodology. 1.2 Running the code within this repository If you have followed all of the set up instructions, including those outlined in Section 3, the code within this repository can be triggered by running the run_targets.Rmd file with the R Project file AquaMatch_lakeSR.rproj open in your RStudio console. Citations Landau, William Michael. 2021. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959. Xie, Yihui. 2016. Bookdown: Authoring Books and Technical Documents with r Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/bookdown. "],["locs-data-acq.html", "2 Locations of Data Acquisition 2.1 Changes from AquaSat v1 2.2 Pole of Inaccessibility 2.3 Lakes included in lakeSR 2.4 Implementation 2.5 Comparison of POI and DP calculations", " 2 Locations of Data Acquisition As noted in the Introduction (Section 1), for the purposes of AquaSat, surface reflectance and surface temperature data are acquired at specific, centrally-located points within waterbodies (typically in pelagic locations of lakes) and at locations where there are in situ data. The data acquired at locations where there are in situ data are acquired to create location-specific algorithms using the AquaMatch database, which can then be applied to the data collected over the centrally-located point across all waterbodies in the lakeSR database. lakeSR does not acquire nor summarize data over the entire waterbody’s surface, as it is computationally impractical for most large lakes that cross multiple satellite path-rows or tiles. We are planning to investigate the variability differences in acquiring data over varying buffer distances to support this decision (GitHub Issue #14). At this time, the buffer used is a 120m radius of any given data acquisition location. 2.1 Changes from AquaSat v1 Some changes in lake polygon and center point have been made in modernizing and scaling from the original AquaSat. The lake center aspect of AquaSat v1 was built upon HydroLakes ((Messager et al. 2016)), a global database of lakes greater than 10 hectares accounting for 1.4 million waterbodies and a a total surface area of 2.67 million km² worldwide. While this dataset of lakes represents ~55% of the worldwide surface area of lakes greater than 1 hecare, it is only a sliver of the estimated 27 million waterbodies in the world of that size ((Verpoorter et al. 2014)). AquaSat v2 uses the USGS’s National Hydrography products which map the surface waters of the United States. The USGS National Hydrography products contain smaller waterbodies and higher resolution polygons than the HydroLakes shapes, which makes it computationally impossible to use the Chebyshev Center (“deepest point”) calculation used in AquaSat v1 due to the number of vertices in each polygon. To replace this important step in this update, we employ the concept of “pole of inaccessibility” (POI) (Stefansson 1920), which handles complex polygons in the R environment with minimal computational investment. 2.2 Pole of Inaccessibility The concept of POI is used to define the geographic center of a circle with the largest circumference within any complex polygon. The foundational principle is used widely to describe the arctic pole of inaccessiblity, that is the point in the northern arctic circle that is the furthest from land, but has also been used to describe the geographic center of landmasses (Garcia-Castellanos and Lombardo 2007). For lakeSR, we use POI to determine the point in a lake that is furthest from the shoreline using the polylabelr::poi() function (Larsson 2020), which calculates a point in space and the radius of the circle used to define the POI. 2.3 Lakes included in lakeSR HUC4s figure https://d9-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/thumbnails/image/WBD_SubRegions_24x18.png For lakeSR, we use the NHDPlusHR dataset for lakes within the conterminous US and US Territories using the nhdplusTools::download_nhdplushr() function (Blodgett and Johnson 2023). All HUC4s were downloaded and processed on NA using the most updated version available at the time of download. Because the NHDPlusHR dataset is incomplete for Alaska (Figure 2.1), we used the NHD Best Resolution File for the state of AK (US Geological Survey, n.d.). Figure 2.1: NHDPlusHR dataset availability, courtesy of the USGS. For every HUC4 included in the NHDPlusV2 dataset and the state of Alaska NHD Best Resolution dataset, all waterbodies are limited to those with FCodes belonging to the following groups: 390 (lake/pond), 436 (reservoir), and 361 (playa) and are at least 0.01 km2 (1 hectare) in area according to the area value provided in the NHD file. This filtering resulted in 730,252 waterbodies included in our dataset, including 313,499 non-CONUS waterbodies. This is a 1186 percent increase over the 56,792 lakes included in the original AquaSat product. For each waterbody, the POI and distance-to-shore radius was calculated using the polylabelr::poi() function. In order to accurately calculate distance-to-shore, each waterbody was converted to the proper Universal Transverse Mercator (UTM) projection calculated from the mean longitudinal value of the polygon vertices prior to applying the poi() function. By using the point-local UTM projection, we decrease distortion expected from any single CRS used to represent all of the locations from which we have lakes. The latitude and longitude values of the POI were transformed to decimal degrees in World Geodetic System 1984 (WGS84) (EPSG:4326) from UTM easting and northing coordinates for use later in the workflow. It is important to note that the poi() function does not perform particularly well on larger polygons, however the points calculated should be an acceptable proxy for pelagic lake conditions. [[Will add additional detail from analysis of buffer sizes.]] 2.4 Implementation The code for gathering NHD waterbodies and calculating their respective POIs is found in {targets} group a_Calculate_Centers which is located in the script a_Calculate_Centers.R. The network graph (Figure ??) for this group depicts the dependencies between each of the targets in this group. On a high level, the processing begins by acquiring the polygons of all US states and territories using the {tigris} package (Walker 2023) (US_state_territories). These polygons are used to acquire a list HUC4s that intersect with each municipal boundary using the nhdplusTools::get_huc() function (HUC4_dataframe), which are then reduced to distinct HUC4’s and transformed into a vector of HUC4s (HUC4_list). As an error-handling measure, empty_hucs_file is created (not pictured in Figure ??) to collect a list of HUC4s that do not have high resolution files available for download (Figure 2.1). The target all_poi_points is created by calculating POIs for all waterbodies &gt; 1 hectare and having an FCode of 390, 436, or 361 from each HUC4 in the HUC4_list. For this target, we use the dynamic branching feature to iterate over each item in the HUC4_list. See the script calculate_centers_HUC4.R for details on the function applied in this target. The output of the all_poi_points target include multiple .csv files - these files are collated in the target all_poi_points, which outputs a .feather file (tracked as NHDHR_poi_points) containing all the POIs resulting from the NHDPlusHR polygon files. 2.5 Comparison of POI and DP calculations This is a different center computation from AquaSatv1 - original was based on HydroLakes, which only encompassed xxx lakes, whereas lakeSR and the NHD integration touches yyy lakes. Because the geometries of these lakes are significantly more complex, the DP calculation done in ASv1 can not be made on NHD polygons unless they are simplified, losing the benefit of the NHD resolution encompassing 1ha lakes. Show a few examples of DP from LimnoSat with hydrolake boundary, nhd boundary, POI calculations. ## Simple feature collection with 10581 features and 4 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -92.88343 ymin: 42.49517 xmax: -86.85592 ymax: 47.00643 ## Geodetic CRS: WGS 84 ## # A tibble: 10,581 × 5 ## r_id poi_dist_m nhd_source nhd_id geometry ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;POINT [°]&gt; ## 1 0706_10 44.6 NHDPlusv2 13206564 (-91.2315 43.53854) ## 2 0706_16 95.3 NHDPlusv2 120051023 (-91.2135 43.52227) ## 3 0706_17 52.4 NHDPlusv2 120051024 (-91.21655 43.52216) ## 4 0706_46 95.7 NHDPlusv2 13206546 (-91.23078 43.55166) ## 5 0706_52 73.0 NHDPlusv2 13206560 (-91.2331 43.54233) ## 6 0706_64 179. NHDPlusv2 13209622 (-91.21977 43.4488) ## 7 0706_77 38.9 NHDPlusv2 13209668 (-91.1957 43.41643) ## 8 0706_133 115. NHDPlusv2 13637919 (-91.19231 43.39008) ## 9 0706_134 54.1 NHDPlusv2 13637923 (-91.19187 43.38697) ## 10 0706_135 34.9 NHDPlusv2 13637925 (-91.18961 43.38386) ## # ℹ 10,571 more rows Citations Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Messager, Mathis Loïc, Bernhard Lehner, Günther Grill, Irena Nedeva, and Oliver Schmitt. 2016. “Estimating the Volume and Age of Water Stored in Global Lakes Using a Geo-Statistical Approach.” Nature Communications 7 (1): 13603. https://doi.org/10.1038/ncomms13603. Stefansson, Vilhjalmur. 1920. “The Region of Maximum Inaccessibility in the Arctic.” Geographical Review 10 (3): 167–72. https://doi.org/10.2307/207749. US Geological Survey. n.d. “USGS National Hydrography Dataset Best Resolution (NHD) - Alaska (Published 20230506) GeoPackage.” Verpoorter, Charles, Tiit Kutser, David A. Seekell, and Lars J. Tranvik. 2014. “A Global Inventory of Lakes Based on High-Resolution Satellite Imagery.” Geophysical Research Letters 41 (18): 6396–6402. https://doi.org/10.1002/2014GL060641. Walker, Kyle. 2023. Tigris: Load Census TIGER/Line Shapefiles. https://CRAN.R-project.org/package=tigris. "],["software-settings.html", "3 Satellite Data Acquisition Software and Settings 3.1 {reticulate} Conda Environment 3.2 Google Earth Engine Setup", " 3 Satellite Data Acquisition Software and Settings Currently, all satellite data in AquaSat are obtained using the Python API for Google Earth Engine (GEE) (Gorelick et al. 2017). While the orchestration of data acquisition is performed by {targets}, a workflow management program for R, all code directly related to GEE data acquisition is written in Python. 3.1 {reticulate} Conda Environment RStudio (Posit team 2023) is an IDE that, alongside the {reticulate} package (Ushey, Allaire, and Tang 2023), facilitates integration of R and Python code within the same environment. In lakeSR, we use a singular R script to set up a {reticulate} Conda environment that is invoked at the beginning of a {targets} run (lines 8-12 of the _targets.R file) to be sure that our Python code runs consistently. Python and python modules and versions used in **lakeSR**. Note, later versions of earthengine-api will require the use of ‘ee.Authenticate()’ in python instead of ‘earthengine authenticate’ at the command line. The following two chunks of code should work, as long as the environment is set up using the pySetup.R file: Software/Py Module version citation Python 3.8.18 Python Software Foundation, www.python.org earthengine-api 0.1.374 (Gorelick 2023) pandas 2.0.3 (The pandas development team 2023) fiona 1.9.5 (Gillies 2023) pyreadr 0.5.0 (Fajardo 2023) pyarrow 13.0.0 (Apache Arrow Developers 2023) 3.2 Google Earth Engine Setup 3.2.1 Create a GEE account Creation of a GEE is easy and free. Click ‘Get Started’ at the far right side of the earthengine.google.com webpage to create an account: 3.2.2 gcloud CLI This workflow requires the installation and initiation of gcloud CLI, a command-line tool set for accessing Google Cloud Resources. All settings for lakeSR are default gcloud configurations using a singular GEE project. 3.2.3 GEE Authentication Once gcloud is installed and initialized and the Conda environment is set up, you can authenticate your GEE instance. For this workflow, this is completed in the terminal and manually authenticating within the browser. See the run_targets.Rmd file for directions to complete this task. 3.2.4 GEE project setting lakeSR is run in a specific GEE project associated with our authenticated account. If you wish to re-run this code as written, you will not have proper access because the code refers to our specific GEE project (each of the yaml files in the config_files folder point to this within the ee_proj setting. You will need to update this with your desired GEE project. If you are new to GEE, go to code.earthengine.google.com and enter the project name listed in the top right hand corner of your screen: Alternatively, you can create an GEE project for this task in the dropdown menu accessed by clicking on the icon to the right of the highlighted box in the figure above. This workflow will not run without specifying an Earth Engine Project that is managed by the Google Account you authenticate this run with. Citations Apache Arrow Developers. 2023. Pyarrow: Python Library for Apache Arrow. https://github.com/apache/arrow. Fajardo, Otto. 2023. Pyreadr: Reads/Writes r RData and Rds Files into/from Pandas Data Frames. https://github.com/ofajardo/pyreadr. Gillies, Sean. 2023. Fiona: Read and Write Spatial Data Files. Gorelick, N. 2023. Earthengine-Api: Earth Engine Python API. Google. https://github.com/google/earthengine-api. Gorelick, N, M Hancher, M Dixon, S Ilyushchenko, D Thau, and R Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031. Posit team. 2023. RStudio: Integrated Development Environment for r. Boston, MA: Posit Software, PBC. http://www.posit.co/. The pandas development team. 2023. Pandas-Dev/Pandas: Pandas. Zenodo. https://doi.org/10.5281/zenodo.8092754. Ushey, Kevin, J. J. Allaire, and Yuan Tang. 2023. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. "],["citations.html", "4 Citations", " 4 Citations Apache Arrow Developers. 2023. Pyarrow: Python Library for Apache Arrow. https://github.com/apache/arrow. Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Fajardo, Otto. 2023. Pyreadr: Reads/Writes r RData and Rds Files into/from Pandas Data Frames. https://github.com/ofajardo/pyreadr. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Gillies, Sean. 2023. Fiona: Read and Write Spatial Data Files. Gorelick, N. 2023. Earthengine-Api: Earth Engine Python API. Google. https://github.com/google/earthengine-api. Gorelick, N, M Hancher, M Dixon, S Ilyushchenko, D Thau, and R Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031. Landau, William Michael. 2021. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Messager, Mathis Loïc, Bernhard Lehner, Günther Grill, Irena Nedeva, and Oliver Schmitt. 2016. “Estimating the Volume and Age of Water Stored in Global Lakes Using a Geo-Statistical Approach.” Nature Communications 7 (1): 13603. https://doi.org/10.1038/ncomms13603. Posit team. 2023. RStudio: Integrated Development Environment for r. Boston, MA: Posit Software, PBC. http://www.posit.co/. Stefansson, Vilhjalmur. 1920. “The Region of Maximum Inaccessibility in the Arctic.” Geographical Review 10 (3): 167–72. https://doi.org/10.2307/207749. The pandas development team. 2023. Pandas-Dev/Pandas: Pandas. Zenodo. https://doi.org/10.5281/zenodo.8092754. US Geological Survey. n.d. “USGS National Hydrography Dataset Best Resolution (NHD) - Alaska (Published 20230506) GeoPackage.” Ushey, Kevin, J. J. Allaire, and Yuan Tang. 2023. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. Verpoorter, Charles, Tiit Kutser, David A. Seekell, and Lars J. Tranvik. 2014. “A Global Inventory of Lakes Based on High-Resolution Satellite Imagery.” Geophysical Research Letters 41 (18): 6396–6402. https://doi.org/10.1002/2014GL060641. Walker, Kyle. 2023. Tigris: Load Census TIGER/Line Shapefiles. https://CRAN.R-project.org/package=tigris. Xie, Yihui. 2016. Bookdown: Authoring Books and Technical Documents with r Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/bookdown. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
