[["introduction.html", "lakeSR: Compiled Satellite Surface Reflectance and Surface Temperature for Lakes in the United States and US Territories 1 Introduction 1.1 Code Architecture", " lakeSR: Compiled Satellite Surface Reflectance and Surface Temperature for Lakes in the United States and US Territories ROSSyndicate 2024-12-13 1 Introduction This bookdown document (Xie 2016) explains the methodology we use in the acquisition and compilation of satellite surface reflectance and surface temperature data for all lakes greater than 1 hectacre in the United States and US Territories. This product, lakeSR, is a component of the AquaSat suite, an effort to create a database of lake and river water quality observations alongside remote sensing data. This is an update to the original AquaSat (Ross et al. 2019), the foundational effort towards making satellite and in situ water quality data accessible for freshwater monitoring. Currently, lakeSR is comprised of the historical Landsat record from 1984 until late 2024, comprised of data from the following missions: Landsat 4 Thematic Mapper (TM) Landsat 5 TM Landsat 7 Enhanced Thematic Mapper Plus (ETM+) Landsat 8 Operational Land Imager/Thermal Infrared Sensor (OLI/TIRS) Landsat 9 OLI/TIRS There will be additional satellite data incorporated into the lakeSR product in the future. lakeSR acquires tabular data summaries of satellite-derived surface reflectance and surface temperature data at central locations within a lake. The sibling product to this is siteSR, which acquires the same data at locations identified with monitoring records from the Water Quality Portal from the AquaMatch component of AquaSat. 1.1 Code Architecture lakeSR is built on the {targets} workflow management system for R (Landau 2021). The {targets} architecture is based on lists of functions performed in a specific order, each function called a target. The primary benefit of {targets} workflows is that code is only run if a target, a target’s code, or a target’s dependencies have changed (or become “outdated” in {targets} speak). lakeSR is broken down into groups of targets that perform specific tasks, listed below with a brief summary about what task(s) each group completes. This particular workflow incorporates both R and Python programming languages to complete these tasks. a_Calculate_Centers: This {targets} list calculates “Pole of Inaccessibility” (POI) (Garcia-Castellanos and Lombardo 2007) for all non-intermittent lakes, ponds, and reservoirs greater than 1 hectare in surface area and intermittent lakes, ponds, and reservoirs greater than 4 hectares using the NHDPlusV2 polygons using the {nhdplusTools} package (Blodgett and Johnson 2023) and the poi() function in the {polylabelr} package (Larsson 2020). For all waterbodies outside of CONUS, POI were calculated based on the NHD Best Resolution file for the entire state or territory. See Section 2 for additional background and detailed methodology. b_pull_Landsat_SRST_poi: This {targets} group uses the configuration file b_pull_Landsat_SRST_poi/config_files/config_poi.yml and the “Pole of Inaccessibility” points created in the a_Calculate_Centers group to pull Landsat Collection 2 Surface Reflectance and Surface Temperature using the Google Earth Engine (GEE) API. In this group, we use the most conservative LS4-7 pixel filters, as we are applying these settings across such a large continuum of time and space. This group ends with a branched target that sends tasks to Google Earth engine by mapping over WRS2 path rows that intersect with the points created in a_Calculate_Centers. Note: this group of targets takes a very, very long time, averaging about 1 hour per path-row branch. There are just under 800 path rows executed in this branch. References Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Landau, William Michael. 2021. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Ross, Matthew R. V., Simon N. Topp, Alison P. Appling, Xiao Yang, Catherine Kuhn, David Butman, Marc Simard, and Tamlin M. Pavelsky. 2019. “AquaSat: A Data Set to Enable Remote Sensing of Water Quality for Inland Waters.” Water Resources Research 55 (11): 10012–25. https://doi.org/10.1029/2019WR024883. Xie, Yihui. 2016. Bookdown: Authoring Books and Technical Documents with r Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/bookdown. "],["locs-data-acq.html", "2 Locations of Data Acquisition 2.1 Changes from AquaSat v1 2.2 Pole of Inaccessibility 2.3 Waterbodies in AquaMatch-lakeSR 2.4 Technical Implementation 2.5 Case Study: Wisconsin Waterbodies", " 2 Locations of Data Acquisition As noted in the Introduction (Section 1), for the purposes of AquaSat, surface reflectance and surface temperature data are acquired at specific, centrally-located points within waterbodies (typically in pelagic locations of lakes, lakeSR) and at locations where there are in situ data (siteSR). The data acquired at locations where there are in situ data are meant to create location-specific algorithms using the AquaMatch database, which can then be applied to the data collected over the centrally-located point across all waterbodies in the lakeSR database. lakeSR does not acquire nor summarize data over the entire waterbody’s surface, as it is computationally impractical for most large lakes, especially those that cross multiple satellite path-rows or tiles. For both lakeSR and siteSR, we summarize the Landsat data within a 120m radius of a defined location. 2.1 Changes from AquaSat v1 Some changes in lake polygon and center point have been made in modernizing and scaling from the original AquaSat. The lake center aspect called “deepest point” of AquaSat v1 was built upon HydroLakes (Messager et al. 2016), a global database of lakes greater than 10 hectares accounting for 1.4 million waterbodies and a total surface area of 2.67 million km² worldwide. While this dataset of lakes represents ~55% of the worldwide surface area of lakes greater than 1 hectare, it is only a sliver of the estimated 27 million waterbodies in the world (Verpoorter et al. 2014). AquaSat v2 uses the USGS’s National Hydrography products which map the surface waters of the United States, and allows for reduction in minimum size of waterbody and an increase in coverage of freshwater systems across the United States and permanently inhabited territories. 2.2 Pole of Inaccessibility The USGS National Hydrography products contain smaller waterbodies and higher resolution polygons than the HydroLakes shapes, which makes it computationally impossible to use the Chebyshev Center (“deepest point”, Yang (2020)) calculation used in AquaSat v1 due to the number of vertices in each polygon. To replace this important step in the update, we employ the concept of “pole of inaccessibility” (POI) (Stefansson 1920), which can handle complex polygons in the R environment with minimal computational investment. The concept of POI is used to define the geographic center of a circle with the largest circumference within any complex polygon. The foundational principle is used widely to describe the arctic pole of inaccessiblity, that is the point in the northern arctic circle that is the furthest from land, but has also been used to describe the geographic center of landmasses (Garcia-Castellanos and Lombardo 2007). For lakeSR, we use POI to determine the point in a waterbody that is furthest from the shoreline using the polylabelr::poi() function (Larsson 2020), which calculates a point in space and the radius of the circle used to define the POI. 2.3 Waterbodies in AquaMatch-lakeSR For lakeSR, we use the NHDPlusV2 dataset for lakes within the conterminous US and US Territories using the {nhdplusTools} R package (Blodgett and Johnson 2023) and the NHD Best Resolution (US Geological Survey, n.d.) data through The National Map. All HUC4s were downloaded and processed in November 2024 using the most updated version available at the time of download. Figure 2.1: NHD HUC4 map for the United States and Territories, courtesy of the USGS. For every HUC4 in the United States and Territories (Figure 2.1), all waterbodies are limited to those with NHD Waterbody Subtypes belonging to the following groups: 390 (lake/pond) and 436 (reservoir) and are at least 0.01 km2 (1 hectare) in area according to the area value provided in the NHD file. If the feature type (FType) of the waterbody belonged to an intermittent category (39001, 39005, 39006, 43614) the threshold for inclusion was increased to 0.04 km2 (4 hectares) to reduce processing time when extracting data from Google Earth Engine. This filtering resulted in 729,941 waterbodies included in our dataset, including 313,248 non-CONUS waterbodies. This is a 1,185 percent increase over the 56,792 lakes included in the original AquaSat product. For each waterbody, the POI and distance-to-shore radius was calculated using the polylabelr::poi() function. It is important to note that the poi() function can sometimes attribute a POI to a location other than the point furthest away from a shoreline. This occurs in polygons with a very large number of indices (due to sheer area or geomorphological complexity); however the points calculated should be an acceptable proxy for pelagic lake conditions. 2.4 Technical Implementation The code for gathering NHD waterbodies and calculating their respective POIs is found in {targets} group a_Calculate_Centers which is located in the script a_Calculate_Centers.R at the root directory of the repository. The processing begins by acquiring the polygons of all US states and territories using the {tigris} package (Walker 2023). These polygons are used to acquire a list HUC4s that intersect with each municipal boundary using the nhdplusTools::get_huc() function, which are then reduced to distinct HUC4’s and transformed into a vector of HUC4s. HUC4s are then split into CONUS (HUC4 &lt; 1900) and non-CONUS (HUC4 ≥ 1900) groups. To efficiently calculate the POI across hundreds of HUC4s, we use the dynamic branching feature to iterate over each HUC4. For each HUC4, the NHDPlusV2 (CONUS) or NHD Best Resolution (non CONUS) waterbodies are acquired and filtered for lake/ponds and reservoirs of at least 1 hectare in area or 4 hectares for intermittent lake/ponds or reservoirs. In order to accurately calculate distance-to-shore when using the polylabelr::poi() function as described in Section 2.3, each waterbody was converted to the proper Universal Transverse Mercator (UTM) projection calculated from the mean longitudinal value of the polygon vertices prior to applying the poi() function. By using the point-local UTM projection, we decrease distortion expected from any single CRS used to represent all of the locations from which we have lakes. The latitude and longitude values of the POI were transformed to decimal degrees in World Geodetic System 1984 (WGS84, EPSG:4326) from UTM easting and northing coordinates for use later in the workflow. To increase computational efficiency, we allow for multicore processing and the use of targets::crew_controller_local() function within this workflow. This reduces processing time substantially as processing thousands of polygons is quite time consuming. If you are running this workflow on your own computer, the length of time that it takes to calculate POIs will be dependent on the number of cores you allow for processing (we used 11 cores during the development of this workflow and it takes on the order of tens of minutes). 2.5 Case Study: Wisconsin Waterbodies The state of Wisconsin contains more than 15,000 freshwater lakes. AquaSat v1 contained just 2,694 waterbodies within Wisconsin (Figure 2.2), whereas the our update includes 10,574 (Figure 2.3) - accounting for a majority of the state’s freshwater water bodies. Figure 2.2: Deepest point of Wisconsin lakes included in AquaSat v1, defined by the Hydrolakes data product. Deepest point for each lake is indicated with a black dot. Figure 2.3: Point of inaccessibility for Wisconsin lakes included in AquaSat v2, defined by the NHDPlusV2 data product. Point of inaccessibility for each lake is indicated with a black dot. References Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Messager, Mathis Loïc, Bernhard Lehner, Günther Grill, Irena Nedeva, and Oliver Schmitt. 2016. “Estimating the Volume and Age of Water Stored in Global Lakes Using a Geo-Statistical Approach.” Nature Communications 7 (1): 13603. https://doi.org/10.1038/ncomms13603. Stefansson, Vilhjalmur. 1920. “The Region of Maximum Inaccessibility in the Arctic.” Geographical Review 10 (3): 167–72. https://doi.org/10.2307/207749. US Geological Survey. n.d. “USGS National Hydrography Dataset Best Resolution (NHD) - Alaska (Published 20230506) GeoPackage.” Verpoorter, Charles, Tiit Kutser, David A. Seekell, and Lars J. Tranvik. 2014. “A Global Inventory of Lakes Based on High-Resolution Satellite Imagery.” Geophysical Research Letters 41 (18): 6396–6402. https://doi.org/10.1002/2014GL060641. Walker, Kyle. 2023. Tigris: Load Census TIGER/Line Shapefiles. https://CRAN.R-project.org/package=tigris. Yang, Xiao. 2020. Deepest Point Calculation for Any Given Polygon Using Google Earth Engine JavaScript API. Zenodo. https://doi.org/10.5281/zenodo.6341960. "],["software-settings.html", "3 Satellite Data Acquisition Software and Settings 3.1 {reticulate} Conda Environment 3.2 Google Earth Engine Setup", " 3 Satellite Data Acquisition Software and Settings Currently, all satellite data in AquaSat are obtained using the Python API for Google Earth Engine (GEE) (Gorelick et al. 2017). While the orchestration of data acquisition is performed by {targets}, a workflow management program for R, all code directly related to GEE data acquisition is written in Python. 3.1 {reticulate} Conda Environment RStudio (Posit team 2023) is an IDE that, alongside the {reticulate} package (Ushey, Allaire, and Tang 2023), facilitates integration of R and Python code within the same environment. In lakeSR, we use a singular R script to set up a {reticulate} Conda environment that is invoked at the beginning of a {targets} run (lines 8-12 of the _targets.R file) to be sure that our Python code runs consistently. Python and python module Software/Py Module version citation Python 3.10.13 Python Software Foundation, www.python.org earthengine-api 1.4.0 Gorelick (2023) pandas 2.0.3 The pandas development team (2023) pyreadr 0.5.2 Fajardo (2023) PyYAML 6.0.2 The PyYAML Project, https://github.com/yaml/pyyaml numpy 1.24.4 Harris et al. (2020) The script run_targets.Rmd includes the steps to create this environment and authenticate your GEE user. These steps should be run prior to running the pipeline to assure a smooth run of the workflow. 3.2 Google Earth Engine Setup 3.2.1 Create a GEE account Creation of a GEE is easy and free. Click ‘Get Started’ at the far right side of the earthengine.google.com webpage to create an account: 3.2.2 gcloud CLI This workflow requires the installation and initiation of gcloud CLI, a command-line tool set for accessing Google Cloud Resources. All settings for lakeSR and siteSR are default gcloud configurations using a singular GEE project. 3.2.3 GEE Authentication Once gcloud is installed and initialized and the Conda environment is set up, you can authenticate your GEE instance. For this workflow, this is completed in the run_targets.Rmd script at the root directory. This script provides explicit directions to complete this task before running the pipeline. 3.2.4 GEE project setting lakeSR is run in a specific GEE project associated with our authenticated account. If you wish to re-run this code as written, you will not have proper access because the code refers to our specific GEE project. You will need to update the config yaml (b_pull_Landsat_SRST_poi/config_files/config_poi.yml) with your Google credentials and GEE project in order to run this locally. A blank yml file (b_pull_Landsat_SRST_poi/config_files/config.yml) is provided for further customization. If you are new to GEE, go to code.earthengine.google.com and enter the project name listed in the top right hand corner of your screen: Alternatively, you can create an GEE project for this task in the dropdown menu accessed by clicking on the icon to the right of the highlighted box in the figure above. This workflow will not run without specifying an Earth Engine Project that is managed by the Google Account you authenticate this run with. References Fajardo, Otto. 2023. Pyreadr: Reads/Writes r RData and Rds Files into/from Pandas Data Frames. https://github.com/ofajardo/pyreadr. Gorelick, N. 2023. Earthengine-Api: Earth Engine Python API. Google. https://github.com/google/earthengine-api. Gorelick, N, M Hancher, M Dixon, S Ilyushchenko, D Thau, and R Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031. Harris, Charles R., K. Jarrod Millman, Stéfan J. van der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, et al. 2020. “Array Programming with NumPy.” Nature 585 (7825): 357–62. https://doi.org/10.1038/s41586-020-2649-2. Posit team. 2023. RStudio: Integrated Development Environment for r. Boston, MA: Posit Software, PBC. http://www.posit.co/. The pandas development team. 2023. Pandas-Dev/Pandas: Pandas. Zenodo. https://doi.org/10.5281/zenodo.8092754. Ushey, Kevin, J. J. Allaire, and Yuan Tang. 2023. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. "],["references.html", "4 References", " 4 References Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Fajardo, Otto. 2023. Pyreadr: Reads/Writes r RData and Rds Files into/from Pandas Data Frames. https://github.com/ofajardo/pyreadr. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Gorelick, N. 2023. Earthengine-Api: Earth Engine Python API. Google. https://github.com/google/earthengine-api. Gorelick, N, M Hancher, M Dixon, S Ilyushchenko, D Thau, and R Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031. Harris, Charles R., K. Jarrod Millman, Stéfan J. van der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, et al. 2020. “Array Programming with NumPy.” Nature 585 (7825): 357–62. https://doi.org/10.1038/s41586-020-2649-2. Landau, William Michael. 2021. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Messager, Mathis Loïc, Bernhard Lehner, Günther Grill, Irena Nedeva, and Oliver Schmitt. 2016. “Estimating the Volume and Age of Water Stored in Global Lakes Using a Geo-Statistical Approach.” Nature Communications 7 (1): 13603. https://doi.org/10.1038/ncomms13603. Posit team. 2023. RStudio: Integrated Development Environment for r. Boston, MA: Posit Software, PBC. http://www.posit.co/. Ross, Matthew R. V., Simon N. Topp, Alison P. Appling, Xiao Yang, Catherine Kuhn, David Butman, Marc Simard, and Tamlin M. Pavelsky. 2019. “AquaSat: A Data Set to Enable Remote Sensing of Water Quality for Inland Waters.” Water Resources Research 55 (11): 10012–25. https://doi.org/10.1029/2019WR024883. Stefansson, Vilhjalmur. 1920. “The Region of Maximum Inaccessibility in the Arctic.” Geographical Review 10 (3): 167–72. https://doi.org/10.2307/207749. The pandas development team. 2023. Pandas-Dev/Pandas: Pandas. Zenodo. https://doi.org/10.5281/zenodo.8092754. US Geological Survey. n.d. “USGS National Hydrography Dataset Best Resolution (NHD) - Alaska (Published 20230506) GeoPackage.” Ushey, Kevin, J. J. Allaire, and Yuan Tang. 2023. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. Verpoorter, Charles, Tiit Kutser, David A. Seekell, and Lars J. Tranvik. 2014. “A Global Inventory of Lakes Based on High-Resolution Satellite Imagery.” Geophysical Research Letters 41 (18): 6396–6402. https://doi.org/10.1002/2014GL060641. Walker, Kyle. 2023. Tigris: Load Census TIGER/Line Shapefiles. https://CRAN.R-project.org/package=tigris. Xie, Yihui. 2016. Bookdown: Authoring Books and Technical Documents with r Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/bookdown. Yang, Xiao. 2020. Deepest Point Calculation for Any Given Polygon Using Google Earth Engine JavaScript API. Zenodo. https://doi.org/10.5281/zenodo.6341960. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
