[["introduction.html", "lakeSR: Compiled Satellite Surface Reflectance and Surface Temperature for Lakes in the United States and US Territories 1 Introduction 1.1 Code Architecture", " lakeSR: Compiled Satellite Surface Reflectance and Surface Temperature for Lakes in the United States and US Territories ROSSyndicate 2024-12-17 1 Introduction This bookdown document (Xie 2016) explains the methodology we use in the acquisition and compilation of satellite surface reflectance and surface temperature data for all lakes greater than 1 hectacre in the United States and US Territories. This product, lakeSR, is a component of the AquaSat suite, an effort to create a database of lake and river water quality observations alongside remote sensing data. This is an update to the original AquaSat (Ross et al. 2019), the foundational effort towards making satellite and in situ water quality data accessible for freshwater monitoring. Currently, lakeSR is comprised of the historical Landsat record from 1984 until late 2024, comprised of data from the following missions: Landsat 4 Thematic Mapper (TM) Landsat 5 TM Landsat 7 Enhanced Thematic Mapper Plus (ETM+) Landsat 8 Operational Land Imager/Thermal Infrared Sensor (OLI/TIRS) Landsat 9 OLI/TIRS There will be additional satellite data incorporated into the lakeSR product in the future. lakeSR acquires tabular data summaries of satellite-derived surface reflectance and surface temperature data at central locations within a lake. The sibling product to this is siteSR, which acquires the same data at locations identified with monitoring records from the Water Quality Portal from the AquaMatch component of AquaSat. 1.1 Code Architecture lakeSR is built on the {targets} workflow management system for R (Landau 2021). The {targets} architecture is based on lists of functions performed in a specific order, each function called a target. The primary benefit of {targets} workflows is that code is only run if a target, a target’s code, or a target’s dependencies have changed (or become “outdated” in {targets} speak). lakeSR is broken down into groups of targets that perform specific tasks, listed below with a brief summary about what task(s) each group completes. This particular workflow incorporates both R and Python programming languages to complete these tasks. a_Calculate_Centers: This {targets} list calculates “Pole of Inaccessibility” (POI) (Garcia-Castellanos and Lombardo 2007) for all non-intermittent lakes, ponds, and reservoirs greater than 1 hectare in surface area and intermittent lakes, ponds, and reservoirs greater than 4 hectares using the NHDPlusV2 polygons using the {nhdplusTools} package (Blodgett and Johnson 2023) and the poi() function in the {polylabelr} package (Larsson 2020). For all waterbodies outside of CONUS, POI were calculated based on the NHD Best Resolution file for the entire state or territory. See Section 2 for additional background and detailed methodology. b_pull_Landsat_SRST_poi: This {targets} group uses the configuration file b_pull_Landsat_SRST_poi/config_files/config_poi.yml and the “Pole of Inaccessibility” points created in the a_Calculate_Centers group to pull Landsat Collection 2 Surface Reflectance and Surface Temperature using the Google Earth Engine (GEE) API. In this group, we use the most conservative LS4-7 pixel filters, as we are applying these settings across such a large continuum of time and space. This group ends with a branched target that sends tasks to Google Earth engine by mapping over WRS2 path rows that intersect with the points created in a_Calculate_Centers. Note: this group of targets takes a very, very long time, averaging about 1 hour per path-row branch. There are just under 800 path rows executed in this branch. References Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Landau, William Michael. 2021. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Ross, Matthew R. V., Simon N. Topp, Alison P. Appling, Xiao Yang, Catherine Kuhn, David Butman, Marc Simard, and Tamlin M. Pavelsky. 2019. “AquaSat: A Data Set to Enable Remote Sensing of Water Quality for Inland Waters.” Water Resources Research 55 (11): 10012–25. https://doi.org/10.1029/2019WR024883. Xie, Yihui. 2016. Bookdown: Authoring Books and Technical Documents with r Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/bookdown. "],["locs-data-acq.html", "2 Locations of Data Acquisition 2.1 Changes from AquaSat v1 2.2 Pole of Inaccessibility 2.3 Waterbodies in AquaMatch-lakeSR 2.4 Technical Implementation 2.5 Case Study: Wisconsin Waterbodies", " 2 Locations of Data Acquisition As noted in the Introduction (Section 1), for the purposes of AquaSat, surface reflectance and surface temperature data are acquired at specific, centrally-located points within waterbodies (typically in pelagic locations of lakes, lakeSR) and at locations where there are in situ data (siteSR). The data acquired at locations where there are in situ data are meant to create location-specific algorithms using the AquaMatch database, which can then be applied to the data collected over the centrally-located point across all waterbodies in the lakeSR database. lakeSR does not acquire nor summarize data over the entire waterbody’s surface, as it is computationally impractical for most large lakes, especially those that cross multiple satellite path-rows or tiles. For both lakeSR and siteSR, we summarize the Landsat data within a 120m radius of a defined location. 2.1 Changes from AquaSat v1 Some changes in lake polygon and center point have been made in modernizing and scaling from the original AquaSat. The lake center aspect called “deepest point” of AquaSat v1 was built upon HydroLakes (Messager et al. 2016), a global database of lakes greater than 10 hectares accounting for 1.4 million waterbodies and a total surface area of 2.67 million km² worldwide. While this dataset of lakes represents ~55% of the worldwide surface area of lakes greater than 1 hectare, it is only a sliver of the estimated 27 million waterbodies in the world (Verpoorter et al. 2014). AquaSat v2 uses the USGS’s National Hydrography products which map the surface waters of the United States, and allows for reduction in minimum size of waterbody and an increase in coverage of freshwater systems across the United States and permanently inhabited territories. 2.2 Pole of Inaccessibility The USGS National Hydrography products contain smaller waterbodies and higher resolution polygons than the HydroLakes shapes, which makes it computationally impossible to use the Chebyshev Center (“deepest point”, Yang (2020)) calculation used in AquaSat v1 due to the number of vertices in each polygon. To replace this important step in the update, we employ the concept of “pole of inaccessibility” (POI) (Stefansson 1920), which can handle complex polygons in the R environment with minimal computational investment. The concept of POI is used to define the geographic center of a circle with the largest circumference within any complex polygon. The foundational principle is used widely to describe the arctic pole of inaccessiblity, that is the point in the northern arctic circle that is the furthest from land, but has also been used to describe the geographic center of landmasses (Garcia-Castellanos and Lombardo 2007). For lakeSR, we use POI to determine the point in a waterbody that is furthest from the shoreline using the polylabelr::poi() function (Larsson 2020), which calculates a point in space and the radius of the circle used to define the POI. 2.3 Waterbodies in AquaMatch-lakeSR For lakeSR, we use the NHDPlusV2 dataset for lakes within the conterminous US and US Territories using the {nhdplusTools} R package (Blodgett and Johnson 2023) and the NHD Best Resolution (US Geological Survey 2023) data through The National Map. All HUC4s were downloaded and processed in November 2024 using the most updated version available at the time of download. Figure 2.1: NHD HUC4 map for the United States and Territories, courtesy of the USGS. For every HUC4 in the United States and Territories (Figure 2.1), all waterbodies are limited to those with NHD Waterbody Subtypes belonging to the following groups: 390 (lake/pond) and 436 (reservoir) and are at least 0.01 km2 (1 hectare) in area according to the area value provided in the NHD file. If the feature type (FType) of the waterbody belonged to an intermittent category (39001, 39005, 39006, 43614) the threshold for inclusion was increased to 0.04 km2 (4 hectares) to reduce processing time when extracting data from Google Earth Engine. This filtering resulted in 729,941 waterbodies included in our dataset, including 313,248 non-CONUS waterbodies. This is a 1,185 percent increase over the 56,792 lakes included in the original AquaSat product. For each waterbody, the POI and distance-to-shore radius was calculated using the polylabelr::poi() function. It is important to note that the poi() function can sometimes attribute a POI to a location other than the point furthest away from a shoreline. This occurs in polygons with a very large number of indices (due to sheer area or geomorphological complexity); however the points calculated should be an acceptable proxy for pelagic lake conditions. 2.4 Technical Implementation The code for gathering NHD waterbodies and calculating their respective POIs is found in {targets} group a_Calculate_Centers which is located in the script a_Calculate_Centers.R at the root directory of the repository. The processing begins by acquiring the polygons of all US states and territories using the {tigris} package (Walker 2023). These polygons are used to acquire a list HUC4s that intersect with each municipal boundary using the nhdplusTools::get_huc() function, which are then reduced to distinct HUC4’s and transformed into a vector of HUC4s. HUC4s are then split into CONUS (HUC4 &lt; 1900) and non-CONUS (HUC4 ≥ 1900) groups. To efficiently calculate the POI across hundreds of HUC4s, we use the dynamic branching feature to iterate over each HUC4. For each HUC4, the NHDPlusV2 (CONUS) or NHD Best Resolution (non CONUS) waterbodies are acquired and filtered for lake/ponds and reservoirs of at least 1 hectare in area or 4 hectares for intermittent lake/ponds or reservoirs. In order to accurately calculate distance-to-shore when using the polylabelr::poi() function as described in Section 2.3, each waterbody was converted to the proper Universal Transverse Mercator (UTM) projection calculated from the mean longitudinal value of the polygon vertices prior to applying the poi() function. By using the point-local UTM projection, we decrease distortion expected from any single CRS used to represent all of the locations from which we have lakes. The latitude and longitude values of the POI were transformed to decimal degrees in World Geodetic System 1984 (WGS84, EPSG:4326) from UTM easting and northing coordinates for use later in the workflow. To increase computational efficiency, we allow for multicore processing and the use of targets::crew_controller_local() function within this workflow. This reduces processing time substantially as processing thousands of polygons is quite time consuming. If you are running this workflow on your own computer, the length of time that it takes to calculate POIs will be dependent on the number of cores you allow for processing (we used 11 cores during the development of this workflow and it takes on the order of tens of minutes). 2.5 Case Study: Wisconsin Waterbodies The state of Wisconsin contains more than 15,000 freshwater lakes. AquaSat v1 contained just 2,694 waterbodies within Wisconsin (Figure 2.2), whereas the our update includes 10,574 (Figure 2.3) - accounting for a majority of the state’s freshwater water bodies. Figure 2.2: Deepest point of Wisconsin lakes included in AquaSat v1, defined by the Hydrolakes data product. Deepest point for each lake is indicated with a black dot. Figure 2.3: Point of inaccessibility for Wisconsin lakes included in AquaSat v2, defined by the NHDPlusV2 data product. Point of inaccessibility for each lake is indicated with a black dot. References Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Messager, Mathis Loïc, Bernhard Lehner, Günther Grill, Irena Nedeva, and Oliver Schmitt. 2016. “Estimating the Volume and Age of Water Stored in Global Lakes Using a Geo-Statistical Approach.” Nature Communications 7 (1): 13603. https://doi.org/10.1038/ncomms13603. Stefansson, Vilhjalmur. 1920. “The Region of Maximum Inaccessibility in the Arctic.” Geographical Review 10 (3): 167–72. https://doi.org/10.2307/207749. ———. 2023. “USGS National Hydrography Dataset Best Resolution (NHD) - Alaska (Published 20230506) GeoPackage.” Verpoorter, Charles, Tiit Kutser, David A. Seekell, and Lars J. Tranvik. 2014. “A Global Inventory of Lakes Based on High-Resolution Satellite Imagery.” Geophysical Research Letters 41 (18): 6396–6402. https://doi.org/10.1002/2014GL060641. Walker, Kyle. 2023. Tigris: Load Census TIGER/Line Shapefiles. https://CRAN.R-project.org/package=tigris. Yang, Xiao. 2020. Deepest Point Calculation for Any Given Polygon Using Google Earth Engine JavaScript API. Zenodo. https://doi.org/10.5281/zenodo.6341960. "],["software-settings.html", "3 Satellite Data Acquisition Software and Settings 3.1 {reticulate} Conda Environment 3.2 Google Earth Engine Setup", " 3 Satellite Data Acquisition Software and Settings Currently, all satellite data in AquaSat are obtained using the Python API for Google Earth Engine (GEE) (Gorelick et al. 2017). While the orchestration of data acquisition is performed by {targets}, a workflow management program for R, all code directly related to GEE data acquisition is written in Python. 3.1 {reticulate} Conda Environment RStudio (Posit team 2023) is an IDE that, alongside the {reticulate} package (Ushey, Allaire, and Tang 2023), facilitates integration of R and Python code within the same environment. In lakeSR, we use a singular R script to set up a {reticulate} Conda environment that is invoked at the beginning of a {targets} run (lines 8-12 of the _targets.R file) to be sure that our Python code runs consistently. Python and python module Software/Py Module version citation Python 3.10.13 Python Software Foundation, www.python.org earthengine-api 1.4.0 Gorelick (2023) pandas 2.0.3 The pandas development team (2023) pyreadr 0.5.2 Fajardo (2023) PyYAML 6.0.2 The PyYAML Project, https://github.com/yaml/pyyaml numpy 1.24.4 Harris et al. (2020) The script run_targets.Rmd includes the steps to create this environment and authenticate your GEE user. These steps should be run prior to running the pipeline to assure a smooth run of the workflow. 3.2 Google Earth Engine Setup 3.2.1 Create a GEE account Creation of a GEE is easy and free. Click ‘Get Started’ at the far right side of the earthengine.google.com webpage to create an account: 3.2.2 gcloud CLI This workflow requires the installation and initiation of gcloud CLI, a command-line tool set for accessing Google Cloud Resources. All settings for lakeSR and siteSR are default gcloud configurations using a singular GEE project. 3.2.3 GEE Authentication Once gcloud is installed and initialized and the Conda environment is set up, you can authenticate your GEE instance. For this workflow, this is completed in the run_targets.Rmd script at the root directory. This script provides explicit directions to complete this task before running the pipeline. 3.2.4 GEE project setting lakeSR is run in a specific GEE project associated with our authenticated account. If you wish to re-run this code as written, you will not have proper access because the code refers to our specific GEE project. You will need to update the config yaml (b_pull_Landsat_SRST_poi/config_files/config_poi.yml) with your Google credentials and GEE project in order to run this locally. A blank yml file (b_pull_Landsat_SRST_poi/config_files/config.yml) is provided for further customization. If you are new to GEE, go to code.earthengine.google.com and enter the project name listed in the top right hand corner of your screen: Alternatively, you can create an GEE project for this task in the dropdown menu accessed by clicking on the icon to the right of the highlighted box in the figure above. This workflow will not run without specifying an Earth Engine Project that is managed by the Google Account you authenticate this run with. References Fajardo, Otto. 2023. Pyreadr: Reads/Writes r RData and Rds Files into/from Pandas Data Frames. https://github.com/ofajardo/pyreadr. Gorelick, N. 2023. Earthengine-Api: Earth Engine Python API. Google. https://github.com/google/earthengine-api. Gorelick, N, M Hancher, M Dixon, S Ilyushchenko, D Thau, and R Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031. Harris, Charles R., K. Jarrod Millman, Stéfan J. van der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, et al. 2020. “Array Programming with NumPy.” Nature 585 (7825): 357–62. https://doi.org/10.1038/s41586-020-2649-2. Posit team. 2023. RStudio: Integrated Development Environment for r. Boston, MA: Posit Software, PBC. http://www.posit.co/. The pandas development team. 2023. Pandas-Dev/Pandas: Pandas. Zenodo. https://doi.org/10.5281/zenodo.8092754. Ushey, Kevin, J. J. Allaire, and Yuan Tang. 2023. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. "],["landsat-collection-2-srst.html", "4 Landsat Collection 2 SRST 4.1 Acronyms and Landsat Jargon 4.2 Background Information 4.3 Surface Reflectance Product 4.4 Surface Temperature", " 4 Landsat Collection 2 SRST 4.1 Acronyms and Landsat Jargon SR: surface reflectance ST: surface temperature Collection 2 (C2): The second version of the Landsat record - the transition to C2 began in 2020. There were extensive changes to the data storage and metadata when moving from Collection 1 to C2. An overview of the differences is available as a PDF download here from the USGS. Data Tier: a data tier for Landsat refers to data quality and processing. lakeSR uses Tier 1 data exclusively which conform to the highest level of data quality. To learn more about Landsat tiers, see this video from the USGS. Data Processing Level: a data processing level for Landsat refers to how much the data have been processed. Level 1 (top of atmosphere) is less processed than Level 2 (surface reflectance). lakeSR uses Level 2 data exclusively, as it has gone through a standard atmospheric correction process that attempts to standardize data handling through out the Landsat record - it is derived from Level 1 data. NASA has compiled a list of general data processing levels and descriptions here. 4.2 Background Information The information presented in this section originates from the NASA Landsat Science website and has been summarized here for the purpose of providing background information about the Landsat archive relevant to the creation and use of lakeSR. The Landsat archive of multispectral and thermal data in lakeSR is composed of Landsat missions 4 through 9 and spans more than 40 years. Mission Launch Date End of Science Mission Decommission Date Landsat 4 TM (EROS Center 2020a) 1982-07-16 1993-12-14 2001-06-15 Landsat 5 TM (EROS Center 2020a) 1984-03-01 2011-11-18 2013-06-05 Landsat 7 ETM+ (EROS Center 2020b) 1999-04-15 2022-04-06 N/A Landsat 8 OLI/ TIRS (EROS Center 2020c) 2013-02-11 N/A N/A Landsat 9 OLI-2/TI RS-2 (EROS Center 2020c) 2021-09-27 N/A N/A The image record for Landsat 4 is not consistent nor robust due to a data transmitter failure early in service, however our pipeline acquires data as available. Landsat 6 did not achieve orbit. For the purposes of lakeSR, we truncate the data record for Landsat 4 and 5 at the end of the Science Mission of the satellite. No corrections were made for the Landsat 7 scanline error that began on May 31, 2003, data were collected as available despite the scanline error since the data are still of acceptable quality per the USGS. Additionally, Landsat 7 began to experience orbital drift beginning in 2017, resulting in top-of-atmosphere (and therefore also surface reflectance) that had growing uncertainties over time as the drift increased (Qiu et al. 2021). Qui (2021) suggests that data are not robust enough for trend analysis after the start of the growing season in 2020, but because their analysis was of NDVI, we conservatively truncate the data at the end of 2019. 4.2.1 Spectral Response While the nominal bands for each of the missions within the archive is relatively consistent (with the addition of an Aerosol band beginning Landsat 8), the precise spectral response for each nominal band shifted beginning with Landsat 8 OLI/TIRS: Se nsors Ae rosol Blue Green Red Near Inf rared (NIR) Short Wave Inf rared 1 (SWIR 1) Short Wave Inf rared 2 (SWIR 2) Th ermal TM ETM+ N/A 0 .45 - 0.52 μm 0 .52 - 0.60 μm 0 .63 - 0.69 μm 0 .77 - 0.90 μm 1 .55 - 1.75 μm 2 .08 - 2.35 μm 10 .40 - 12.50 μm OLI /TIRS OL I-2/T IRS-2 435 - 0.451 μm 0.452 0.512 μm 0.533 0.590 μm 0.636 0.673 μm 0.851 0.879 μm 1.566 1.651 μm 2.107 2.294 μm 10 .60 - 1 1.19, 11 .50 - 12.51 μm 4.2.2 Sensor Resolution The spatial resolution of the Level 1 data has not changed for optical bands over time (Aerosol, RGB, NIR, SWIR) but has varied over the historic record for thermal data: Sensors Optical Bands Thermal Bands TM 30 120 ETM+ 30 60 OLI/TIRS OLI-2/TIRS-2 30 100 All Collection 2 Level 2 Surface Reflectance and Surface Temperature data have been resampled to 30m. Alongside the pixel resolution of the sensors is the radiometric resolution at which the data are stored. TM and ETM+ data are stored as 8-bit data products, OLI data are quantitized to 12 bits and Landsat 9 to 14 bits. This equates to 256 shades per band for Landsat 4-7, 4,096 shades for Landsat 8 and 16,384 shades for Landsat 9, where higher numbers allow for greater precision of measurement in a given band. All Collection 2 Level 2 Surface Reflectance and Surface Temperature data have been rescaled to 16 bits. 4.3 Surface Reflectance Product The information presented in this section originates from the USGS Landsat Collection 2 Surface Reflectance product page and has been summarized here for the purpose of providing background information about the Landsat archive relevant to the creation and use of lakeSR. The Landsat C2 SR product is a Level 2 data product that has been atmospherically corrected from the Level 1 Top of Atmosphere product using a myriad of inputs to create a reasonably consistent data product across space and time. The USGS EROS describes the SR product as follows: Surface reflectance improves comparison between multiple images over the same region by accounting for atmospheric effects such as aerosol scattering and thin clouds, which can help in the detection and characterization of Earth surface change. Surface reflectance is generated from Level-1 inputs that meet the &lt;76 degrees Solar Zenith Angle constraint and include the required auxiliary data inputs to generate a scientifically viable product. 4.3.1 SR Atmospheric Processing The SR product for Landsat 4-7 is calculated using the Land Ecosystem Distrubance Adaptive Procesing System (LEDAPS) (Schmidt et al. 2013) and Landsat 8 and 9 SR data are calculated using the Land Surface Reflectance Code (LaSRC) algorithm (Vermote et al. 2018). The two algorithms are functionally different, but the outcome is the same: a consistently-processed surface reflectance product that is available worldwide. See the table under section heading ‘Differences in Surface Reflectance Processing Algorithms’ on the USGS Landsat C2 website for details. 4.4 Surface Temperature The information presented in this section originates from the USGS Landsat Collection 2 Surface Temperature product page and has been summarized here for the purpose of providing background information about the Landsat archive relevant to the creation and use of lakeSR. The Landsat Collection 2 Surface Temperature (ST) product is calculated using a single-channel algorithm (M. J. Cook 2014; M. Cook et al. 2014) to convert the thermal band data to temperature estimates in degrees Kelvin. These data are considered interoperable over space and time with few differences in the ST algorithm product within Collection 2, with the acknowledgement of the previously-documented spectral and radiometric resolution differences. References Cook, M J. 2014. “Atmospheric Compensation for a Landsat Land Surface Temperature Product.” PhD thesis, Rochester, NY. https://scholarworks.rit.edu/theses/8513. Cook, Monica, John R. Schott, John Mandel, and Nina Raqueno. 2014. “Development of an Operational Calibration Methodology for the Landsat Thermal Data Archive and Initial Testing of the Atmospheric Compensation Component of a Land Surface Temperature (LST) Product from the Archive.” Remote Sensing 6 (11): 1124411266. https://doi.org/10.3390/rs61111244. EROS Center. 2020a. “USGS EROS Archive - Landsat Archives - Landsat 4-5 TM Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9IAXOVV. ———. 2020b. “USGS EROS Archive - Landsat Archives - Landsat 7 ETM Plus Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9C7I13B. ———. 2020c. “USGS EROS Archive - Landsat Archives - Landsat 8-9 OLI/TIRS Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9OGBGM6. Qiu, Shirley, Zhe Zhu, Rong Shang, and Christopher J. Crawford. 2021. “Can Landsat 7 Preserve Its Science Capability with a Drifting Orbit?” Science of Remote Sensing 4. https://doi.org/10.1016/j.srs.2021.100026. Schmidt, Gail, Calli B. Jenkerson, Jeffrey Masek, Eric Vermote, and Feng Gao. 2013. “Landsat Ecosystem Disturbance Adaptive Processing System (LEDAPS) Algorithm Description.” Reston, VA. https://doi.org/10.3133/ofr20131057. Vermote, E., J. C. Roger, B. Franch, and Sergii Skakun. 2018. “LaSRC (Land Surface Reflectance Code): Overview, Application and Validation Using MODIS, VIIRS, LANDSAT and Sentinel 2 Data’s.” In, 8173–76. https://doi.org/10.1109/IGARSS.2018.8517622. "],["LS-C2-SRST.html", "5 Landsat Collection 2 SRST Data Product 5.1 Changes from AquaSat v1 5.2 Overview of Aqcuisition Steps 5.3 Technical Implementation of Acquisition Script 5.4 Payload handling", " 5 Landsat Collection 2 SRST Data Product The lakeSR data product is a set of tabular datasets, representing the surface reflectance (SR) and surface tempearture (ST) data summarized for the point of inaccessibility (POI) location which is meant to represent pelagic conditions at a given waterbody (identified by its NHD unique identifier, see Section 2). This data product contains “full stacks” of the Landsat Collection 2 record - that is, all summarized Landsat data available from all Landsat missions that met our QA criteria. 5.1 Changes from AquaSat v1 While much of the general architecture in AquaSat v1 has remained unchanged, we have added a number of features to the lakeSR acquisition, have increased efficiency of the data pull, and have made the aquired data more robust through additional masking. The bullets below summarize the changes implemented in this update. using yaml file for configuration of the workflow. This allows for greater flexibility in data acquisition including the use of custom configurations for the pull. assuring location and buffer area are completely contained in a path-row prior to pulling the data. This reduces erroneous counts of pixels for locations and buffers that are at the edge of a path-row, assuring that the buffer distance and included area is consistent per location if it is in the area of path-row overlap. [[insert drawing of this]] inclusion of Landsat 4 and Landsat 9. At the time of the initial AquaSat, Landsat 4 was not easily integrated with other Landsat missions due to data storage differences (Ross et al. 2019). Collection 2 updates allowed for easier interoperability of the TM sensor (Landsat 4) image series and have therefore been included in the update. Additionally, Landsat 9 came online in 2020, and have been added to the data product. sending tasks to GEE explicitly per path-row and limiting the Landsat stack to the explicit path-row to eliminate duplicate acquisitions. In the previous version of AquaSat, we acquired duplicate location/path-row data because we did not limit the extracted Landsat stack to the explicit WRS path-row the point was in. This meant that locations that were in a path-row overlap would be extracted twice in two different WRS path-row extents. The code below is an example of this type of filtering that occurs as we run a path-row extraction, where we once clipped the stack to the AOI of the path-row. wrs_pathrow = &quot;013031&quot; w_p = int(str(wrs_pathrow)[:3]) w_r = int(str(wrs_pathrow)[-3:]) l7 = (ee.ImageCollection(&quot;LANDSAT/LE07/C02/T1_L2&quot;) .filter(ee.Filter.eq(&quot;WRS_PATH&quot;, w_p)) .filter(ee.Filter.eq(&quot;WRS_ROW&quot;, w_r)) .filterDate(&#39;1999-05-28&#39;, &#39;2019-12-31&#39;)) filtering for valid mission dates at Landsat stack step. As seen in the code chunk above, we also filter for the valid mission dates as detailed in Section 4.2 - in the previous version this was completed after the Landsat stack was acquired. implementation of Collection 2 updates, specifically scaling changes and updated QA band conventions. The updated scaling factor function is as follows as directed by the US Geological Survey (2021) and US Geological Survey (2024) documents. def apply_scale_factors(image): &quot;&quot;&quot; Applies scaling factors for Landsat Collection 2 surface reflectance and surface temperature products Args: image: one ee.Image of an ee.ImageCollection Returns: ee.Image with band values overwritten by scaling factors &quot;&quot;&quot; opticalBands = image.select(&#39;SR_B.&#39;).multiply(0.0000275).add(-0.2) thermalBands = image.select(&#39;ST_B.*&#39;).multiply(0.00341802).add(149.0) return image.addBands(opticalBands, None, True).addBands(thermalBands, None,True) masking changes. Many updates were made to assure high quality data through the use of updated masking procedures. The following masks were added in this workflow and are detailed below in Section 5.3.1: apply_fill_mask_457, apply_fill_mask_89, apply_realistic_mask_457, apply_realistic_mask_89, apply_opac_mask (Landsat 4, 5, 7 only), apply_sr_aero_mask (Landsat 8, 9 only). The cloud mask was also updated to include all sources of contamination (including cloud shadow and dialated clouds) in addition to clouds, snow, and ice. The proportion of pixels within the location buffer that were masked out due to clouds is now tracked as prop_clouds as an additional method of QA handling downstream of the GEE extraction. DSWE implementation. We have moved from using the JRC Global Surface Water Mapping Layers Pekel et al. (2016) to using the Dynamic Surface Water Extent algorithm to identify water pixels in a given Landsat image. See Section 5.3.2 for details. removing no-data acquisitions before GEE export. In the AquaSat update, we remove any rows from the summarized GEE product before export. This adds efficiency to the pull by removing those rows before export, which is a source of added time in the GEE bottleneck. checking for failed tasks. We added a sanity check for failed tasks, since task status is not conveyed from GEE and was not implemented in the original AquaSat workflow. 5.2 Overview of Aqcuisition Steps The workflow for data acquisition is as follows: read in and format the yaml configuration file for the GEE run (b_config_file_poi, b_yml_poi) reformat the locations file for the GEE run using the configuration file (b_ref_locations_poi) determine the WRS-2 path-rows that intersect with the locations file (b_WRS_pathrow_poi) filter the locations for those that are completely contained by the WRS-2 path-row when the automated buffer is added, add the WRS-2 path-rows to the reformatted locations, and save distinct location files by path-row for easier processing in Python (b_poi_locs_filtered) iteratively run the GEE script per WRS-2 path-row (b_eeRun_poi) check to see that all tasks are complete in GEE before moving to next step (b_poi_tasks_complete) check to see if any tasks failed in GEE extraction which is not visible from the RStudio IDE (b_check_for_failed_tasks) 5.2.1 Creating a Custom Configuration File lakeSR can be modified to be run by a user by setting up a new config file and altering the {targets} workflow to point to that config file. To configure a new run of this workflow, fill out the yaml file at the file path b_pull_Landsat_SRST_poi/config_files/config.yml and modify the _targets.R script at line 28 to reflect the updated config file. To run the pipeline with this custom configuration, follow the steps in run_targets.Rmd, which will run the pipeline. If you wish to make changes to any processes that are not indicated in the config file (using a different set of lakes/source files, remote sensing masking procedures, summary statistics, QAQC filtering, mission handoff corrections, etc.) we encourage you to do so. Just remember, this pipeline takes DAYS to run due to the bottleneck when submitting tasks to Google Earth Engine. If you wish to extract remote sensing data for specific locations in a lake, we encourage you to look to our siteSR data product which is more suited to extracting data of that nature. Please note, calculating hand-off coefficients from small numbers of lakes may not provide robust enough summary statistics for intermission comparison and timeseries analysis. See SECTION HAND-OFF COEFFICIENTS TO BE UPDATED! for additional guidance. 5.3 Technical Implementation of Acquisition Script In order to cue Python scripts and map along WRS-2 path-rows within the {targets} architecture, we use a function run_GEE_per_pathrow() which writes the current WRS-2 path-row to a text file, then sources a python script that uses that text file to run the acquisition for the path-row. Additional details are provided below to describe the steps in the python script (run_GEE_per_pathrow.py). 5.3.1 Custom Earth Engine Masking Functions The first section of run_GEE_per_pathrow.py saves custom functions used in the Landsat stack acquisition. These include data manipulation to create Earth Engine (EE) objects, custom QA masks, DSWE algorithm, and the functions that perform the masking and extraction of data from the Landsat image. Below is an overview of some of the custom masking procedures and their justification, if applicable. We use the most aggressive masking procedures in the lakeSR product in order to attempt to have consistent and robust data across such a large area of data acquisition. apply_rad_mask: Masks out all pixels that are radiometrically saturated in any optical band using the QA_RADSAT QA band. The Landsat User Guides (US Geological Survey 2021, 2024) note that radiometrically saturated data are “unusable”. Saturated bands happen infrequently in Landsat 8 and 9, but we still apply this mask to all Landat mission data for continuity. apply_cf_mask: Applies mask for any pixels obstructed by clouds and snow/ice using the CLOUD_QA band. This is a general QA band that describes clouds/snow/ice detected by algorithms defined by the atmospheric processing procedure. We have elected to only include pixels that do not contain clouds, cloud shadows, dispersed clouds, or snow/ice as defined by this band. In particular, we follow the suggestions in the product User Guide (US Geological Survey 2021, 2024) Users are advised to engage the QA “Dilated Cloud” (bit 1) AND “Cloud” (bit 3) OFF condition to correctly identify clear pixels over water. apply_sr_aero_mask: Applies mask for any pixels in Landsat 8 and 9 that have ‘medium’ or ‘high’ aerosol QA flags from the SR_QA_AEROSOL band. Because water is particularly difficult to assess from space, we are more aggressive in this mask than suggested by the Landsat 8 and 9 User Guide (US Geological Survey 2024) which states: “Note that pixels classified as high aerosol content are not recommended for use.” apply_opac_mask: Applies mask to remove pixels where atmospheric opacity is greater than 0.3 in Landsat 4, 5, and 7 using the SR_ATMOS_OPACITY band. For similar reasons as a more aggressive aerosol mask in Landsat 8 &amp; 9, we use this mask in addition to the cloud mask (apply_cf_mask). The Landsat 4-7 User Guide (US Geological Survey 2021) states the following about the atmospheric opacity values: A general interpretation of atmospheric opacity is that values less than 0.1 are clear, 0.1-0.3 are average, and values greater than 0.3 indicate haze or other cloud situations. SR values from pixels with high atmospheric opacity will be less reliable, especially under high solar zenith angle conditions. apply_fill_mask_457 and apply_fill_mask_89: Applies a mask where any band value is 0 before applying scaling factors to bands. Filled values are infrequent, however, when acquiring data across such a large area and time, they are bound to happen. apply_realistic_mask_457 and apply_realistic_mask_89: Applies a mask where any band is less than -0.01 after scaling, indicating overcorrection of SR product. While the stated minimum value of the ‘valid range’ for the SR product is 7273 prior to application of scaling factors (0.0000075 after scaling), we know that this product has been fine-tuned on terrestrial data and small over-corrections of the surface reflectance, especially over dark surfaces, is likely to happen. We explicitly allow for very small negative reflectance values to be sure we do not remove very deep, oligotrophic and/or high DOC water systems from our data set. 5.3.2 Defining water area We use the Dynamic Surface Water Extent (DSWE) algorithm to define what pixels are water within the buffer of our specific locations. DSWE was defined in Jones (2019) for Landsat Collection 1 and re-implemented for Collection 2 as a Level-3 data product in US Geological Survey (2022). Implementation of the DSWE algorithm results in the following values per pixel: a value of 0 indicates no water/fill 1 is confident water 2 is low confidence water 3 is high confidence partial water (or vegetated water) 4 is low confidence partial water Within the scope of lakeSR, we tabulate pixels that are a DSWE value of 1 (DSWE1) for high confidence open water, or what we call DSWE1a - high confidence open water OR the pixel meets a threshold that may indicate there is surface-level algae. The algae mask is defined as when a pixel has a DSWE value greater than 1 and the green band scaled value is greater than 0.05 and the red band sclaed value is less than 0.04. These values are based on optical properties intended to mimic the spectral response of chlorophyll a as described by Burket, Olmanson, and Brezonik (2023). This is an experimental mask, so we export both DSWE1 and DSWE1a summaries within lakeSR. We have found some omission error within DSWE1 for visible floating scum within river systems and this additional mask captures many of those pixels without adding unnecessary uncertainty. Users of the lakeSR data product can choose to use the DSWE1a product if applicable to their research, however, this threshold was defined in the Illinois and Ohio Rivers and may not be applicable in all environments. 5.4 Payload handling Because GEE is a free service to those at academic or governmental institutions, there are limits to the total number of tasks being run co-currently on GEE’s platform. For this reason, tasks are sent to GEE as path-row groups as soon as there are fewer than 10 tasks in the GEE tasks queue. Additionally, any pathrow containing more than 5,000 POI locations are sent as separate tasks in 5000 location chunks. This is an additional step that is taken in addition to processing per path-row to avoid failed tasks. We have also implemented a status check for tasks sent to GEE to determine if any have failed (target b_check_for_failed_tasks), as once the tasks are sent from the RStudio IDE, you can not tell whether or not they have completed or failed. This stores a text file at the filepath b_pull_Landsat_SRST_poi/out/GEE_task_errors_vRUN_DATE.csv containing the names of the tasks that have failed. References Burket, Martha Otte, Leif G. Olmanson, and Patrick L. Brezonik. 2023. “Comparison of Two Water Color Algorithms: Implications for the Remote Sensing of Water Bodies with Moderate to High CDOM or Chlorophyll Levels.” Sensors 23 (3): 1071. https://doi.org/10.3390/s23031071. Jones, John W. 2019. “Improved Automated Detection of Subpixel-Scale Inundationrevised Dynamic Surface Water Extent (DSWE) Partial Surface Water Tests.” Remote Sensing 11 (4). https://doi.org/10.3390/rs11040374. Pekel, Jean-François, Andrew Cottam, Noel Gorelick, and Alan S. Belward. 2016. “High-resolution mapping of global surface water and its long-term changes.” Nature 540 (7633): 418–22. https://doi.org/10.1038/nature20584. Ross, Matthew R. V., Simon N. Topp, Alison P. Appling, Xiao Yang, Catherine Kuhn, David Butman, Marc Simard, and Tamlin M. Pavelsky. 2019. “AquaSat: A Data Set to Enable Remote Sensing of Water Quality for Inland Waters.” Water Resources Research 55 (11): 10012–25. https://doi.org/10.1029/2019WR024883. US Geological Survey. 2021. “Landsat 4-7 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” https://www.usgs.gov/media/files/landsat-4-7-collection-2-level-2-science-product-guide. ———. 2022. “Landsat Collection 2 Level-3 Dynamic Surface Water Extent Algorithm Description Document.” ———. 2024. “Landsat 8-9 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” "],["references.html", "6 References", " 6 References Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Burket, Martha Otte, Leif G. Olmanson, and Patrick L. Brezonik. 2023. “Comparison of Two Water Color Algorithms: Implications for the Remote Sensing of Water Bodies with Moderate to High CDOM or Chlorophyll Levels.” Sensors 23 (3): 1071. https://doi.org/10.3390/s23031071. Cook, M J. 2014. “Atmospheric Compensation for a Landsat Land Surface Temperature Product.” PhD thesis, Rochester, NY. https://scholarworks.rit.edu/theses/8513. Cook, Monica, John R. Schott, John Mandel, and Nina Raqueno. 2014. “Development of an Operational Calibration Methodology for the Landsat Thermal Data Archive and Initial Testing of the Atmospheric Compensation Component of a Land Surface Temperature (LST) Product from the Archive.” Remote Sensing 6 (11): 1124411266. https://doi.org/10.3390/rs61111244. EROS Center. 2020a. “USGS EROS Archive - Landsat Archives - Landsat 4-5 TM Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9IAXOVV. ———. 2020b. “USGS EROS Archive - Landsat Archives - Landsat 7 ETM Plus Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9C7I13B. ———. 2020c. “USGS EROS Archive - Landsat Archives - Landsat 8-9 OLI/TIRS Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9OGBGM6. Fajardo, Otto. 2023. Pyreadr: Reads/Writes r RData and Rds Files into/from Pandas Data Frames. https://github.com/ofajardo/pyreadr. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Gorelick, N. 2023. Earthengine-Api: Earth Engine Python API. Google. https://github.com/google/earthengine-api. Gorelick, N, M Hancher, M Dixon, S Ilyushchenko, D Thau, and R Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031. Harris, Charles R., K. Jarrod Millman, Stéfan J. van der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, et al. 2020. “Array Programming with NumPy.” Nature 585 (7825): 357–62. https://doi.org/10.1038/s41586-020-2649-2. Jones, John W. 2019. “Improved Automated Detection of Subpixel-Scale Inundationrevised Dynamic Surface Water Extent (DSWE) Partial Surface Water Tests.” Remote Sensing 11 (4). https://doi.org/10.3390/rs11040374. Landau, William Michael. 2021. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Messager, Mathis Loïc, Bernhard Lehner, Günther Grill, Irena Nedeva, and Oliver Schmitt. 2016. “Estimating the Volume and Age of Water Stored in Global Lakes Using a Geo-Statistical Approach.” Nature Communications 7 (1): 13603. https://doi.org/10.1038/ncomms13603. Pekel, Jean-François, Andrew Cottam, Noel Gorelick, and Alan S. Belward. 2016. “High-resolution mapping of global surface water and its long-term changes.” Nature 540 (7633): 418–22. https://doi.org/10.1038/nature20584. Posit team. 2023. RStudio: Integrated Development Environment for r. Boston, MA: Posit Software, PBC. http://www.posit.co/. Qiu, Shirley, Zhe Zhu, Rong Shang, and Christopher J. Crawford. 2021. “Can Landsat 7 Preserve Its Science Capability with a Drifting Orbit?” Science of Remote Sensing 4. https://doi.org/10.1016/j.srs.2021.100026. Ross, Matthew R. V., Simon N. Topp, Alison P. Appling, Xiao Yang, Catherine Kuhn, David Butman, Marc Simard, and Tamlin M. Pavelsky. 2019. “AquaSat: A Data Set to Enable Remote Sensing of Water Quality for Inland Waters.” Water Resources Research 55 (11): 10012–25. https://doi.org/10.1029/2019WR024883. Schmidt, Gail, Calli B. Jenkerson, Jeffrey Masek, Eric Vermote, and Feng Gao. 2013. “Landsat Ecosystem Disturbance Adaptive Processing System (LEDAPS) Algorithm Description.” Reston, VA. https://doi.org/10.3133/ofr20131057. Stefansson, Vilhjalmur. 1920. “The Region of Maximum Inaccessibility in the Arctic.” Geographical Review 10 (3): 167–72. https://doi.org/10.2307/207749. The pandas development team. 2023. Pandas-Dev/Pandas: Pandas. Zenodo. https://doi.org/10.5281/zenodo.8092754. US Geological Survey. 2021. “Landsat 4-7 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” https://www.usgs.gov/media/files/landsat-4-7-collection-2-level-2-science-product-guide. ———. 2022. “Landsat Collection 2 Level-3 Dynamic Surface Water Extent Algorithm Description Document.” ———. 2023. “USGS National Hydrography Dataset Best Resolution (NHD) - Alaska (Published 20230506) GeoPackage.” ———. 2024. “Landsat 8-9 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” Ushey, Kevin, J. J. Allaire, and Yuan Tang. 2023. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. Vermote, E., J. C. Roger, B. Franch, and Sergii Skakun. 2018. “LaSRC (Land Surface Reflectance Code): Overview, Application and Validation Using MODIS, VIIRS, LANDSAT and Sentinel 2 Data’s.” In, 8173–76. https://doi.org/10.1109/IGARSS.2018.8517622. Verpoorter, Charles, Tiit Kutser, David A. Seekell, and Lars J. Tranvik. 2014. “A Global Inventory of Lakes Based on High-Resolution Satellite Imagery.” Geophysical Research Letters 41 (18): 6396–6402. https://doi.org/10.1002/2014GL060641. Walker, Kyle. 2023. Tigris: Load Census TIGER/Line Shapefiles. https://CRAN.R-project.org/package=tigris. Xie, Yihui. 2016. Bookdown: Authoring Books and Technical Documents with r Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/bookdown. Yang, Xiao. 2020. Deepest Point Calculation for Any Given Polygon Using Google Earth Engine JavaScript API. Zenodo. https://doi.org/10.5281/zenodo.6341960. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
