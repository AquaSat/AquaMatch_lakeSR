[["index.html", "AquaSat v2: lakeSR and siteSR Compiled Satellite Surface Reflectance and Surface Temperature for Waterbodies in the United States and US Territories 1 Introduction", " AquaSat v2: lakeSR and siteSR Compiled Satellite Surface Reflectance and Surface Temperature for Waterbodies in the United States and US Territories ROSSyndicate 2025-02-26 1 Introduction This {bookdown} (Xie 2016) document explains the methodology we use in the acquisition and compilation of satellite surface reflectance and surface temperature data for the AquaSat v2 data suite. Specifically, this document describes data for all lakes greater than 1 hectare in the United States and US Territories (“lakeSR”) and sites associated with Water Quality Portal (“WQP”) data harmonized within the AquaMatch_harmonize_WQP data product (“siteSR_WQP”). We include the suffix “WQP” for siteSR to indicate the data originate from the WQP, allowing for future development of in situ data that may come from other sources. Generally speaking, siteSR refers to remote sensing data acquired at locations with in situ data and lakeSR refers to remote sensing data acquired at centrally-located points of waterbodies. AquaSat v2 represents modular code and data infrastructure for: harmonizing in situ data from the Water Quality Portal and providing an interoperability tiering structure to allow for easier downstream filtering (“AquaMatch_harmonize_WQP”) acquiring remote sensing data of inland waterbodies and rivers (lakeSR, siteSR, and riverSR) pairing in situ data and remote sensing data for parameter-specific algorithm development (e.g., AquaMatch_WQP_LandsatC2) The goal of these data products is to facilitate assessment and monitoring of waterbodies within the United States and Territories using both in situ and remote sensing data. AquaSat v2 builds upon AquaSat (Ross et al. 2019) (referred to here as “AquaSat v1”) and LimnoSat-US (Topp et al., n.d.). AquaSat v1 focused on pairing remote sensing data with in situ observations and measurements while LimnoSat-US acquired remote sensing for all waterbodies greater than 10 hectares across the Continental United States (CONUS) regardless of whether in situ measurements were available for that waterbody. In AquaSat v2, we bring these products together. For instance, lakeSR can define Landsat intermission handoffs to enable use of Landsat as a timeseries product, siteSR products can be used to create parameter-specific algorithms, and those algorithms can be applied to lakeSR to create a timeseries of water quality for waterbodies in the US and territories. AquaSat v2 code is built on the {targets} workflow management system for R (Landau 2021). The {targets} architecture is based on lists of functions performed in a specific order, each function called a target. The primary benefit of {targets} workflows is that code is only run if a target, a target’s code, or a target’s dependencies have changed (or become “outdated” in {targets} speak). References Landau, William Michael. 2021. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959. Ross, Matthew R. V., Simon N. Topp, Alison P. Appling, Xiao Yang, Catherine Kuhn, David Butman, Marc Simard, and Tamlin M. Pavelsky. 2019. “AquaSat: A Data Set to Enable Remote Sensing of Water Quality for Inland Waters.” Water Resources Research 55 (11): 10012–25. https://doi.org/10.1029/2019WR024883. Topp, Simon, Tamlin Pavelsky, Xiao Yang, John Gardner, and Matthew R. V. Ross. n.d. “LimnoSat-US: A Remote Sensing Dataset for u.s. Lakes from 1984-2020.” https://doi.org/10.5281/zenodo.4139695. Xie, Yihui. 2016. Bookdown: Authoring Books and Technical Documents with r Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/bookdown. "],["background.html", "2 Background 2.1 lakeSR Code Architecture 2.2 siteSR_WQP Code Architecture", " 2 Background Currently, AquaSat v2 remote sensing products contain data from the historical Landsat Collection 2 record from 1984 until late 2024, including the following missions: Landsat 4 Thematic Mapper (TM) Landsat 5 TM Landsat 7 Enhanced Thematic Mapper Plus (ETM+) Landsat 8 Operational Land Imager/Thermal Infrared Sensor (OLI/TIRS) Landsat 9 OLI/TIRS There will be additional satellite data incorporated into AquaSat v2 in the future. 2.1 lakeSR Code Architecture lakeSR code is broken down into groups of targets that perform specific tasks, listed below with a brief summary about what task(s) each group completes. This particular workflow incorporates both R and Python programming languages to complete these tasks. 2.1.1 {targets} groups a_Calculate_Centers: This {targets} list calculates “Pole of Inaccessibility” (POI) (Garcia-Castellanos and Lombardo 2007) for all non-intermittent lakes, ponds, and reservoirs greater than 1 hectare in surface area and intermittent lakes, ponds, and reservoirs greater than 4 hectares using the NHDPlusV2 polygons using the {nhdplusTools} package (Blodgett and Johnson 2023), NHD Best Resolution files for non-CONUS waterbodies, and the poi() function in the {polylabelr} package (Larsson 2020). See Section 3 for additional background and detailed methodology. b_pull_Landsat_SRST_poi: This {targets} group uses the configuration file b_pull_Landsat_SRST_poi/config_files/config_poi.yml and the “Pole of Inaccessibility” points created in the a_Calculate_Centers group to pull Landsat Collection 2 Surface Reflectance and Surface Temperature using the Google Earth Engine (GEE) API. In this group, we use the most conservative LS4-7 pixel filters, as we are applying these settings across such a large continuum of time and space. This group ends with a branched target that sends tasks to Google Earth engine by mapping over WRS2 path rows that intersect with the points created in the a_Calculate_Centers group. Note: this group of targets takes a very, very long time, running 2 minutes - 1 hour per path-row branch in b_eeRun_poi. There are just under 800 path rows executed in this target. Anecdotally speaking, processing time is often defined by the number of queued tasks globally, so weekends and nights are often periods of quicker processing than weekday during business hours. See Section 4 for details on software used in this workflow, Section 5 for additional background on Landsat data, and Section 6 for detailed methodology of the Landsat pull. c_collate_Landsat_data: This {targets} list collates the data from the Google Earth Engine run orchestrated in the {targets} group b_pull_Landsat_SRST_poi and creates publicly-available files for downstream use, storing a dataframe of Drive ids in a .csv in the c_collate_Landsat_data/out/ folder. d_calculate_apply_handoff: forthcoming 2.2 siteSR_WQP Code Architecture siteSR_WQP code is built upon the output of AquaMatch_harmonize_WQP and lakeSR. AquaMatch_harmonize_WQP provides harmonized in situ data from the Water Quality Portal for pairing with remote sensing data acquired at the sites of in situ data. This workflow picks up where AquaMatch_harmonize_WQP ends, with the output of harmonized, tiered, and aggregated datasets per water quality parameter. lakeSR provides calculated Landsat intermission handoff coefficients for interoperability between sensors (see Section 7). In order to run the siteSR_WQP workflow, you must have a cloned version of AquaMatch_harmonize_WQP and AquaMatch_lakeSR codebase on your local computer. Section 2.2.1 covers details about this requirement. 2.2.1 Configuration Files config.yml: siteSR_WQP relies on this configuration file to run specific profiles that determine what operations are being run. The file contains three configuration profiles: “default”, “admin_update”, and “use_stable”. “default” runs the pipeline without using any stable versions of datasets made with AquaMatch_harmonize_WQP. This requires that the AquaMatch_harmonize_WQP pipeline has been run locally. “use_stable” uses publicly-posted stable versions of datasets from AquaMatch_harmonize_WQP and is intended for those who wish to modify choices made in siteSR_WQP or for those who wish to have the complete pipeline on their local device “admin_update” is intended for use by ROSSyndicate members when updating siteSR datasets and create publicly-stable versions of the siteSR_WQP to be stored in the AquaMatch_siteSR_WQP repository All configurations will be reliant on the stable version of handoff coefficients calculated in AquaMatch_lakeSR, as re-running that workflow takes multiple days. Advanced users are welcome to adapt the pipeline to incorporate other handoff methods. The Landsat Surface Reflectance product should not be used without applying a handoff coefficient if you are using data from multiple Landsat missions. See Section 7 for details on this process. Proper configuration of harmonize_repo_directory and lakeSR_repo_directory is imperative as the siteSR_WQP workflow references files inside AquaMatch_harmonize_WQP and AquaMatch_lakeSR file structures. If this is incorrectly set up, users will receive a message to communicate this. All repositories stored on the AquaSat v2 GitHub will contain files that link to versions of the data that the AquaSat v2 team has harmonized so that a local run is not necessitated. Any run of the “default” configuration will require that the harmonize pipeline has been run locally. gee_config.yml: This configuration file defines parameters of the GEE pull. This configuration can be customized. To create a different configuration of the GEE pull, fill out the yaml file at the file path gee_config.yml. If you change the name of this file, you will need to update the file name at line 13 of the 5_siteSR_stack.R file. 2.2.2 {targets} Groups _targets.R: This initial group of targets checks the configuration settings in config.yml, checks for the harmonization and lakeSR pipelines, and checks for Google Drive folder architecture. This group also acquires target objects from the harmonization and lakeSR pipelines. 4_compile_sites: This {targets} group collates the sites from the harmonization pipeline, creating a list of locations to acquire remote sensing data. All locations are associated with a HUC8 if one is not listed in the metadata for the site from the WQP, then the unique HUC4s are used to associate points with waterbodies and flowlines of the NHDPlusV2 (CONUS) or NHD Best Resolution (non-CONUS HUCs) files. 5_siteSR_stack: The resulting list of in situ locations are used to acquire Landsat Collection 2 SRST data in this {targets} group. Sites are assessed for visibility using the JRC Global Surface Water (Pekel et al. 2016) which is based on the historical Landsat record. Sites determined to be visible are used to define the GEE Landsat pull. 6_siteSR_collate_filter_handoff: forthcoming 7_siteSR_matchup: forthcoming References Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Pekel, Jean-François, Andrew Cottam, Noel Gorelick, and Alan S. Belward. 2016. “High-resolution mapping of global surface water and its long-term changes.” Nature 540 (7633): 418–22. https://doi.org/10.1038/nature20584. "],["locs-data-acq.html", "3 Locations of Data Acquisition 3.1 Waterbodies Included in lakeSR 3.2 siteSR Acquisition Locations", " 3 Locations of Data Acquisition As noted in the Introduction (Section 1), for the purposes of AquaSat v2, surface reflectance and surface temperature data are acquired at specific, centrally-located points within waterbodies (typically in pelagic locations of lakes, lakeSR) and at locations where there are in situ data (siteSR). The data acquired at locations where there are in situ data are meant to create location-specific algorithms using the AquaMatch database, which can then be applied to the data collected over the centrally-located point across all waterbodies in the lakeSR database. lakeSR does not acquire nor summarize data over the entire waterbody’s surface, as it is computationally impractical for most large lakes, especially those that cross multiple satellite path-rows or tiles. For the lakeSR product, we summarize the Landsat data within a 120 meter radius of a defined location. For siteSR, we use a 200 meter buffer. 3.1 Waterbodies Included in lakeSR For lakeSR, we use the NHDPlusV2 dataset for lakes within the conterminous US and US Territories using the {nhdplusTools} R package (Blodgett and Johnson 2023) and the NHD Best Resolution (e.g. US Geological Survey 2023b) data through The National Map. All waterbody polygons were downloaded and processed in November 2024 by HUC4 using the most updated version available at the time of download. Figure 3.1: NHD HUC4 map for the United States and Territories, courtesy of the USGS. For every HUC4 in the United States and Territories (Figure 3.1), all waterbodies are limited to those with NHD Waterbody Subtypes belonging to the following groups: 390 (lake/pond) and 436 (reservoir) and are at least 0.01 km2 (1 hectare) in area according to the area value provided in the NHD file. If the feature type (FType) of the waterbody belonged to an intermittent category (39001, 39005, 39006, 43614) the threshold for inclusion was increased to 0.04 km2 (4 hectares) to reduce processing time when extracting data from Google Earth Engine. This filtering resulted in 729,941 waterbodies included in our dataset, including 313,248 non-CONUS waterbodies. This is a 1,185 percent increase over the 56,792 lakes included in the original AquaSat product. For each waterbody, the Pole of Inaccessibility (see Section 3.1.2) and distance-to-shore radius was calculated using the polylabelr::poi() function. It is important to note that the poi() function can sometimes attribute a POI to a location other than the point furthest away from a shoreline. This occurs in polygons with a very large number of indices (due to sheer area or geomorphological complexity); however the points calculated should be an acceptable proxy for pelagic lake conditions. 3.1.1 Updates in AquaSat v2 Some changes in lake polygon and center point have been made in modernizing and scaling from LimnoSat-US. The lake center aspect called “deepest point” of LimnoSat-US was built upon HydroLakes (Messager et al. 2016), a global database of lakes greater than 10 hectares accounting for 1.4 million waterbodies and a total surface area of 2.67 million km² worldwide. While this dataset of lakes represents ~55% of the worldwide surface area of lakes greater than 1 hectare, it is only a sliver of the estimated 27 million waterbodies in the world (Verpoorter et al. 2014). AquaSat v2 uses the USGS’s National Hydrography products which map the surface waters of the United States, and allows for reduction in minimum size of waterbody and an increase in coverage of freshwater systems across the United States and permanently inhabited territories. 3.1.2 Pole of Inaccessibility The USGS National Hydrography products contain smaller waterbodies and higher resolution polygons than the HydroLakes shapes, which makes it computationally impossible to use the Chebyshev Center (“deepest point,” Yang 2020) calculation used in LimnoSat-US due to the number of vertices in each polygon. To replace this important step in the update, we employ the concept of “pole of inaccessibility” (POI, Stefansson 1920). The concept of POI is used to define the geographic center of a circle with the largest circumference within any complex polygon. The foundational principle is used widely to describe the arctic pole of inaccessiblity, that is the point in the northern arctic circle that is the furthest from land, but has also been used to describe the geographic center of landmasses (Garcia-Castellanos and Lombardo 2007). For lakeSR, we use POI to determine the point in a waterbody that is furthest from the shoreline using the polylabelr::poi() function (Larsson 2020), which calculates a point in space and the radius of the circle used to define the POI. 3.1.3 Technical Implementation of lakeSR The code for gathering NHD waterbodies and calculating their respective POIs is found in {targets} group a_Calculate_Centers which is located in the script a_Calculate_Centers.R at the root directory of the repository. The processing begins by acquiring the polygons of all US states and territories using the {tigris} package (Walker 2023). These polygons are used to acquire a list HUC4s that intersect with each municipal boundary using the nhdplusTools::get_huc() function, which are then reduced to distinct HUC4’s and transformed into a vector of HUC4s. HUC4s are then split into CONUS (HUC4 &lt; 1900) and non-CONUS (HUC4 ≥ 1900) groups. To efficiently calculate the POI across hundreds of HUC4s, we use the dynamic branching feature to iterate over each HUC4. For each HUC4, the NHDPlusV2 (CONUS) or NHD Best Resolution (non CONUS) waterbodies are acquired and filtered for lake/ponds and reservoirs of at least 1 hectare in area or 4 hectares for intermittent lake/ponds or reservoirs. In order to accurately calculate distance-to-shore when using the polylabelr::poi() function as described in Section 3.1, each waterbody was converted to the proper Universal Transverse Mercator (UTM) projection calculated from the mean longitudinal value of the polygon vertices prior to applying the poi() function. By using the point-local UTM projection, we decrease distortion expected from any single CRS used to represent all of the locations from which we have lakes. The latitude and longitude values of the POI were transformed to decimal degrees in World Geodetic System 1984 (WGS84, EPSG:4326) from UTM easting and northing coordinates for use later in the workflow. To increase computational efficiency, we allow for multicore processing and the use of targets::crew_controller_local() function within this workflow. This reduces processing time substantially as processing thousands of polygons is quite time consuming. If you are running this workflow on your own computer, the length of time that it takes to calculate POIs will be dependent on the number of cores you allow for processing (we used 11 cores during the development of this workflow and it takes on the order of tens of minutes). 3.1.4 Case Study: Wisconsin Waterbodies The state of Wisconsin contains more than 15,000 freshwater lakes. LimnoSat-US contained just 2,694 waterbodies within Wisconsin (Figure 3.2), whereas AquaSat v2 via the lakeSR product includes 10,574 (Figure 3.3) - accounting for a majority of the state’s freshwater water bodies. Figure 3.2: Deepest point of Wisconsin lakes included in LimnoSat-US, defined by the Hydrolakes data product. Deepest point for each lake is indicated with a black dot. Figure 3.3: Point of inaccessibility for Wisconsin lakes included in AquaSat v2 via lakeSR, defined by the NHDPlusV2 data product. Point of inaccessibility for each lake is indicated with a black dot. 3.2 siteSR Acquisition Locations The AquaMatch_harmonize_WQP workflow outputs site metadata for all sites that are present after the harmonization procedure for each parameter. siteSR collates these sites, then reduces that collation to only distinct sites. Across chlorophyll-a, Secchi disc depth, and DOC, there are currently 314,041 distinct sites in the United States and Territories for which we create stacks. Every site in the WQP has a MonitoringLocationTypeName associated with it. For the purposes of siteSR, we do not subset the sites by these types, but they are helpful for understanding the type of data included in siteSR. Figure 3.4: Water Quality Portal data location types present in siteSR. Unique WQP monitoring location count above bar, divided by MonitoringLocationTypeName. For siteSR, we will acquire Landsat stacks for all sites deemed “visible” by remote sensing (see Section 3.2.1). Note that this is different from lakeSR, where we only acquire data for lakes, reservoirs, ponds, and streams according to the NHD. This was a functional choice, as most canal sites will not be RS-visible and estuary extents are limited in the NHD (and when present the technique to determine the POI may not be appropriate). 3.2.1 Assessing for RS visibility We use the JRC Global Surface Water Mapping Layers v1.4 (Pekel et al. 2016) to determine whether or not sites are visible by remote sensing and should therefore be sent through the GEE data acquisition process detailed in Section 6. This dataset is a compilation of 38 years of the Landsat record and enumerates the proportion of time a single 30x30 meter pixel has the presence of water. As long as a WQP monitoring location has at least one pixel within a 200m radius that has had water at least 80% of the time during that 38 year period, we include it in the list of sites we acquire Landsat stacks for. After this assessment, 111,347 sites were deemed to be visible by remote sensing. Figure 3.5: Water Quality Portal data location types present in siteSR after filitering for those that are deemed visible by remote sensing. Count of sites provided above bar, divided by MonitoringLocationTypeName. 3.2.2 Assignment of NHD flowline and waterbodies For each WQP montioring location, we attempt to assign HUC8’s wherever they are missing from the HUCEightDigitCode column output from the WQP (n = 2757). To do this we use the get_huc() function from {nhdplusTools} (Blodgett and Johnson 2023) package in R. After HUC8 assignment is finished only 27 sites remained without a HUC8 assignment. All of these sites were coastal sites outside of the extent of NHD boundaries. In siteSR, the flag_HUC8 column indicates whether this HUC8 was assigned within the WQP (value of 0), assigned in this process (value of 1), or was unable to be assigned (value of 2). Using the HUC8 information to iterate, we then can use {nhdplusTools} to assign waterbodies and flowlines to sites within the CONUS and data from The National Map best resolution files ((e.g. US Geological Survey 2023b)) for sites outside of CONUS by HUC4. For all sites with a MonitoringLocationTypeName that contains “lake” or “reservoir”, we assign NHD ids to each point for the waterbody it is contained by or the waterbody it is closest to. NHD waterbody file has been filtered to only contain Lake, Ponds, and Reservoirs (NHD feature types 390 and 436). We flag (flag_wb) the results of this assignment as follows: 0: point inside NHD waterbody polygon 1: point &lt;= 500m proximate to NHD waterbody polygon 2: point unable to be assigned to waterbody (it is &gt; 500m proximate to NHD waterbody polygon) 3: point does not have HUC8 assignment or MonitoringLocationTypeName does not contain “lake” or “reservoir”, so no waterbody assigned For all points with a flag 0/1 we provide the NHD identifier for the polygon the monitoring location is associated with (comid for NHDPlusV2 and permanent identifier for NHD Best Resolution), for all points with a flag value of 1/2, we provide the distance (in meters) to the nearest NHD waterbody of feature type 390 or 436. Flowlines are assigned to sites with a MonitoringLocationTypeName that contains “lake”, “reservoir”, “stream”, or “river”. NHD flowlines are filtered to contain streams/rivers and artificial paths (that is flowlines in waterbodies) (NHD feature types 460 and 558). We flag (flag_fl) the results of this assignment as follows: 0: point &lt;= 100m proximate to flowline 1: point &lt;= 500m proximate to flowline 2: point is a lake or reservoir site and is &gt; 500m proximate to flowline 3: point is a stream/river site, unable to be assigned to flowline (distance to flowline is greater than 500 meters) 4: point does not have HUC8 assignment or MonitoringLocationTypeName does not contain “stream”, “river”, “lake”, or “reservoir”, so no flowline assigned For all points with a flag 0/1/2 we provide the NHD identifier for the flowline the monitoring location is associated with (comid for NHDPlusV2 and permanent identifier for NHD Best Resolution), for all points with a flag value of 1-3, we provide the distance (in meters) to the nearest NHD flowline of feature type 460 or 558. We provide these identifiers and additional metadata to help users make informed decisions about data quality that may be inferred through the information included in these columns relative to the remote sensing data obtained in siteSR, they are present to assist in data interpretation. 3.2.3 siteSR updates in AquaSat v2 In our updated workflow, we acquire and provide the historical Landsat stacks for all sites collated from the harmonization pipeline, regardless of whether they are associated with a specific in situ observation. In the previous iteration, we only provided a matchup dataset for in situ data. Assigning flowlines and waterbodies to all siteSR sites is also a feature introduced in AquaSat v2. References Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Messager, Mathis Loïc, Bernhard Lehner, Günther Grill, Irena Nedeva, and Oliver Schmitt. 2016. “Estimating the Volume and Age of Water Stored in Global Lakes Using a Geo-Statistical Approach.” Nature Communications 7 (1): 13603. https://doi.org/10.1038/ncomms13603. Pekel, Jean-François, Andrew Cottam, Noel Gorelick, and Alan S. Belward. 2016. “High-resolution mapping of global surface water and its long-term changes.” Nature 540 (7633): 418–22. https://doi.org/10.1038/nature20584. Stefansson, Vilhjalmur. 1920. “The Region of Maximum Inaccessibility in the Arctic.” Geographical Review 10 (3): 167–72. https://doi.org/10.2307/207749. ———. 2023b. “USGS National Hydrography Dataset Best Resolution (NHD) - Alaska (Published 20230506) GeoPackage.” Verpoorter, Charles, Tiit Kutser, David A. Seekell, and Lars J. Tranvik. 2014. “A Global Inventory of Lakes Based on High-Resolution Satellite Imagery.” Geophysical Research Letters 41 (18): 6396–6402. https://doi.org/10.1002/2014GL060641. Walker, Kyle. 2023. Tigris: Load Census TIGER/Line Shapefiles. https://CRAN.R-project.org/package=tigris. Yang, Xiao. 2020. Deepest Point Calculation for Any Given Polygon Using Google Earth Engine JavaScript API. Zenodo. https://doi.org/10.5281/zenodo.6341960. "],["software-settings.html", "4 Satellite Data Acquisition Software and Settings 4.1 {reticulate} Conda Environment 4.2 Google Earth Engine Setup", " 4 Satellite Data Acquisition Software and Settings Currently, all satellite data in AquaSat v2 are obtained using the Python API for Google Earth Engine (GEE) (Gorelick et al. 2017). While the orchestration of data acquisition is performed by the {targets} workflow, all code directly related to GEE data acquisition is written in Python. 4.1 {reticulate} Conda Environment RStudio (Posit team 2023) is an IDE that, alongside the {reticulate} package (Ushey, Allaire, and Tang 2023), facilitates integration of R and Python code within the same environment. In AquaSat v2, we use a single R script to set up a {reticulate} Conda environment that is invoked at the beginning of a {targets} run to be sure that our Python code runs consistently. Python and python module Software/Python Module version citation Python 3.10.13 Python Software Foundation, www.python.org earthengine-api 1.4.0 Gorelick (2023) pandas 2.0.3 The pandas development team (2023) pyreadr 0.5.2 Fajardo (2023) PyYAML 6.0.2 The PyYAML Project, https://github.com/yaml/pyyaml numpy 1.24.4 Harris et al. (2020) The script run_targets.Rmd includes the steps to create this environment and authenticate your GEE user. These steps should be run prior to running the pipeline to assure a smooth run of the workflow. 4.2 Google Earth Engine Setup In order to run any GEE-related targets, you will need to have a Google Earth Engine account (see 4.2.1), a Google Earth Engine Cloud Project (described in 4.2.3) , gcloud CLI set up on your computer (see 4.2.2), and you will need to alter the configuration file (described in 4.2.3). 4.2.1 Create a GEE account Creation of a GEE account is free. Click ‘Get Started’ at the far right side of the earthengine.google.com webpage to create an account: 4.2.2 gcloud CLI This workflow requires the installation and initiation of gcloud CLI, a command-line tool set for accessing Google Cloud Resources. All settings for AquaSat v2 are default gcloud configurations using a single GEE project. The link above documents how to set up gcloud. 4.2.3 GEE project setting AquaSat v2 is run in a specific GEE project associated with our authenticated Google account. If you wish to re-run this code as written, you will not have proper access because the code refers to our specific GEE project. You will need to update the config yaml (in lakeSR: b_pull_Landsat_SRST_poi/config_files/config_poi.yml, in siteSR_WQP: gee_config.yml) with your Google credentials and GEE project in order to run the pipeline locally. If you are new to GEE, go to code.earthengine.google.com and enter the project name listed in the top right hand corner of your screen: Header of code.earthengine.google.com with current Earth Engine project highlighted in the red box to the right. Alternatively, you can create an GEE project for this task in the dropdown menu accessed by clicking on the icon to the right of the highlighted box in the figure above. This workflow will not run without specifying an Earth Engine Project that is managed by the Google Account you authenticate this run with. 4.2.4 GEE Authentication Once gcloud is installed and initialized, the configuration file is properly set up, and the Conda environment is set up, you can authenticate your GEE instance. For this workflow, this is completed in the run_targets.Rmd script at the root directory. This script provides explicit directions to complete this task before running the pipeline. References Fajardo, Otto. 2023. Pyreadr: Reads/Writes r RData and Rds Files into/from Pandas Data Frames. https://github.com/ofajardo/pyreadr. Gorelick, N. 2023. Earthengine-Api: Earth Engine Python API. Google. https://github.com/google/earthengine-api. Gorelick, N, M Hancher, M Dixon, S Ilyushchenko, D Thau, and R Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031. Harris, Charles R., K. Jarrod Millman, Stéfan J. van der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, et al. 2020. “Array Programming with NumPy.” Nature 585 (7825): 357–62. https://doi.org/10.1038/s41586-020-2649-2. Posit team. 2023. RStudio: Integrated Development Environment for r. Boston, MA: Posit Software, PBC. http://www.posit.co/. The pandas development team. 2023. Pandas-Dev/Pandas: Pandas. Zenodo. https://doi.org/10.5281/zenodo.8092754. Ushey, Kevin, J. J. Allaire, and Yuan Tang. 2023. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. "],["LS-C2-SRST.html", "5 Landsat Collection 2 SRST 5.1 Initialisms and Landsat Jargon 5.2 Background Information 5.3 Surface Reflectance Product 5.4 Surface Temperature", " 5 Landsat Collection 2 SRST 5.1 Initialisms and Landsat Jargon SR: surface reflectance ST: surface temperature Collection 2 (C2): The second version of the Landsat record - the transition to C2 began in 2020. There were extensive changes to the data storage and metadata when moving from Collection 1 to C2. An overview of the differences is available as a PDF download here from the USGS. AquaSat v1 and LimnoSat-US were based on Collection 1 data, which are no longer available from the USGS and have been superseded by Collection 2 data. Data Tier: a data tier for Landsat refers to data quality and processing. lakeSR uses Tier 1 data exclusively which conform to the highest level of data quality. To learn more about Landsat tiers, see this video from the USGS. Data Processing Level (Level): a data processing level for Landsat refers to how much the data have been processed. Level 1 (top of atmosphere) is less processed than Level 2 (surface reflectance). lakeSR uses Level 2 data exclusively, as it has gone through a standard atmospheric correction process that attempts to standardize data handling through out the Landsat record - it is derived from Level 1 data. NASA has compiled a list of general data processing levels and descriptions here. Landsat stack: this is the collated Landsat historical dataset at a specific location. Matchup: a pair of observations, one from an in situ source, one from a remote sensing source. Matchups are often defined by a time window relative to the time of the in situ measurement, both before and after. 5.2 Background Information The information presented in this section originates from the NASA Landsat Science website and has been summarized here for the purpose of providing background information about the Landsat archive relevant to the creation and use of lakeSR. The Landsat archive of multispectral and thermal data in lakeSR is composed of Landsat missions 4 through 9 and spans more than 40 years. Mission and Sensor Launch Date End of Science Mission Decommission Date Landsat 4 TM (EROS Center 2020a) 1982-07-16 1993-12-14 2001-06-15 Landsat 5 TM (EROS Center 2020a) 1984-03-01 2011-11-18 2013-06-05 Landsat 7 ETM+ (EROS Center 2020b) 1999-04-15 2022-04-06 N/A Landsat 8 OLI/TIRS (EROS Center 2020c) 2013-02-11 N/A N/A Landsat 9 OLI-2/TIRS-2 (EROS Center 2020c) 2021-09-27 N/A N/A The image record for Landsat 4 is not consistent nor robust due to a data transmitter failure early in service, however our pipeline acquires data as available. Landsat 6 did not achieve orbit. For the purposes of AquaSat v2, we truncate the data record for Landsat 4 and 5 at the end of the Science Mission of the satellite. No corrections were made for the Landsat 7 scanline error that began on May 31, 2003, data were collected as available despite the scanline error since the data are still of acceptable quality per the USGS. Additionally, Landsat 7 began to experience orbital drift beginning in 2017, resulting in top-of-atmosphere (and therefore also surface reflectance) that had growing uncertainties over time as the drift increased (Qiu et al. 2021). Qui (2021) suggests that data are not robust enough for trend analysis after the start of the growing season in 2020, but because their analysis was of NDVI, we conservatively truncate the data at the end of 2019. 5.2.1 Spectral Response While the nominal bands for each of the missions within the archive are relatively consistent (with the addition of an Aerosol band beginning Landsat 8), the precise spectral response for each nominal band shifted beginning with Landsat 8 OLI/TIRS. The image below visualizes the spectral response throughout the Landsat archive. Image credit: L. Rocchio and J. Barsi; NASA. (https://landsat.gsfc.nasa.gov/article/the-intervening-atmosphere-tracing-the-provenance-of-a-favorite-landsat-infographic/) 5.2.2 Sensor Resolution The spatial resolution of the Level 1 data that the SR and ST products are derived from has not changed for optical bands over time (Aerosol, RGB, NIR, SWIR) but has varied over the historic record for thermal data: Sensors Optical Bands Thermal Bands TM 30 120 ETM+ 30 60 OLI/TIRS OLI-2/TIRS-2 30 100 All Collection 2 Level 2 Surface Reflectance and Surface Temperature data have been resampled to 30m. Alongside the pixel resolution of the sensors is the radiometric resolution at which the data are stored. TM and ETM+ data are stored as 8-bit data products, OLI data are quantitized to 12 bits and Landsat 9 to 14 bits. This equates to 256 shades per band for Landsat 4-7, 4,096 shades for Landsat 8 and 16,384 shades for Landsat 9, where higher numbers allow for greater precision of measurement in a given band. All Collection 2 Level 2 Surface Reflectance and Surface Temperature data have been rescaled to 16 bits. 5.3 Surface Reflectance Product The information presented in this section originates from the USGS Landsat Collection 2 Surface Reflectance product page and has been summarized here for the purpose of providing background information about the Landsat archive relevant to the creation and use of lakeSR. The Landsat C2 SR product is a Level 2 data product that has been atmospherically corrected from the Level 1 Top of Atmosphere product using a myriad of inputs to create a reasonably consistent data product across space and time. The USGS EROS describes the SR product as follows: Surface reflectance improves comparison between multiple images over the same region by accounting for atmospheric effects such as aerosol scattering and thin clouds, which can help in the detection and characterization of Earth surface change. Surface reflectance is generated from Level-1 inputs that meet the &lt;76 degrees Solar Zenith Angle constraint and include the required auxiliary data inputs to generate a scientifically viable product. 5.3.1 SR Atmospheric Processing The SR product for Landsat 4-7 is calculated using the Land Ecosystem Distrubance Adaptive Procesing System (LEDAPS) (Schmidt et al. 2013) and Landsat 8 and 9 SR data are calculated using the Land Surface Reflectance Code (LaSRC) algorithm (Vermote et al. 2018). The two algorithms are functionally different, but the outcome is the same: a consistently-processed surface reflectance product that is available worldwide. See the table under section heading ‘Differences in Surface Reflectance Processing Algorithms’ on the USGS Landsat C2 website for details. 5.4 Surface Temperature The information presented in this section originates from the USGS Landsat Collection 2 Surface Temperature product page and has been summarized here for the purpose of providing background information about the Landsat archive relevant to the creation and use of lakeSR. The Landsat Collection 2 Surface Temperature (ST) product is calculated using a single-channel algorithm (M. J. Cook 2014; M. Cook et al. 2014) to convert the thermal band data to temperature estimates in degrees Kelvin. These data are considered interoperable over space and time with few differences in the ST algorithm product within Collection 2, with the acknowledgement of the previously-documented spectral and radiometric resolution differences. It is important to note that the thermal band resolution is coarser than the optical bands in all Landsat missions (see Section 5.2.2). At this time we do not account for mixed thermal pixel boundaries due to the difference in pixel resolution between optical and thermal sensors in lakeSR or siteSR, however the median value of the POI in lakeSR should be a reasonable estimate and without contamination as long as the reported distance to shore is at least 100 meters greater than the 120 meter buffer around the POI to account for the resolution differences. Note that reservoirs and lakes with fluctuating water levels may require more careful considerations. While we provide summary statistics of these data for comparative and QAQC purposes, additional data handling may be necessary to use these data as precise estimates of water surface temperature. Herrick et al. (2023) provides an example of ST product debiasing. We do provide surface temperature summary statistics in the siteSR product as well, and users should approach the data with caution when a WQP monitoring site is near to a shoreline. While we do not have explicit guidance for the use of the surface temperature estimates for siteSR, we do provide some characteristics of sites and their relationships to NHD flowlines and waterbodies (see Section 3.2.2 for a description of these additional descriptors). Users could use a combination of MonitoringLocationTypeName, the flags assigned from our NHD assignment process, and the distance columns from that process to assess whether or not the temperature data is appropriate for a given site. Additional assessments (e.g. distance to shore) may be necessary to assess whether it is appropriate to use the temperature data for discrete analysis of temperature trends/patterns. References Cook, M J. 2014. “Atmospheric Compensation for a Landsat Land Surface Temperature Product.” PhD thesis, Rochester, NY. https://scholarworks.rit.edu/theses/8513. Cook, Monica, John R. Schott, John Mandel, and Nina Raqueno. 2014. “Development of an Operational Calibration Methodology for the Landsat Thermal Data Archive and Initial Testing of the Atmospheric Compensation Component of a Land Surface Temperature (LST) Product from the Archive.” Remote Sensing 6 (11): 1124411266. https://doi.org/10.3390/rs61111244. EROS Center. 2020a. “USGS EROS Archive - Landsat Archives - Landsat 4-5 TM Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9IAXOVV. ———. 2020b. “USGS EROS Archive - Landsat Archives - Landsat 7 ETM Plus Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9C7I13B. ———. 2020c. “USGS EROS Archive - Landsat Archives - Landsat 8-9 OLI/TIRS Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9OGBGM6. Herrick, C., B. G. Steele, J. A. Brentrup, K. L. Cottingham, M. J. Ducey, D. A. Lutz, M. W. Palace, M. C. Thompson, J. V. Trout-Haney, and K. C. Weathers. 2023. “lakeCoSTR: A Tool to Facilitate Use of Landsat Collection 2 to Estimate Lake Surface Water Temperatures.” Ecosphere 14 (1): e4357. https://doi.org/10.1002/ecs2.4357. Qiu, Shirley, Zhe Zhu, Rong Shang, and Christopher J. Crawford. 2021. “Can Landsat 7 Preserve Its Science Capability with a Drifting Orbit?” Science of Remote Sensing 4. https://doi.org/10.1016/j.srs.2021.100026. Schmidt, Gail, Calli B. Jenkerson, Jeffrey Masek, Eric Vermote, and Feng Gao. 2013. “Landsat Ecosystem Disturbance Adaptive Processing System (LEDAPS) Algorithm Description.” Reston, VA. https://doi.org/10.3133/ofr20131057. Vermote, E., J. C. Roger, B. Franch, and Sergii Skakun. 2018. “LaSRC (Land Surface Reflectance Code): Overview, Application and Validation Using MODIS, VIIRS, LANDSAT and Sentinel 2 Data’s.” In, 8173–76. https://doi.org/10.1109/IGARSS.2018.8517622. "],["LS-SRST-pull.html", "6 Landsat Collection 2 SRST Data Product 6.1 Changes from AquaSat v1 and LimnoSat-US 6.2 Overview of Acquisition Steps 6.3 Technical Implementation of GEE Acquisition Script 6.4 Payload handling", " 6 Landsat Collection 2 SRST Data Product The lakeSR-Landsat data product is a set of tabular datasets, representing the Landsat surface reflectance (SR) and surface tempearture (ST) data summarized for the point of inaccessibility (POI) location which is meant to represent pelagic conditions at a given waterbody (identified by its NHD unique identifier, see Section 3). This data product contains “full stacks” of the Landsat Collection 2 record - that is, all summarized Landsat data available from all Landsat missions that met our within-image QA criteria. The siteSR-Landsat data product is similar, but is acquired at unique sampling locations as described in 3.2. 6.1 Changes from AquaSat v1 and LimnoSat-US While much of the general architecture from the precedent data products remained unchanged, in AquaSat v2 we have added a number of features to the remote sensing acquisition workflow, have increased efficiency of the data pull, and have made the acquired data more robust through additional masking. The bullets below summarize the changes implemented in this update. using yaml file for configuration of the workflow. This allows for greater flexibility in data acquisition including the use of custom configurations for the pull. assuring location and buffer area are completely contained in a path-row prior to pulling the data. This reduces erroneous counts of pixels for locations and buffers that are at the edge of a path-row, assuring that the buffer distance and included area is consistent per location if it is in the area of path-row overlap. Cartoon example: Locations (and their buffers) are the blue circles and the extent of the path-row is indicated by the large dark blue or orange boxes. In this example, location 1 would be extracted for both path-row 1 and 2, location 2 only extracted for path-row 2, and location 3 only extracted for path-row 1. inclusion of Landsat 4 and Landsat 9. At the time of AquaSat v1 and LimnoSat-US, Landsat 4 was not easily integrated with other Landsat missions due to data storage differences. Collection 2 updates allowed for easier interoperability of the TM sensor (Landsat 4) image series and have therefore been included in the update. Additionally, Landsat 9 came online in 2021, and has been added to the data product. Landsat Collection 2 offers a Surface Temperature product derived from the thermal band. In AquaSat v2, we include data from this band. See Section 5.4 for additional considerations in use of these data. sending tasks to GEE explicitly per path-row and limiting the Landsat stack to the explicit path-row to eliminate duplicate acquisitions. In the previous products, duplicate location/path-row data were acquired because the extracted Landsat stack was not limited to the explicit WRS path-row that the point was in. This meant that locations that were in a path-row overlap would be extracted twice in two different WRS path-row extents. The code below is an example of this type of filtering that occurs as we run a path-row extraction, where we once clipped the stack to the AOI of the path-row. # separate the path-row into path and row values wrs_pathrow = &quot;013031&quot; w_p = int(str(wrs_pathrow)[:3]) w_r = int(str(wrs_pathrow)[-3:]) # filter the Landsat 7 Collection 2 Tier 1 Level 2 product for the path, row, and valid dates l7 = (ee.ImageCollection(&quot;LANDSAT/LE07/C02/T1_L2&quot;) .filter(ee.Filter.eq(&quot;WRS_PATH&quot;, w_p)) .filter(ee.Filter.eq(&quot;WRS_ROW&quot;, w_r)) .filterDate(&#39;1999-05-28&#39;, &#39;2019-12-31&#39;)) filtering for valid mission dates at Landsat stack step. As seen in the code chunk above, we also filter for the valid mission dates as detailed in Section 5.2 - in the previous version this was completed after the Landsat stack was acquired. implementation of Collection 2 updates, specifically scaling changes and updated QA band conventions. The updated scaling factor function is as follows as directed by the US Geological Survey (2021) and US Geological Survey (2024) documents. def apply_scale_factors(image): &quot;&quot;&quot; Applies scaling factors for Landsat Collection 2 surface reflectance and surface temperature products Args: image: one ee.Image of an ee.ImageCollection Returns: ee.Image with band values overwritten by scaling factors &quot;&quot;&quot; opticalBands = image.select(&#39;SR_B.&#39;).multiply(0.0000275).add(-0.2) thermalBands = image.select(&#39;ST_B.*&#39;).multiply(0.00341802).add(149.0) return (image .addBands(opticalBands, None, True) .addBands(thermalBands, None, True)) masking changes. Many updates were made to assure high quality data through the use of updated masking procedures. The following masks were added in this workflow and are detailed below in Section 6.3.1: apply_fill_mask_457, apply_fill_mask_89, add_realistic_mask_457, add_realistic_mask_89, add_opac_mask (Landsat 4, 5, 7 only), add_sr_aero_mask (Landsat 8, 9 only). The cloud mask was also updated to include all sources of contamination (including cloud shadow and dilated clouds) in addition to clouds, snow, and ice. The proportion of pixels within the location buffer that were masked out due to clouds is now tracked as prop_clouds as an additional method of QA handling downstream of the GEE extraction. DSWE-like implementation for water detection. We have moved from using the JRC Global Surface Water Mapping Layers Pekel et al. (2016) to using a modified Dynamic Surface Water Extent (DSWE) algorithm based on the USGS implementation of DSWE described in LSDS-2042 version 3 (US Geological Survey 2023a). See Section 6.3.2 for details. removing no-data acquisitions before GEE export. In the AquaSat v2 update, we remove any rows from the summarized GEE product before export. This adds efficiency to the pull by removing those rows before export, which is a source of added time in the GEE bottleneck. checking for failed tasks. We added a sanity check for failed tasks, since task status is not conveyed from GEE. 6.2 Overview of Acquisition Steps The workflow for data acquisition from GEE for lakeSR and siteSR is as follows: read in and format the yaml configuration file for the GEE run reformat the locations file for the GEE run using the configuration file determine the WRS-2 path-rows that intersect with the locations file filter the locations for those that are completely contained by the WRS-2 path-row when the automated buffer is added, add the WRS-2 path-rows to the reformatted locations, and save distinct location files by path-row for easier processing in Python iteratively run the GEE script per WRS-2 path-row check to see that all tasks are complete in GEE before moving to next step check to see if any tasks failed in GEE extraction which is not visible from the RStudio IDE 6.2.1 Creating a Custom Configuration File lakeSR (and siteSR) can be modified to be run by a user by setting up a new config file and altering the {targets} workflow to point to that config file. To configure a new run of this workflow, fill out the yaml file at the file path b_pull_Landsat_SRST_poi/config_files/config.yml and modify the _targets.R script at line 28 to reflect the updated config file. To run the pipeline with this custom configuration, follow the steps in run_targets.Rmd, which will run the pipeline. If you wish to make changes to any processes that are not indicated in the config file (using a different set of lakes/source files, remote sensing masking procedures, summary statistics, QAQC filtering, mission handoff corrections, etc.) we encourage you to do so. Just remember, this pipeline takes DAYS to run due to the bottleneck when submitting tasks to Google Earth Engine. If you wish to extract remote sensing data for specific locations in a lake, we encourage you to look to our siteSR data product which is more suited to extracting data of that nature. Please note, calculating hand-off coefficients from small numbers of lakes may not provide robust enough summary statistics for intermission comparison and timeseries analysis. See Section 7 for additional guidance. 6.3 Technical Implementation of GEE Acquisition Script In order to cue Python scripts and map along WRS-2 path-rows within the {targets} architecture, we use a function run_GEE_per_pathrow() which writes the current WRS-2 path-row to a text file, then sources a python script that uses that text file to run the acquisition for the path-row. Additional details are provided below to describe the steps in the python script (run_GEE_per_pathrow.py). 6.3.1 Custom Earth Engine Masking Functions The first section of run_GEE_per_pathrow.py saves custom functions used in the Landsat stack acquisition. These include data manipulation to create Earth Engine (EE) objects, custom QA masks, DSWE algorithm, and the functions that perform the masking and extraction of data from the Landsat image. Below is an overview of some of the custom masking procedures and their justification, if applicable. We use the most aggressive masking procedures in the lakeSR and siteSR products in order to attempt to have consistent and robust data across such a large area of data acquisition. An interactive masking viewer is available for Landsat 4/5/7 and Landsat 8/9 to see these masks in action. apply_rad_mask: Masks out all pixels that are radiometrically saturated in any optical band using the QA_RADSAT QA band. The Landsat User Guides (US Geological Survey 2021, 2024) note that radiometrically saturated data are “unusable”. Saturated bands happen infrequently in Landsat 8 and 9, but we still apply this mask to all Landsat mission data for continuity. add_cf_mask: Adds a mask band for any pixels obstructed by clouds and snow/ice using the CLOUD_QA band. This is a general QA band that describes clouds/snow/ice detected by algorithms defined by the atmospheric processing procedure. We have elected to only include pixels that do not contain clouds, cloud shadows, dispersed clouds, or snow/ice as defined by this band. In particular, we follow the suggestions in the product User Guide (US Geological Survey 2021, 2024) Users are advised to engage the QA “Dilated Cloud” (bit 1) AND “Cloud” (bit 3) OFF condition to correctly identify clear pixels over water. add_sr_aero_mask: Adds a mask band for any pixels in Landsat 8 and 9 that have ‘medium’ or ‘high’ aerosol QA flags from the SR_QA_AEROSOL band. Because water is particularly difficult to assess from space, we are more aggressive in this mask than suggested by the Landsat 8 and 9 User Guide (US Geological Survey 2024) which states: “Note that pixels classified as high aerosol content are not recommended for use.” add_opac_mask: Adds a mask band to remove pixels where atmospheric opacity is greater than 0.3 in Landsat 4, 5, and 7 using the SR_ATMOS_OPACITY band. For similar reasons as a more aggressive aerosol mask in Landsat 8 &amp; 9, we use this mask in addition to the cloud mask (apply_cf_mask). The Landsat 4-7 User Guide (US Geological Survey 2021) states the following about the atmospheric opacity values: A general interpretation of atmospheric opacity is that values less than 0.1 are clear, 0.1-0.3 are average, and values greater than 0.3 indicate haze or other cloud situations. SR values from pixels with high atmospheric opacity will be less reliable, especially under high solar zenith angle conditions. apply_fill_mask_457 and apply_fill_mask_89: Adds a mask band where any band value is 0 before applying scaling factors to bands. Filled values are infrequent; however, when acquiring data across such a large area and time they are bound to happen. add_realistic_mask_457 and add_realistic_mask_89: Adds a mask band where any band is less than -0.01 after scaling, indicating overcorrection of SR product. While the stated minimum value of the ‘valid range’ for the SR product is 7273 prior to application of scaling factors (0.0000075 after scaling), we know that the Level-2 Surface Reflectance product has been fine-tuned on terrestrial data and small over-corrections of surface reflectance, especially over dark surfaces, is likely to happen. We explicitly allow for very small negative reflectance values to be sure we do not remove very deep, oligotrophic and/or high DOC water systems from our data set while implementing this QA filter. add_glint_mask: Adds a mask band where any optical band is &gt; 0.2, indicating likely sun glint artifacts. add_ir_glint_flag: Adds a band where any near infrared or shortwave infrared value is greater than 0.1, but does not mask the pixel. This flag is meant to be a diagnostic for downstream users to make additional qualititative assessment of sun glint affected data and is tallied with all masks implemented. We track pixel-level instances of the use of the aerosol mask in Landsat 8/9, the opacity mask in Landsat 4/5/7, the realistic mask (holistically and per band), and the sun glint mask (holistically and per band) in our GEE workflow. These tallies represent the number of pixels masked for each QA procedure prior to summarizing the data within the buffered area. 6.3.2 Defining water area We use an adapted version Dynamic Surface Water Extent (DSWE) algorithm to define what pixels are water within the buffer of our specific locations. DSWE was defined in Jones (2019) for Landsat Collection 1 and re-implemented for Collection 2 as a Level-3 data product in US Geological Survey (2023a). Differences between the Level-3 implementation and the on-the-fly calculation made within our workflow are as follows: we use the Level 2 SR product instead of the Level 2 Analysis Ready Data Product to calculate DSWE threshold values we mask any DSWE values that are not fully illuminated (a value of 0 in the function below) as defined by the ee.Terrain.hillShadow function in Google Earth Engine using the MERIT DEM version 1.0.3 (Yamazaki et al. 2017) at an extent of 3000 meters surrounding a given point for analysis. Screen shot of code used for implementation of hill shadow to determine masking procedures of the DSWE value. This is different from the implementation described in the Level 3 data product which uses a set of hillshade and landcover thresholds to determine whether or not the resulting DSWE value should be masked. Based on extensive visual inspection, our adaptation seems to label pixels as expected. Our implementation of the DSWE algorithm results in the following values per pixel based on the thresholds described in US Geological Survey (2023a) table 2.2 and 2.3 a value of 0 indicates no water/fill 1 is confident water 2 is low confidence water 3 is high confidence partial water (or vegetated water) 4 is low confidence partial water Within the scope of lakeSR and siteSR, we tabulate pixels that are a DSWE value of 1 (DSWE1) for high confidence open water, or what we call DSWE1a - high confidence open water OR the pixel meets a threshold that may indicate there is surface-level algae. The algae mask is defined as when a pixel has a DSWE value greater than 1 and the green band scaled value is greater than 0.05 and the red band scaled value is less than 0.04. These values are based on optical properties intended to mimic the spectral response of chlorophyll a as described by Burket, Olmanson, and Brezonik (2023). This is an experimental mask, so we export both DSWE1 and DSWE1a summaries within lakeSR. We have found some omission error within DSWE1 for visible floating scum within river systems and this additional mask captures many of those pixels without adding unnecessary uncertainty. Users of the lakeSR and siteSR data products can choose to use the DSWE1a product if applicable to their research, however, this threshold was defined in the Illinois and Ohio Rivers and may not be applicable in all environments. 6.4 Payload handling Because GEE is a free service to those at academic or governmental institutions, there are limits to the total number of tasks being run co-currently on GEE’s platform. For this reason, tasks are sent to GEE as path-row groups as soon as there are fewer than 10 tasks in the GEE tasks queue. Additionally, any pathrow containing more than 5,000 POI locations are sent as separate tasks in 5000 location chunks. This is an additional step that is taken in addition to processing per path-row to avoid failed tasks. We have also implemented a status check for tasks sent to GEE to determine if any have failed (target b_check_for_failed_tasks), as once the tasks are sent from the RStudio IDE, you can not tell whether or not they have completed or failed. This stores a text file at the filepath b_pull_Landsat_SRST_poi/out/GEE_task_errors_vRUN_DATE.csv containing the names of the tasks that have failed. If no tasks have failed, no file will be present. Generally speaking failed tasks would indicate an error within the GEE acquisition script, usually due to changes in the b_pull_Landsat_SRST_poi/py/run_GEE_per_pathrow.py script. We recommend checking the task status of the GEE run at https://code.earthengine.google.com/tasks after any changes to that file, which will indicate if tasks are failing without waiting for the total completion of the GEE target. ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE References Burket, Martha Otte, Leif G. Olmanson, and Patrick L. Brezonik. 2023. “Comparison of Two Water Color Algorithms: Implications for the Remote Sensing of Water Bodies with Moderate to High CDOM or Chlorophyll Levels.” Sensors 23 (3): 1071. https://doi.org/10.3390/s23031071. Jones, John W. 2019. “Improved Automated Detection of Subpixel-Scale Inundationrevised Dynamic Surface Water Extent (DSWE) Partial Surface Water Tests.” Remote Sensing 11 (4). https://doi.org/10.3390/rs11040374. Pekel, Jean-François, Andrew Cottam, Noel Gorelick, and Alan S. Belward. 2016. “High-resolution mapping of global surface water and its long-term changes.” Nature 540 (7633): 418–22. https://doi.org/10.1038/nature20584. US Geological Survey. 2021. “Landsat 4-7 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” https://www.usgs.gov/media/files/landsat-4-7-collection-2-level-2-science-product-guide. ———. 2023a. “Landsat Collection 2 (C2) Level 3 (L3) Dynamic Surface Water Extent (DSWE) Data Format Control Book (DFCB).” Sioux Falls, SD. ———. 2024. “Landsat 8-9 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” https://www.usgs.gov/media/files/landsat-8-9-collection-2-level-2-science-product-guide. Yamazaki, Dai, Daiki Ikeshima, Ryunosuke Tawatari, Tomohiro Yamaguchi, Fiachra O’Loughlin, Jeffery C. Neal, Christopher C. Sampson, Shinjiro Kanae, and Paul D. Bates. 2017. “A High-Accuracy Map of Global Terrain Elevations.” Geophysical Research Letters 44 (11): 5844–53. https://doi.org/10.1002/2017GL072874. "],["handoff.html", "7 Basic Quality Assurance and Calculating Intermission Handoffs 7.1 Raw lakeSR stack collation 7.2 Post-hoc filters 7.3 Calculating intermission handoffs", " 7 Basic Quality Assurance and Calculating Intermission Handoffs Up until this point in the workflow, no data filtering has occurred other than the masking procedures that eliminate obviously contaminated pixel-level data due to sensor malfunction, clouds, haze, and glint as described in Section 6.3.1. We also implement further QA filters for the remote sensing stacks to assure high-quality data. These post-hoc filters are described in 7.2. Additionally, it is necessary to standardize band values between Landsat missions in order to create a robust timeseries. Maciel et al. (2023) notes the issues in using the Landsat Surface Reflectance product as a timeseries without careful handling of data between missions. This standardization process attempts to address changes in sensor spectral response and atmospheric correction procedures. For the purposes of AquaSat v2, we call this standardization process “intermission handoffs”. We implement two versions of intermission handoffs: the method described in Roy et al. (2016) (“Roy method”) and an adapted version of that described in Gardner et al. (2021) (“Gardner method”) (described in section 7.3). 7.1 Raw lakeSR stack collation The data exported from the GEE tasks described in Section 6 were collated into large compressed .feather files per DSWE type (DSWE1 and DSWE1a), per Landsat mission, and per path prefix. The path prefix subset is designed to reduce data corruption due to file size in the upload/download process to Google Drive, where the collated files are stored for posterity and to add functionality to this workflow. The Google Drive ids can be found at the folder path c_collate_Landsat_data/out/ and can be accessed without special were collated into large compressed .feather files per DSWE type (DSWE1 and DSWE1a), per Landsat mission, and per path prefix. The path prefix subset is designed to reduce data corruption due to file size in the upload/download process to Google Drive, where the collated files are stored for posterity and to add functionality to this workflow. The Google Drive ids can be found at the folder path c_collate_Landsat_data/out/ and can be accessed without special permissions by downstream users. Many of these files are quite large (on the order of many GBs) and are very difficult to handle outside of a programming or database environment. We provide these files for advanced users who wish to make changes to the QAQC or intermission handoff procedures. At the time of running the pipeline, we assigned a max vector size (‘R_MAX_VSIZE’) of 32 GB using the .Renviron document in this repository and it was run on a machine with 64 GB of memory. If your system has less than 32 GB of memory, this portion of the workflow may not successfully run. 7.2 Post-hoc filters We acknowledge that even with the best masking procedures, our workflow may still result in erroneous or misleading SR values. To address this we implement post-hoc filters that are applied to the stack to reduce uncertainty in the remote sensing data as much as possible. total count of pixels (pCount_dswe1 or pCount_dswe1a) contributing to summary values must be ≥ 8. This is a slight change from AquaSat v1 which required 10 pixels. Due to the more rigorous masking procedures (thant ASv1) we believe allows for a slightly more conservative QA filter via the reduction of required pixels for inclusion in the lakeSR dataset. if the median temperature is below freezing (med_SurfaceTemp &lt; 273.15 ° K), the row is dropped. This is our best attempt at removing data during any freezing period and also is an attempt at detecting clouds which can impact the thermal estimates. In particular, cirrus clouds can go unnoticed in cloud detection algorithms used that inform our masking procedures. either NIR surface reflectance or SWIR1 and SWIR2 surface reflectance must be &lt; 0.1, this is to remove any extracted samples where sun glint has likely affected the data that was not masked in the RGB bands. In aquatic environments, NIR, SWIR1, and SWIR2 surface reflectance values should be very low and these bands can be used for detecting sun glint affected areas Vanhellemont (2019). Since NIR bands can be elevated in high-sediment waters (e.g., Doxaran, Froidefond, and Castaing 2002) and SWIR can be elevated in high chlorophyll environments (e.g, Hu 2009), and we did not wish to bias our dataset and remove data of this nature, we embraced this conditional approach. While there are numerous other diagnostic tests we could apply to filter the RS data, these are the QA filters that we deem to be the most foundational and unifying for reliable RS data across the US and Territories. Figures ?? through ?? show how many rows of data were dropped through this QA process. 7.2.1 Landsat 4 QA Summary Summary of dropped rows for Landsat 4’s DSWE1 (confident water) RS summaries. Summary of dropped rows for Landsat 4’s DSWE1a (confident water with positive algal mask) RS summaries. 7.2.2 Landsat 5 QA Summary Summary of dropped rows for Landsat 5’s DSWE1 (confident water) RS summaries. Summary of dropped rows for Landsat 5’s DSWE1a (confident water and positive algal mask) RS summaries. 7.2.3 Landsat 7 QA Summary Summary of dropped rows for Landsat 7’s DSWE1 (confident water) RS summaries. Summary of dropped rows for Landsat 7’s DSWE1a (confident water and positive algal mask) RS summaries. 7.2.4 Landsat 8 QA Summary Summary of dropped rows for Landsat 8’s DSWE1 (confident water) RS summaries. Summary of dropped rows for Landsat 8’s DSWE1a (confident water and positive algal mask) RS summaries. 7.2.5 Landsat 9 QA Summary Summary of dropped rows for Landsat 9’s DSWE1 (confident water) RS summaries. Summary of dropped rows for Landsat 9’s DSWE1a (confident water and positive algal mask) RS summaries. 7.3 Calculating intermission handoffs In AquaSat v2, we standardize values relative to Landsat 7 (corr7) and Landsat 8 (corr8). The Landsat 7 intermission handoffs create a continuous record of remote sensing relative to Landsat 7 since Landsat 4 and 5 and Landsat 8 and 9 can be treated as interchangable due to the similarity in payload and radiometric resolution. Landsat 8 handoffs (corr8) can only be applied to Landsat 7 and 9 due to mission overlap, so the standardized data timeseries is shorter. 7.3.1 Roy method The Roy method for calculating intermission handoffs uses paired images at specific sites, where the reflectance data are obtained are from two missions (e.g. Landsat 7 and Landsat 8) separated by one day at a specific location within the overlapping paths in the WRS2 path-row framework (see figure (ref?)(path-overlap-roy)). An example of two overlapping WRS2 paths (grey area) separated by one day. Any location with data for both images would be considered a paired data point to define the Roy method intermission handoffs. While Roy et al. (2016) implemented this method on a pixel-by-pixel basis, we implement using the median band value per site. This is used in place of the explicit filters described in the Roy method (saturated pixels, cloudy/snowy pixels, and pixels with value changes greater than the changes in atmospheric correction), as we have implemented masks and QA filters to reduce these sources of error. Handoff coefficients are defined by the ordinary least squares regression line of the Landsat 5 against the Landsat 7 data and Landsat 7 against the Landsat 8 data (see Table 7.1). For the purposes of this documentation, we only include figures for DSWE1 due to the size of the match datasets, but provide the OLS regression coefficients for both in Table ??. Table 7.1: Summary of mission data used to create the Roy method intermission handoff. Early mission Late mission n matches Landsat 5 Landsat 7 4,902,089 Landsat 7 Landsat 8 592,752 Landsat 5 to 7 correction (roy_corr7) ## [[1]] Figure 7.1: Roy method intermission handoffs of Landsat 5 relative to Landsat 7. ## ## [[2]] Figure 7.2: Roy method intermission handoffs of Landsat 5 relative to Landsat 7. ## ## [[3]] Figure 7.3: Roy method intermission handoffs of Landsat 5 relative to Landsat 7. ## ## [[4]] Figure 7.4: Roy method intermission handoffs of Landsat 5 relative to Landsat 7. ## ## [[5]] Figure 7.5: Roy method intermission handoffs of Landsat 5 relative to Landsat 7. ## ## [[6]] Figure 7.6: Roy method intermission handoffs of Landsat 5 relative to Landsat 7. ## ## [[7]] Figure 7.7: Roy method intermission handoffs of Landsat 5 relative to Landsat 7. Landsat 8 to 7 correction (roy_corr7) ## [[1]] Figure 7.8: Roy method intermission handoffs of Landsat 8 relative to Landsat 7. ## ## [[2]] Figure 7.9: Roy method intermission handoffs of Landsat 8 relative to Landsat 7. ## ## [[3]] Figure 7.10: Roy method intermission handoffs of Landsat 8 relative to Landsat 7. ## ## [[4]] Figure 7.11: Roy method intermission handoffs of Landsat 8 relative to Landsat 7. ## ## [[5]] Figure 7.12: Roy method intermission handoffs of Landsat 8 relative to Landsat 7. ## ## [[6]] Figure 7.13: Roy method intermission handoffs of Landsat 8 relative to Landsat 7. ## ## [[7]] Figure 7.14: Roy method intermission handoffs of Landsat 8 relative to Landsat 7. Landsat 7 to 8 correction (roy_corr8) ## [[1]] Figure 7.15: Roy method intermission handoffs of Landsat 7 relative to Landsat 8. ## ## [[2]] Figure 7.16: Roy method intermission handoffs of Landsat 7 relative to Landsat 8. ## ## [[3]] Figure 7.17: Roy method intermission handoffs of Landsat 7 relative to Landsat 8. ## ## [[4]] Figure 7.18: Roy method intermission handoffs of Landsat 7 relative to Landsat 8. ## ## [[5]] Figure 7.19: Roy method intermission handoffs of Landsat 7 relative to Landsat 8. ## ## [[6]] Figure 7.20: Roy method intermission handoffs of Landsat 7 relative to Landsat 8. ## ## [[7]] Figure 7.21: Roy method intermission handoffs of Landsat 7 relative to Landsat 8. Landsat 9 to 8 correction (roy_corr8) ## [[1]] Figure 7.22: Roy method intermission handoffs of Landsat 9 relative to Landsat 8. ## ## [[2]] Figure 7.23: Roy method intermission handoffs of Landsat 9 relative to Landsat 8. ## ## [[3]] Figure 7.24: Roy method intermission handoffs of Landsat 9 relative to Landsat 8. ## ## [[4]] Figure 7.25: Roy method intermission handoffs of Landsat 9 relative to Landsat 8. ## ## [[5]] Figure 7.26: Roy method intermission handoffs of Landsat 9 relative to Landsat 8. ## ## [[6]] Figure 7.27: Roy method intermission handoffs of Landsat 9 relative to Landsat 8. ## ## [[7]] Figure 7.28: Roy method intermission handoffs of Landsat 9 relative to Landsat 8. 7.3.2 Gardner method Gardner method intermission handoffs are defined by the data obtained in the overlapping period of time between two adjacent-in-time missions (details provided in Table 7.2). These data are filtered to sites that have at least one data point per year for at least 75% of the years of overlap. The filtered data are then summarized to each mission’s 1st-99th percentile value per band, and the handoff coefficients between missions are defined by the second-order polynomial relationship between them. When n is high, quantiles are equivalent to describing the central tendency of the distribution of the x:y relationship due to the Central Limit Theorem. Because we use a second-order polynomial, all values outside of the 1st and 99th percentile values used to define the intermission handoff are flagged corr7_flag, corr8_flag and should be used with extreme caution. All corr7 and corr8 relationships and their derived coefficients are provided in the sections below. Table 7.2: Summary of missions for handoffs calculated by the Gardner method. Note that n is summarized by scene, not by number of individual site observations contributing to the quantiles. Early mission Late mission Correction type Overlap Start Overlap End n Scenes of Early Mission n Scenes of Late Mission Landsat 5 Landsat 7 corr7 1999-04-15 2013-02-11 75,733 105,321 Landsat 7 Landsat 8 corr7, corr8 2013-02-11 2022-04-16 53,517 78,889 Landsat 8 Landsat 9 corr8 2021-09-27 2024-12-31 28,587 27,433 One additional consideration when using the Gardner method is, even when n scenes is high, if there is a difference between total scene numbers, there may be systematic differences ingrained into the coefficients since x and y are not truly ‘random samples’, impacting the validity of the Central Limit Theorem. An example of possible systematic differences could be fewer observations from non-CONUS locations in Landsat 5 due to data transmission errors. We did not investigate the differences in n listed in Table 7.2 to determine what, if any, systematic differences are present between the two missions. We provide the Gardner method handoffs for continuity with the riverSR product for users who would like that interoperability. Landsat 5 to 7 correction (gard_corr7) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] ## ## [[6]] ## ## [[7]] Landsat 8 to 7 correction (gard_corr7) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] ## ## [[6]] ## ## [[7]] Landsat 7 to 8 correction (gard_corr8) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] ## ## [[6]] ## ## [[7]] Landsat 9 to 8 correction (gard_corr8) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] ## ## [[6]] ## ## [[7]] References Doxaran, D., J.-M. Froidefond, and P. Castaing. 2002. “A Reflectance Band Ratio Used to Estimate Suspended Matter Concentrations in Sediment-Dominated Coastal Waters.” International Journal of Remote Sensing 23 (23): 5079–85. https://doi.org/10.1080/0143116021000009912. Gardner, John R., Xiao Yang, Simon N. Topp, Matthew R. V. Ross, Elizabeth H. Altenau, and Tamlin M. Pavelsky. 2021. “The Color of Rivers.” Geophysical Research Letters 48 (1): e2020GL088946. https://doi.org/10.1029/2020GL088946. Hu, Chuanmin. 2009. “A Novel Ocean Color Index to Detect Floating Algae in the Global Oceans.” Remote Sensing of Environment 113 (10): 2118–29. https://doi.org/10.1016/j.rse.2009.05.012. Maciel, Daniel Andrade, Nima Pahlevan, Claudio Clemente Faria Barbosa, Evlyn Márcia Leão de Moraes de Novo, Rejane Souza Paulino, Vitor Souza Martins, Eric Vermote, and Christopher J. Crawford. 2023. “Validity of the Landsat Surface Reflectance Archive for Aquatic Science: Implications for Cloud-Based Analysis.” Limnology and Oceanography Letters n/a (n/a). https://doi.org/10.1002/lol2.10344. Roy, D. P., V. Kovalskyy, H. K. Zhang, E. F. Vermote, L. Yan, S. S. Kumar, and A. Egorov. 2016. “Characterization of Landsat-7 to Landsat-8 Reflective Wavelength and Normalized Difference Vegetation Index Continuity.” Remote Sensing of Environment, Landsat 8 science results, 185 (November): 57–70. https://doi.org/10.1016/j.rse.2015.12.024. Vanhellemont, Quinten. 2019. “Adaptation of the Dark Spectrum Fitting Atmospheric Correction for Aquatic Applications of the Landsat and Sentinel-2 Archives.” Remote Sensing of Environment 225 (May): 175–92. https://doi.org/10.1016/j.rse.2019.03.010. "],["references.html", "8 References", " 8 References Blodgett, David, and Mike Johnson. 2023. nhdplusTools: Tools for Accessing and Working with the NHDPlus. Reston, VA: U.S. Geological Survey. https://doi.org/10.5066/P97AS8JD. Burket, Martha Otte, Leif G. Olmanson, and Patrick L. Brezonik. 2023. “Comparison of Two Water Color Algorithms: Implications for the Remote Sensing of Water Bodies with Moderate to High CDOM or Chlorophyll Levels.” Sensors 23 (3): 1071. https://doi.org/10.3390/s23031071. Cook, M J. 2014. “Atmospheric Compensation for a Landsat Land Surface Temperature Product.” PhD thesis, Rochester, NY. https://scholarworks.rit.edu/theses/8513. Cook, Monica, John R. Schott, John Mandel, and Nina Raqueno. 2014. “Development of an Operational Calibration Methodology for the Landsat Thermal Data Archive and Initial Testing of the Atmospheric Compensation Component of a Land Surface Temperature (LST) Product from the Archive.” Remote Sensing 6 (11): 1124411266. https://doi.org/10.3390/rs61111244. Doxaran, D., J.-M. Froidefond, and P. Castaing. 2002. “A Reflectance Band Ratio Used to Estimate Suspended Matter Concentrations in Sediment-Dominated Coastal Waters.” International Journal of Remote Sensing 23 (23): 5079–85. https://doi.org/10.1080/0143116021000009912. EROS Center. 2020a. “USGS EROS Archive - Landsat Archives - Landsat 4-5 TM Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9IAXOVV. ———. 2020b. “USGS EROS Archive - Landsat Archives - Landsat 7 ETM Plus Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9C7I13B. ———. 2020c. “USGS EROS Archive - Landsat Archives - Landsat 8-9 OLI/TIRS Collection 2 Level-2 Science Products.” https://doi.org/doi.org/10.5066/P9OGBGM6. Fajardo, Otto. 2023. Pyreadr: Reads/Writes r RData and Rds Files into/from Pandas Data Frames. https://github.com/ofajardo/pyreadr. Garcia-Castellanos, Daniel, and Umberto Lombardo. 2007. “Poles of Inaccessibility: A Calculation Algorithm for the Remotest Places on Earth.” Scottish Geographical Journal 123 (3): 227–33. https://doi.org/10.1080/14702540801897809. Gardner, John R., Xiao Yang, Simon N. Topp, Matthew R. V. Ross, Elizabeth H. Altenau, and Tamlin M. Pavelsky. 2021. “The Color of Rivers.” Geophysical Research Letters 48 (1): e2020GL088946. https://doi.org/10.1029/2020GL088946. Gorelick, N. 2023. Earthengine-Api: Earth Engine Python API. Google. https://github.com/google/earthengine-api. Gorelick, N, M Hancher, M Dixon, S Ilyushchenko, D Thau, and R Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031. Harris, Charles R., K. Jarrod Millman, Stéfan J. van der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, et al. 2020. “Array Programming with NumPy.” Nature 585 (7825): 357–62. https://doi.org/10.1038/s41586-020-2649-2. Herrick, C., B. G. Steele, J. A. Brentrup, K. L. Cottingham, M. J. Ducey, D. A. Lutz, M. W. Palace, M. C. Thompson, J. V. Trout-Haney, and K. C. Weathers. 2023. “lakeCoSTR: A Tool to Facilitate Use of Landsat Collection 2 to Estimate Lake Surface Water Temperatures.” Ecosphere 14 (1): e4357. https://doi.org/10.1002/ecs2.4357. Hu, Chuanmin. 2009. “A Novel Ocean Color Index to Detect Floating Algae in the Global Oceans.” Remote Sensing of Environment 113 (10): 2118–29. https://doi.org/10.1016/j.rse.2009.05.012. Jones, John W. 2019. “Improved Automated Detection of Subpixel-Scale Inundationrevised Dynamic Surface Water Extent (DSWE) Partial Surface Water Tests.” Remote Sensing 11 (4). https://doi.org/10.3390/rs11040374. Landau, William Michael. 2021. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959. Larsson, Johan. 2020. Polylabelr: Find the Pole of Inaccessibility (Visual Center) of a Polygon. https://cran.r-project.org/package=polylabelr. Maciel, Daniel Andrade, Nima Pahlevan, Claudio Clemente Faria Barbosa, Evlyn Márcia Leão de Moraes de Novo, Rejane Souza Paulino, Vitor Souza Martins, Eric Vermote, and Christopher J. Crawford. 2023. “Validity of the Landsat Surface Reflectance Archive for Aquatic Science: Implications for Cloud-Based Analysis.” Limnology and Oceanography Letters n/a (n/a). https://doi.org/10.1002/lol2.10344. Messager, Mathis Loïc, Bernhard Lehner, Günther Grill, Irena Nedeva, and Oliver Schmitt. 2016. “Estimating the Volume and Age of Water Stored in Global Lakes Using a Geo-Statistical Approach.” Nature Communications 7 (1): 13603. https://doi.org/10.1038/ncomms13603. Mondejar, Jeremy P., and Alejandro F. Tongco. 2019. “Near Infrared Band of Landsat 8 as Water Index: A Case Study Around Cordova and Lapu-Lapu City, Cebu, Philippines.” Sustainable Environment Research 29 (1): 16. https://doi.org/10.1186/s42834-019-0016-5. Pekel, Jean-François, Andrew Cottam, Noel Gorelick, and Alan S. Belward. 2016. “High-resolution mapping of global surface water and its long-term changes.” Nature 540 (7633): 418–22. https://doi.org/10.1038/nature20584. Posit team. 2023. RStudio: Integrated Development Environment for r. Boston, MA: Posit Software, PBC. http://www.posit.co/. Qiu, Shirley, Zhe Zhu, Rong Shang, and Christopher J. Crawford. 2021. “Can Landsat 7 Preserve Its Science Capability with a Drifting Orbit?” Science of Remote Sensing 4. https://doi.org/10.1016/j.srs.2021.100026. Ross, Matthew R. V., Simon N. Topp, Alison P. Appling, Xiao Yang, Catherine Kuhn, David Butman, Marc Simard, and Tamlin M. Pavelsky. 2019. “AquaSat: A Data Set to Enable Remote Sensing of Water Quality for Inland Waters.” Water Resources Research 55 (11): 10012–25. https://doi.org/10.1029/2019WR024883. Roy, D. P., V. Kovalskyy, H. K. Zhang, E. F. Vermote, L. Yan, S. S. Kumar, and A. Egorov. 2016. “Characterization of Landsat-7 to Landsat-8 Reflective Wavelength and Normalized Difference Vegetation Index Continuity.” Remote Sensing of Environment, Landsat 8 science results, 185 (November): 57–70. https://doi.org/10.1016/j.rse.2015.12.024. Schmidt, Gail, Calli B. Jenkerson, Jeffrey Masek, Eric Vermote, and Feng Gao. 2013. “Landsat Ecosystem Disturbance Adaptive Processing System (LEDAPS) Algorithm Description.” Reston, VA. https://doi.org/10.3133/ofr20131057. Stefansson, Vilhjalmur. 1920. “The Region of Maximum Inaccessibility in the Arctic.” Geographical Review 10 (3): 167–72. https://doi.org/10.2307/207749. The pandas development team. 2023. Pandas-Dev/Pandas: Pandas. Zenodo. https://doi.org/10.5281/zenodo.8092754. Topp, Simon, Tamlin Pavelsky, Xiao Yang, John Gardner, and Matthew R. V. Ross. n.d. “LimnoSat-US: A Remote Sensing Dataset for u.s. Lakes from 1984-2020.” https://doi.org/10.5281/zenodo.4139695. US Geological Survey. 2021. “Landsat 4-7 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” https://www.usgs.gov/media/files/landsat-4-7-collection-2-level-2-science-product-guide. ———. 2023a. “Landsat Collection 2 (C2) Level 3 (L3) Dynamic Surface Water Extent (DSWE) Data Format Control Book (DFCB).” Sioux Falls, SD. ———. 2023b. “USGS National Hydrography Dataset Best Resolution (NHD) - Alaska (Published 20230506) GeoPackage.” ———. 2024. “Landsat 8-9 Collection 2 (C2) Level 2 Science Product (L2SP) Guide.” https://www.usgs.gov/media/files/landsat-8-9-collection-2-level-2-science-product-guide. Ushey, Kevin, J. J. Allaire, and Yuan Tang. 2023. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. Vanhellemont, Quinten. 2019. “Adaptation of the Dark Spectrum Fitting Atmospheric Correction for Aquatic Applications of the Landsat and Sentinel-2 Archives.” Remote Sensing of Environment 225 (May): 175–92. https://doi.org/10.1016/j.rse.2019.03.010. Vermote, E., J. C. Roger, B. Franch, and Sergii Skakun. 2018. “LaSRC (Land Surface Reflectance Code): Overview, Application and Validation Using MODIS, VIIRS, LANDSAT and Sentinel 2 Data’s.” In, 8173–76. https://doi.org/10.1109/IGARSS.2018.8517622. Verpoorter, Charles, Tiit Kutser, David A. Seekell, and Lars J. Tranvik. 2014. “A Global Inventory of Lakes Based on High-Resolution Satellite Imagery.” Geophysical Research Letters 41 (18): 6396–6402. https://doi.org/10.1002/2014GL060641. Walker, Kyle. 2023. Tigris: Load Census TIGER/Line Shapefiles. https://CRAN.R-project.org/package=tigris. Xie, Yihui. 2016. Bookdown: Authoring Books and Technical Documents with r Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/bookdown. Yamazaki, Dai, Daiki Ikeshima, Ryunosuke Tawatari, Tomohiro Yamaguchi, Fiachra O’Loughlin, Jeffery C. Neal, Christopher C. Sampson, Shinjiro Kanae, and Paul D. Bates. 2017. “A High-Accuracy Map of Global Terrain Elevations.” Geophysical Research Letters 44 (11): 5844–53. https://doi.org/10.1002/2017GL072874. Yang, Xiao. 2020. Deepest Point Calculation for Any Given Polygon Using Google Earth Engine JavaScript API. Zenodo. https://doi.org/10.5281/zenodo.6341960. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
